import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Header } from './components/Header/Header';
import { LeftPanel } from './components/LeftPanel/LeftPanel';
import { Timeline } from './components/Timeline/Timeline';
import { BottomPanel } from './components/BottomPanel/BottomPanel';
import { mockArticles, mockQueues } from './utils/mockData';
import { Printer } from './types/printer.types';
import { Article } from './types/article.types';
import { Queue } from './types/queue.types';
import { fetchPrinters } from '../../store/simpleprintPrintersSlice';
import { RootState, AppDispatch } from '../../store';
import { mapSimplePrintsToPrinters } from './utils/printerMapper';
import './styles/PlanningV2Page.css';

export const PlanningV2Page: React.FC = () => {
  console.log('üöÄ PlanningV2Page component rendered');

  const dispatch = useDispatch<AppDispatch>();

  console.log('üîç Selecting state...');
  const reduxState = useSelector((state: RootState) => state);
  console.log('üîç Full Redux state:', reduxState);
  console.log('üîç simpleprintPrinters key exists?', 'simpleprintPrinters' in reduxState);

  const { printers: simpleprintPrinters, loading, error } = useSelector((state: RootState) => state.simpleprintPrinters);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SimplePrint –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Printer –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
  const printers = mapSimplePrintsToPrinters(simpleprintPrinters).sort((a, b) => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "P1S-10" -> 10)
    const numA = parseInt(a.name.split('-')[1] || '0');
    const numB = parseInt(b.name.split('-')[1] || '0');
    return numA - numB;
  });

  // –û—Ç–ª–∞–¥–∫–∞
  useEffect(() => {
    console.log('üîç SimplePrint printers from Redux:', simpleprintPrinters);
    console.log('üîç Mapped printers:', printers);
    console.log('üîç Loading:', loading);
    console.log('üîç Error:', error);
  }, [simpleprintPrinters, printers, loading, error]);

  const [articles, setArticles] = useState<Article[]>(mockArticles);
  const [queues, setQueues] = useState<Queue[]>(mockQueues);
  const [currentTime, setCurrentTime] = useState<Date>(new Date());

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    console.log('üì° Fetching printers...');
    dispatch(fetchPrinters());
  }, [dispatch]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const timer = setInterval(() => {
      dispatch(fetchPrinters());
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(timer);
  }, [dispatch]);

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading && printers.length === 0) {
    return (
      <div className="planning-v2-page">
        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', fontSize: '24px', color: '#06EAFC' }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...
        </div>
      </div>
    );
  }

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏
  if (error && printers.length === 0) {
    return (
      <div className="planning-v2-page">
        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '100vh', color: '#ff4d4f' }}>
          <div style={{ fontSize: '24px', marginBottom: '16px' }}>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤</div>
          <div style={{ fontSize: '16px' }}>{error}</div>
        </div>
      </div>
    );
  }

  return (
    <div className="planning-v2-page">
      <Header currentTime={currentTime} printers={printers} />

      <div className="planning-v2-content">
        <div className="planning-v2-main-layout">
          {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ */}
          <LeftPanel articles={articles} />

          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å —Ç–∞–π–º–ª–∞–π–Ω–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ */}
          <Timeline
            printers={printers}
            currentTime={currentTime}
          />
        </div>

        {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –æ—á–µ—Ä–µ–¥—è–º–∏ */}
        <BottomPanel queues={queues} />
      </div>
    </div>
  );
};
