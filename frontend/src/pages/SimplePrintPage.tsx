/**
 * SimplePrint Page - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ SimplePrint
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ SimplePrint —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */

import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  Table,
  Card,
  Button,
  Input,
  Space,
  Tag,
  Statistic,
  Row,
  Col,
  message,
  Spin,
  Modal,
  Select,
  Checkbox,
} from 'antd';
import {
  ReloadOutlined,
  SearchOutlined,
  FolderOutlined,
  FileOutlined,
  SyncOutlined,
  CloudServerOutlined,
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import { AppDispatch, RootState } from '../store';
import {
  fetchFiles,
  fetchFolders,
  fetchSyncStats,
  fetchFileStats,
  triggerSync,
  checkSyncStatus,
  cancelSync,
  setSyncing,
  SimplePrintFile,
} from '../store/simpleprintSlice';
import moment from 'moment';

const { Search } = Input;
const { Option } = Select;

const SimplePrintPage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { files, folders, syncStats, fileStats, loading, syncing, syncError, totalFiles } = useSelector(
    (state: RootState) => state.simpleprint
  );

  const [searchText, setSearchText] = useState('');
  const [selectedFolder, setSelectedFolder] = useState<number | undefined>();
  const [selectedFileType, setSelectedFileType] = useState<string | undefined>();
  const [syncModalVisible, setSyncModalVisible] = useState(false);
  const [syncLogs, setSyncLogs] = useState<string[]>([]);
  const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);
  const [pollingInterval, setPollingInterval] = useState<NodeJS.Timeout | null>(null);
  const [forceSync, setForceSync] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(50);
  const [groupByFolder, setGroupByFolder] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadData();
  }, []);

  const loadData = () => {
    dispatch(fetchFiles({ page: currentPage, page_size: pageSize }));
    dispatch(fetchFolders());
    dispatch(fetchSyncStats());
    dispatch(fetchFileStats());
  };

  const handleSearch = (value: string) => {
    setSearchText(value);
    setCurrentPage(1); // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
    dispatch(fetchFiles({
      search: value,
      folder: selectedFolder,
      file_type: selectedFileType,
      page: 1,
      page_size: pageSize
    }));
  };

  const handleFolderChange = (value: number | undefined) => {
    setSelectedFolder(value);
    setCurrentPage(1); // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    dispatch(fetchFiles({
      search: searchText,
      folder: value,
      file_type: selectedFileType,
      page: 1,
      page_size: pageSize
    }));
  };

  const handleFileTypeChange = (value: string | undefined) => {
    setSelectedFileType(value);
    setCurrentPage(1); // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    dispatch(fetchFiles({
      search: searchText,
      folder: selectedFolder,
      file_type: value,
      page: 1,
      page_size: pageSize
    }));
  };

  const handleTableChange = (page: number, newPageSize?: number) => {
    const effectivePageSize = newPageSize || pageSize;
    setCurrentPage(page);
    if (newPageSize) {
      setPageSize(newPageSize);
    }
    dispatch(fetchFiles({
      search: searchText,
      folder: selectedFolder,
      file_type: selectedFileType,
      page: page,
      page_size: effectivePageSize
    }));
  };

  const handleSync = async (fullSync: boolean = false) => {
    try {
      const timestamp = new Date().toLocaleTimeString();
      setSyncLogs([
        `üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏... [${timestamp}]`,
        `üì° API Request: POST /api/v1/simpleprint/sync/trigger/`,
        `üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: full_sync=${fullSync}, force=${forceSync}`,
      ]);

      const result: any = await dispatch(triggerSync({ full_sync: fullSync, force: forceSync })).unwrap();

      setSyncLogs(prev => [
        ...prev,
        `‚úÖ API Response: ${JSON.stringify(result, null, 2)}`,
      ]);

      if (result.status === 'started' && result.task_id) {
        setSyncLogs(prev => [
          ...prev,
          `üìã –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${result.task_id}`,
          `‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...`,
          `üîÑ –ó–∞–ø—É—Å–∫ polling (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 2 —Å–µ–∫)...`,
        ]);
        setCurrentTaskId(result.task_id);
        startPolling(result.task_id);
      }
    } catch (error: any) {
      const timestamp = new Date().toLocaleTimeString();
      const errorDetails = error.response?.data || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

      setSyncLogs(prev => [
        ...prev,
        `‚ùå –û—à–∏–±–∫–∞ API [${timestamp}]`,
        `üìã –°—Ç–∞—Ç—É—Å: ${error.response?.status || 'N/A'}`,
        `üìù –î–µ—Ç–∞–ª–∏: ${JSON.stringify(errorDetails, null, 2)}`,
      ]);

      if (error.response?.status === 429 || error.message?.includes('429')) {
        const errorMsg = error.response?.data?.message || '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç.';
        message.warning(errorMsg, 5);
        setSyncLogs(prev => [
          ...prev,
          `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í–∫–ª—é—á–∏—Ç–µ "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è" —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è`,
        ]);
      } else {
        message.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }
  };

  const handleCancelSync = async () => {
    if (!currentTaskId) {
      message.warning('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return;
    }

    try {
      const timestamp = new Date().toLocaleTimeString();
      setSyncLogs(prev => [
        ...prev,
        `üõë –û—Ç–º–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏... [${timestamp}]`,
        `üì° API Request: POST /api/v1/simpleprint/sync/cancel/`,
        `üìù Body: { task_id: "${currentTaskId.substring(0, 8)}..." }`,
      ]);

      await dispatch(cancelSync(currentTaskId)).unwrap();

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
      if (pollingInterval) {
        clearInterval(pollingInterval);
        setPollingInterval(null);
      }

      setSyncLogs(prev => [
        ...prev,
        `‚úÖ –ó–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ [${timestamp}]`,
        `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ UI...`,
      ]);

      setCurrentTaskId(null);
      dispatch(setSyncing(false)); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ syncing
      message.success('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      loadData();
    } catch (error: any) {
      const timestamp = new Date().toLocaleTimeString();
      setSyncLogs(prev => [
        ...prev,
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã [${timestamp}]: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      ]);
      message.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: ${error.message}`);
    }
  };

  const startPolling = (taskId: string) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (pollingInterval) {
      clearInterval(pollingInterval);
    }

    let pollCount = 0;

    const interval = setInterval(async () => {
      try {
        pollCount++;
        const timestamp = new Date().toLocaleTimeString();

        // –ù–µ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—É—Å—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è

        const statusResult: any = await dispatch(checkSyncStatus(taskId)).unwrap();

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üìä Status Response:', JSON.stringify(statusResult, null, 2));

        // –ë–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        // —Ç.–∫. –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –Ω–∏–∂–µ

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        if (statusResult.progress) {
          const { total_files, synced_files, total_folders, synced_folders } = statusResult.progress;

          setSyncLogs(prev => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ (–ø–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞)
            const baseLog = prev.slice(0, 4);

            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è (total = 0)
            if (total_files === 0 && total_folders === 0) {
              return [
                ...baseLog,
                ``,
                `‚è≥ –§–ê–ó–ê 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SimplePrint API...`,
                `üì° SimplePrint –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 180 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É (3 req/sec)`,
                `‚è∞ –û–±—ã—á–Ω–æ —ç—Ç–∞ —Ñ–∞–∑–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 4-6 –º–∏–Ω—É—Ç –¥–ª—è 649 –ø–∞–ø–æ–∫`,
                ``,
                `üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞... Polling #${pollCount} –≤ ${timestamp}`,
                `‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${Math.floor(pollCount * 2 / 60)} –º–∏–Ω ${(pollCount * 2) % 60} —Å–µ–∫`,
              ];
            }

            // –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            const progress = total_files > 0 ? Math.round((synced_files / total_files) * 100) : 0;
            const progressBar = '‚ñà'.repeat(Math.floor(progress / 5)) + '‚ñë'.repeat(20 - Math.floor(progress / 5));

            return [
              ...baseLog,
              ``,
              `‚úÖ –§–ê–ó–ê 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö`,
              ``,
              `üìÅ –ü–∞–ø–∫–∏:  ${String(synced_folders).padStart(4)} / ${total_folders}`,
              `üìÑ –§–∞–π–ª—ã:  ${String(synced_files).padStart(4)} / ${total_files}`,
              ``,
              `[${progressBar}] ${progress}%`,
              ``,
              `üìä Polling #${pollCount} –≤ ${timestamp}`,
            ];
          });
        } else {
          // –ï—Å–ª–∏ progress –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
          setSyncLogs(prev => [
            ...prev.slice(0, 4),
            `‚ö†Ô∏è API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞`,
            `üîÑ Polling #${pollCount} [${timestamp}]`,
            `üìä API State: ${statusResult.state}, Ready: ${statusResult.ready}`,
          ]);
        }

        // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (statusResult.ready) {
          clearInterval(interval);
          setPollingInterval(null);
          setCurrentTaskId(null);
          dispatch(setSyncing(false)); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ syncing

          setSyncLogs(prev => [...prev, `üéâ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...`]);

          if (statusResult.sync_log) {
            const logs = [
              `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ [${timestamp}]`,
              `üìÅ –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: ${statusResult.sync_log.total_folders}`,
              `üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${statusResult.sync_log.total_files}`,
              `‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–ø–æ–∫: ${statusResult.sync_log.synced_folders}`,
              `‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${statusResult.sync_log.synced_files}`,
            ];

            if (statusResult.sync_log.deleted_files > 0) {
              logs.push(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${statusResult.sync_log.deleted_files}`);
            }

            const duration = statusResult.sync_log.duration;
            if (duration) {
              logs.push(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(duration)} —Å–µ–∫`);
            }

            logs.push(`üîÑ –í—Å–µ–≥–æ polling –∑–∞–ø—Ä–æ—Å–æ–≤: ${pollCount}`);

            setSyncLogs(logs);
            message.success('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

            setSyncLogs(prev => [...prev, `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ UI...`]);
            loadData();
          } else if (statusResult.error) {
            setSyncLogs(prev => [
              ...prev,
              `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${JSON.stringify(statusResult.error, null, 2)}`,
            ]);
            message.error('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π');
          }
        }
      } catch (error: any) {
        const timestamp = new Date().toLocaleTimeString();
        console.error('Polling error:', error);
        setSyncLogs(prev => [
          ...prev,
          `‚ö†Ô∏è –û—à–∏–±–∫–∞ polling [${timestamp}]: ${error.message}`,
        ]);
      }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

    setPollingInterval(interval);
  };

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (pollingInterval) {
        clearInterval(pollingInterval);
      }
    };
  }, [pollingInterval]);

  const handleRefresh = () => {
    loadData();
    message.success('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const formatSize = (bytes: number): string => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
  };

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º
  const getGroupedData = () => {
    if (!groupByFolder) {
      return files;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ folder_name
    const grouped: { [key: string]: SimplePrintFile[] } = {};
    files.forEach(file => {
      const folderKey = file.folder_name || '–ö–æ—Ä–µ–Ω—å';
      if (!grouped[folderKey]) {
        grouped[folderKey] = [];
      }
      grouped[folderKey].push(file);
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const result: any[] = [];
    Object.keys(grouped).sort().forEach((folderName, index) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
      result.push({
        id: `folder-${index}`,
        name: folderName,
        folder_name: null,
        ext: '-',
        size: 0,
        size_display: '-',
        created_at_sp: '',
        isFolder: true,
        children: grouped[folderName],
      });
    });

    return result;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—á–∞—Ç–∏
  const formatPrintTime = (seconds: number | null): string => {
    if (!seconds) return '‚Äî';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    if (hours > 0) {
      return `${hours}—á ${minutes}–º`;
    }
    return `${minutes}–º`;
  };

  // –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const columns: ColumnsType<any> = [
    {
      title: '–ê—Ä—Ç–∏–∫—É–ª',
      dataIndex: 'article',
      key: 'article',
      width: 200,
      ellipsis: true,
      render: (article: string | null, record: any) => {
        if (record.isFolder) return null;
        return article ? (
          <Tag color="purple" style={{ fontFamily: 'monospace', fontWeight: 600, fontSize: '13px' }}>
            {article}
          </Tag>
        ) : (
          <span style={{ color: '#8c8c8c' }}>‚Äî</span>
        );
      },
    },
    {
      title: '–ò–º—è —Ñ–∞–π–ª–∞',
      dataIndex: 'name',
      key: 'name',
      ellipsis: true,
      width: 350,
      render: (text: string, record: any) => {
        if (record.isFolder) {
          return (
            <Space>
              <FolderOutlined style={{ color: '#FFB800', fontSize: '16px' }} />
              <span style={{ fontWeight: 600, color: '#FFB800' }}>{text}</span>
            </Space>
          );
        }
        return (
          <Space>
            <FileOutlined style={{ color: '#06EAFC' }} />
            <span style={{ fontWeight: 500 }}>{text}</span>
          </Space>
        );
      },
    },
    {
      title: '–ö–æ–ª-–≤–æ',
      dataIndex: 'quantity',
      key: 'quantity',
      width: 100,
      align: 'center' as const,
      render: (quantity: number | null, record: any) => {
        if (record.isFolder) return null;
        if (!quantity) return <span style={{ color: '#8c8c8c' }}>‚Äî</span>;

        // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        let color = 'green';
        let displayText = '';

        if (quantity === 0.5) {
          // –ß–∞—Å—Ç–∏ –∏–∑–¥–µ–ª–∏—è (part1, part2...)
          color = 'orange';
          displayText = '¬Ω —à—Ç';
        } else if (quantity % 1 !== 0) {
          // –î—Ä–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (1.5, 2.5, 3.7...)
          color = 'cyan';
          displayText = `${quantity} —à—Ç`;
        } else {
          // –¶–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          color = 'green';
          displayText = `${quantity.toFixed(0)} —à—Ç`;
        }

        return (
          <Tag color={color} style={{ fontSize: '14px', fontWeight: 600 }}>
            {displayText}
          </Tag>
        );
      },
    },
    {
      title: '–í—Ä–µ–º—è –ø–µ—á–∞—Ç–∏',
      dataIndex: 'print_time',
      key: 'print_time',
      width: 130,
      align: 'center' as const,
      render: (printTime: number | null, record: any) => {
        if (record.isFolder) return null;
        return (
          <span style={{ fontFamily: 'monospace', color: printTime ? '#06EAFC' : '#8c8c8c' }}>
            {formatPrintTime(printTime)}
          </span>
        );
      },
    },
    {
      title: '–ü–∞–ø–∫–∞',
      dataIndex: 'folder_name',
      key: 'folder_name',
      width: 220,
      ellipsis: true,
      render: (text: string | null, record: any) => {
        if (record.isFolder) return null;
        return text ? (
          <Tag color="blue" icon={<FolderOutlined />}>
            {text}
          </Tag>
        ) : (
          <Tag color="default">–ö–æ—Ä–µ–Ω—å</Tag>
        );
      },
    },
    {
      title: '–í–µ—Å',
      dataIndex: 'weight',
      key: 'weight',
      width: 100,
      align: 'center' as const,
      render: (weight: number | null, record: any) => {
        if (record.isFolder) return null;
        return weight ? (
          <span style={{ fontFamily: 'monospace' }}>
            {weight.toFixed(1)} –≥
          </span>
        ) : (
          <span style={{ color: '#8c8c8c' }}>‚Äî</span>
        );
      },
    },
    {
      title: '–¶–≤–µ—Ç',
      dataIndex: 'material_color',
      key: 'material_color',
      width: 120,
      render: (color: string | null, record: any) => {
        if (record.isFolder) return null;
        return color ? (
          <Tag color="cyan" style={{ fontWeight: 500 }}>
            {color}
          </Tag>
        ) : (
          <span style={{ color: '#8c8c8c' }}>‚Äî</span>
        );
      },
    },
    {
      title: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ',
      dataIndex: 'ext',
      key: 'ext',
      width: 120,
      render: (text: string, record: any) => {
        if (record.isFolder) return null;
        return <Tag color="cyan">{text || '-'}</Tag>;
      },
    },
    {
      title: '–†–∞–∑–º–µ—Ä',
      dataIndex: 'size',
      key: 'size',
      width: 120,
      render: (size: number, record: any) => {
        if (record.isFolder) return null;
        return <span style={{ fontFamily: 'monospace' }}>{record.size_display}</span>;
      },
    },
    {
      title: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
      dataIndex: 'created_at_sp',
      key: 'created_at_sp',
      width: 180,
      render: (date: string, record: any) => {
        if (record.isFolder) return null;
        return moment(date).format('DD.MM.YYYY HH:mm');
      },
    },
  ];

  return (
    <div style={{ padding: '24px' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ marginBottom: '24px' }}>
        <h1 style={{
          fontSize: '32px',
          fontWeight: 'bold',
          color: '#06EAFC',
          textShadow: '0 0 10px rgba(6, 234, 252, 0.5)',
          marginBottom: '8px'
        }}>
          –î–∞–Ω–Ω—ã–µ SimplePrint
        </h1>
        <p style={{ color: '#888', fontSize: '16px' }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ –∏–∑ SimplePrint
        </p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Row gutter={16} style={{ marginBottom: '24px' }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤"
              value={fileStats?.total_files || 0}
              prefix={<FileOutlined />}
              valueStyle={{ color: '#06EAFC' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="–í—Å–µ–≥–æ –ø–∞–ø–æ–∫"
              value={syncStats?.total_folders || 0}
              prefix={<FolderOutlined />}
              valueStyle={{ color: '#FFB800' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä"
              value={fileStats ? formatSize(fileStats.total_size) : '0 B'}
              prefix={<CloudServerOutlined />}
              valueStyle={{ color: '#00FF88' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
              value={syncStats?.last_sync ? moment(syncStats.last_sync).fromNow() : '–ù–∏–∫–æ–≥–¥–∞'}
              prefix={<SyncOutlined />}
              valueStyle={{ fontSize: '16px' }}
            />
          </Card>
        </Col>
      </Row>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <Card style={{ marginBottom: '16px' }}>
        <Space direction="vertical" style={{ width: '100%' }} size="middle">
          <Space style={{ width: '100%', justifyContent: 'space-between' }}>
            <Space>
              <Search
                placeholder="–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤..."
                allowClear
                style={{ width: 300 }}
                onSearch={handleSearch}
                prefix={<SearchOutlined />}
              />
              <Select
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É"
                allowClear
                style={{ width: 200 }}
                onChange={handleFolderChange}
                value={selectedFolder}
              >
                {folders.map((folder) => (
                  <Option key={folder.id} value={folder.id}>
                    {folder.name}
                  </Option>
                ))}
              </Select>
              <Select
                placeholder="–¢–∏–ø —Ñ–∞–π–ª–∞"
                allowClear
                style={{ width: 150 }}
                onChange={handleFileTypeChange}
                value={selectedFileType}
              >
                <Option value="printable">Printable</Option>
                <Option value="model">Model</Option>
              </Select>
            </Space>
            <Space>
              <Button
                icon={<ReloadOutlined />}
                onClick={handleRefresh}
                loading={loading}
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
              <Button
                type="primary"
                icon={<SyncOutlined />}
                onClick={() => setSyncModalVisible(true)}
                loading={syncing}
                style={{
                  background: 'linear-gradient(135deg, #06EAFC 0%, #00B8D4 100%)',
                  border: 'none',
                }}
              >
                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
              </Button>
            </Space>
          </Space>
          <Checkbox
            checked={groupByFolder}
            onChange={(e) => setGroupByFolder(e.target.checked)}
          >
            <span style={{ fontWeight: 500 }}>
              <FolderOutlined style={{ marginRight: '8px', color: '#FFB800' }} />
              –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–∞–ø–∫–∞–º
            </span>
          </Checkbox>
        </Space>
      </Card>

      {/* –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞–π–ª–æ–≤ */}
      <Card>
        <Table
          columns={columns}
          dataSource={getGroupedData()}
          rowKey={(record) => record.isFolder ? record.id : `file-${record.id}`}
          loading={loading}
          pagination={groupByFolder ? false : {
            current: currentPage,
            pageSize: pageSize,
            total: totalFiles,
            showSizeChanger: true,
            pageSizeOptions: ['20', '50', '100', '200'],
            showTotal: (total) => `–í—Å–µ–≥–æ ${total} —Ñ–∞–π–ª–æ–≤`,
            onChange: handleTableChange,
            onShowSizeChange: (current, size) => handleTableChange(current, size),
          }}
          expandable={groupByFolder ? {
            defaultExpandAllRows: false,
            indentSize: 30,
          } : undefined}
          scroll={{ x: 1200 }}
          size="middle"
        />
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
      <Modal
        title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å SimplePrint"
        open={syncModalVisible}
        closable={!syncing}
        maskClosable={!syncing}
        keyboard={!syncing}
        onCancel={() => {
          if (syncing && currentTaskId) {
            Modal.confirm({
              title: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
              content: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ?',
              okText: '–î–∞, –∑–∞–∫—Ä—ã—Ç—å',
              cancelText: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ',
              onOk: () => {
                setSyncModalVisible(false);
              },
            });
          } else {
            setSyncModalVisible(false);
          }
        }}
        width={700}
        footer={[
          <Button
            key="close"
            onClick={() => setSyncModalVisible(false)}
            disabled={syncing}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>,
          syncing && currentTaskId ? (
            <Button
              key="cancel"
              danger
              onClick={handleCancelSync}
              loading={false}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            </Button>
          ) : null,
          <Button
            key="sync"
            type="default"
            icon={<SyncOutlined />}
            onClick={() => handleSync(false)}
            loading={syncing}
            disabled={syncing}
          >
            –û–±—ã—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          </Button>,
          <Button
            key="fullSync"
            type="primary"
            icon={<SyncOutlined spin={syncing} />}
            onClick={() => handleSync(true)}
            loading={syncing}
            disabled={syncing}
            danger
          >
            –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          </Button>,
        ]}
      >
        <Space direction="vertical" style={{ width: '100%' }}>
          <p>
            <strong>–û–±—ã—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.
          </p>
          <p>
            <strong>–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ SimplePrint.
          </p>
          {syncStats?.last_sync && (
            <p style={{ color: '#888' }}>
              –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {moment(syncStats.last_sync).format('DD.MM.YYYY HH:mm')}
            </p>
          )}

          {/* –û–ø—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
          <Checkbox
            checked={forceSync}
            onChange={(e) => setForceSync(e.target.checked)}
            disabled={syncing}
          >
            <span style={{ color: '#888' }}>
              –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
            </span>
          </Checkbox>

          {/* –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
          {syncLogs.length > 0 && (
            <Card
              title="–õ–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
              size="small"
              style={{ marginTop: '16px' }}
              bodyStyle={{
                backgroundColor: '#1E1E1E',
                color: '#00FF88',
                fontFamily: 'monospace',
                fontSize: '13px',
                maxHeight: '300px',
                overflowY: 'auto',
                padding: '12px',
              }}
            >
              {syncLogs.map((log, index) => (
                <div key={index} style={{ marginBottom: '4px' }}>
                  {log}
                </div>
              ))}
              {syncing && (
                <div style={{ marginTop: '8px', color: '#06EAFC' }}>
                  <Spin size="small" style={{ marginRight: '8px' }} />
                  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...
                </div>
              )}
            </Card>
          )}
        </Space>
      </Modal>
    </div>
  );
};

export default SimplePrintPage;
