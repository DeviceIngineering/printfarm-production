#!/bin/bash

# One-command setup –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è PrintFarm –Ω–∞ —á–∏—Å—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: curl -sSL https://raw.githubusercontent.com/DeviceIngineering/printfarm-production/test_v1/scripts/one-command-setup.sh | bash

set -e

echo "üöÄ PrintFarm Auto-Deploy One-Command Setup"
echo "==========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then
    print_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
    print_warning "–ü—Ä–∏–º–µ—Ä: curl -sSL https://raw.githubusercontent.com/DeviceIngineering/printfarm-production/test_v1/scripts/one-command-setup.sh | sudo bash"
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏–ª sudo
REAL_USER=${SUDO_USER:-$USER}
if [ "$REAL_USER" = "root" ]; then
    print_warning "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –æ—Ç root. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ sudo –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    REAL_USER="ubuntu"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
fi

print_status "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è SSH: $REAL_USER"
print_status "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É PrintFarm..."

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
apt update && apt upgrade -y

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
apt install -y curl wget git unzip htop nano ufw python3 python3-pip \
    software-properties-common apt-transport-https ca-certificates gnupg lsb-release

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
if ! command -v docker &> /dev/null; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    usermod -aG docker $REAL_USER
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
if ! command -v docker-compose &> /dev/null; then
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    print_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 9000/tcp  # Webhook port
ufw --force enable
print_success "–§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è printfarm
print_status "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è printfarm..."
if ! id "printfarm" &>/dev/null; then
    useradd -m -s /bin/bash printfarm
    usermod -aG docker printfarm
    print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å printfarm —Å–æ–∑–¥–∞–Ω"
else
    print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å printfarm —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
print_status "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p /opt/printfarm/{data/{postgres,redis,media,static},logs/{deploy,webhook},backups}
chown -R printfarm:printfarm /opt/printfarm

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
print_status "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è PrintFarm..."
cd /opt/printfarm

# GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤)
GITHUB_TOKEN="${GITHUB_TOKEN:-}"
if [ -n "$GITHUB_TOKEN" ]; then
    REPO_URL="https://DeviceEngineering:$GITHUB_TOKEN@github.com/DeviceEngineering/printfarm-production.git"
    print_status "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º GitHub"
else
    REPO_URL="https://github.com/DeviceEngineering/printfarm-production.git"
    print_status "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
fi

if [ -d ".git" ]; then
    print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    sudo -u printfarm git fetch origin
    sudo -u printfarm git reset --hard origin/test_v1
    sudo -u printfarm git clean -fd
else
    print_status "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    sudo -u printfarm git clone -b test_v1 "$REPO_URL" .
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ git –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è printfarm
    sudo -u printfarm git config user.name "PrintFarm Deploy"
    sudo -u printfarm git config user.email "deploy@printfarm.local"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã
chmod +x scripts/*.sh scripts/*.py
chown -R printfarm:printfarm /opt/printfarm

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
print_status "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
if [ ! -f ".env.prod" ]; then
    sudo -u printfarm cp .env.prod.example .env.prod
    print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª .env.prod!"
fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è webhook —Å–µ–∫—Ä–µ—Ç–∞
WEBHOOK_SECRET=$(openssl rand -hex 32)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook
cat > /opt/printfarm/webhook.env << EOF
WEBHOOK_SECRET=$WEBHOOK_SECRET
WEBHOOK_PORT=9000
PYTHONUNBUFFERED=1
EOF
chmod 600 /opt/printfarm/webhook.env
chown printfarm:printfarm /opt/printfarm/webhook.env

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è webhook
print_status "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤..."
cat > /etc/systemd/system/printfarm-webhook.service << EOF
[Unit]
Description=PrintFarm Webhook Service
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/printfarm
EnvironmentFile=/opt/printfarm/webhook.env
ExecStart=/usr/bin/python3 /opt/printfarm/scripts/webhook-deploy.py
Restart=always
RestartSec=10
StandardOutput=append:/opt/printfarm/logs/webhook/service.log
StandardError=append:/opt/printfarm/logs/webhook/service.log

# Security settings
NoNewPrivileges=yes
PrivateTmp=yes
ProtectHome=yes
ProtectSystem=strict
ReadWritePaths=/opt/printfarm

[Install]
WantedBy=multi-user.target
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
cat > /etc/systemd/system/printfarm.service << EOF
[Unit]
Description=PrintFarm Production System
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/opt/printfarm
ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml down
User=printfarm
Group=printfarm

[Install]
WantedBy=multi-user.target
EOF

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤..."
cat > /etc/logrotate.d/printfarm << EOF
/opt/printfarm/logs/webhook/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
    su printfarm printfarm
}

/opt/printfarm/logs/deploy/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    copytruncate
    su printfarm printfarm
}
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–ª—é—á–µ–π –¥–ª—è GitHub Actions
print_status "–°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–ª—é—á–µ–π –¥–ª—è GitHub Actions..."
sudo -u printfarm mkdir -p /home/printfarm/.ssh
if [ ! -f "/home/printfarm/.ssh/github_deploy_key" ]; then
    sudo -u printfarm ssh-keygen -t ed25519 -C "github-actions-deploy" -f /home/printfarm/.ssh/github_deploy_key -N ""
    sudo -u printfarm cat /home/printfarm/.ssh/github_deploy_key.pub >> /home/printfarm/.ssh/authorized_keys
    chmod 600 /home/printfarm/.ssh/authorized_keys
    chown printfarm:printfarm /home/printfarm/.ssh/authorized_keys
fi

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
print_status "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl daemon-reload
systemctl enable printfarm.service
systemctl enable printfarm-webhook.service
systemctl start printfarm-webhook.service

# –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook —Å–µ—Ä–≤–∏—Å–∞
sleep 3
if curl -f -s "http://localhost:9000/health" > /dev/null; then
    print_success "Webhook —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω"
else
    print_warning "Webhook —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(hostname -I | awk '{print $1}')

echo ""
echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "======================"
print_success "PrintFarm –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
echo "   sudo nano /opt/printfarm/.env.prod"
echo ""
echo "2. –î–æ–±–∞–≤—å—Ç–µ GitHub Secrets –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:"
echo "   DEPLOY_HOST: $SERVER_IP"
echo "   DEPLOY_USER: $REAL_USER"
echo "   DEPLOY_KEY: (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–∞ –Ω–∏–∂–µ)"
echo ""
echo "3. SSH –∫–ª—é—á –¥–ª—è GitHub Actions:"
print_warning "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ GitHub Secret DEPLOY_KEY:"
echo "---BEGIN PRIVATE KEY---"
cat /home/printfarm/.ssh/github_deploy_key
echo "---END PRIVATE KEY---"
echo ""
echo "4. Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ):"
echo "   URL: http://$SERVER_IP:9000/webhook"
echo "   Secret: $WEBHOOK_SECRET"
echo ""
echo "5. –ü–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π:"
echo "   cd /opt/printfarm && sudo -u printfarm ./scripts/deploy.sh"
echo ""
echo "üìä –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   sudo /opt/printfarm/scripts/monitor-deploy.sh health"
echo "   sudo /opt/printfarm/scripts/monitor-deploy.sh status"
echo "   sudo /opt/printfarm/scripts/monitor-deploy.sh logs"
echo ""
echo "üì± –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
echo "   sudo nano /opt/printfarm/webhook.env"
echo "   # –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID"
echo ""
print_success "–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è!"
echo "–°–¥–µ–ª–∞–π—Ç–µ push –≤ –≤–µ—Ç–∫—É test_v1 –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ GitHub Actions"