#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è PrintFarm Production System
# –ó–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è printfarm –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/printfarm

set -e

echo "=========================================="
echo "PrintFarm Production Deployment"
echo "=========================================="

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
REPO_URL="https://github.com/DeviceIngineering/printfarm-production.git"
REPO_BRANCH="test_v1"
APP_DIR="/opt/printfarm"
BACKUP_DIR="/opt/printfarm/backups"
DATE=$(date +%Y%m%d_%H%M%S)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [ "$USER" != "printfarm" ]; then
    echo "–û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è printfarm"
    echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo su - printfarm"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    echo "–û—à–∏–±–∫–∞: Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
mkdir -p $BACKUP_DIR

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup_database() {
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    if docker-compose -f docker-compose.prod.yml ps | grep -q postgres; then
        docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U printfarm_user printfarm_db > $BACKUP_DIR/db_backup_$DATE.sql
        echo "–ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $BACKUP_DIR/db_backup_$DATE.sql"
    else
        echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
deploy_code() {
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
    
    if [ -d ".git" ]; then
        echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        git fetch origin
        git reset --hard origin/$REPO_BRANCH
        git clean -fd
    else
        echo "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        if [ ! -z "$REPO_URL" ]; then
            git clone -b $REPO_BRANCH $REPO_URL .
            echo "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
        else
            echo "–û—à–∏–±–∫–∞: URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω"
            exit 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
prepare_environment() {
    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env.prod
    if [ ! -f ".env.prod" ]; then
        echo "–û—à–∏–±–∫–∞: –§–∞–π–ª .env.prod –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env.prod –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ production env —Ñ–∞–π–ª
    ln -sf .env.prod .env
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    chmod 600 .env.prod
    chmod +x scripts/*.sh
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
deploy_containers() {
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.prod.yml down || true
    
    echo "–°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose -f docker-compose.prod.yml build --no-cache
    
    echo "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.prod.yml up -d
    
    echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 10
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
run_migrations() {
    echo "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate --noinput
    
    echo "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤..."
    docker-compose -f docker-compose.prod.yml exec -T backend python manage.py collectstatic --noinput
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose -f docker-compose.prod.yml ps
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ backend:"
    docker-compose -f docker-compose.prod.yml logs --tail=20 backend
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
    sleep 10
    
    local checks=0
    local passed=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoint'–æ–≤
    if curl -f -s --max-time 10 http://localhost/health > /dev/null 2>&1; then
        echo "‚úì Nginx health check"
        ((passed++))
    else
        echo "‚úó Nginx health check failed"
    fi
    ((checks++))
    
    if curl -f -s --max-time 10 http://localhost:8000/health/ > /dev/null 2>&1; then
        echo "‚úì Backend health check"
        ((passed++))
    else
        echo "‚úó Backend health check failed"
        echo "Backend logs:"
        docker-compose -f docker-compose.prod.yml logs --tail=10 backend
    fi
    ((checks++))
    
    if curl -f -s --max-time 10 http://localhost/ > /dev/null 2>&1; then
        echo "‚úì Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
        ((passed++))
    else
        echo "‚úó Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    ((checks++))
    
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: $passed –∏–∑ $checks —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
    
    if [ $passed -eq $checks ]; then
        echo "üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        return 0
    else
        echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
        if [ -x "./scripts/diagnose.sh" ]; then
            ./scripts/diagnose.sh --auto
        fi
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
cleanup() {
    echo "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker image prune -f
    
    echo "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)..."
    find $BACKUP_DIR -name "*.sql" -mtime +7 -delete
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
main() {
    cd $APP_DIR
    
    echo "–ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ $(pwd)"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã)
    if [ -f "docker-compose.prod.yml" ] && docker-compose -f docker-compose.prod.yml ps | grep -q Up; then
        backup_database
    fi
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    deploy_code
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    prepare_environment
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    deploy_containers
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    run_migrations
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    check_health
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup
    
    echo "=========================================="
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo "=========================================="
    echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://$(hostname -I | awk '{print $1}')"
    echo "–õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f"
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker-compose.prod.yml down"
    echo "=========================================="
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-deploy}" in
    deploy)
        main
        ;;
    backup)
        cd $APP_DIR
        backup_database
        ;;
    restart)
        cd $APP_DIR
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f docker-compose.prod.yml restart
        check_health
        ;;
    logs)
        cd $APP_DIR
        docker-compose -f docker-compose.prod.yml logs -f
        ;;
    status)
        cd $APP_DIR
        check_health
        ;;
    cleanup)
        cd $APP_DIR
        cleanup
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {deploy|backup|restart|logs|status|cleanup}"
        echo "  deploy  - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  backup  - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        echo "  logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
        echo "  status  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        echo "  cleanup - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"
        exit 1
        ;;
esac