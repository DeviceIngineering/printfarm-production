#!/bin/bash

# –ü–æ–ª–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è PrintFarm Production System
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
APP_DIR="/opt/printfarm"
LOG_FILE="/tmp/printfarm_diagnosis.log"
ISSUES_FOUND=0
FIX_APPLIED=0

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "\n${CYAN}${BOLD}=========================================="
    echo -e "$1"
    echo -e "==========================================${NC}\n"
}

print_section() {
    echo -e "\n${BLUE}${BOLD}>>> $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
    ((ISSUES_FOUND++))
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
    ((ISSUES_FOUND++))
}

print_info() {
    echo -e "${CYAN}‚Ñπ${NC} $1"
}

print_fix() {
    echo -e "${GREEN}üîß${NC} –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: $1"
    ((FIX_APPLIED++))
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
run_command() {
    local cmd="$1"
    local description="$2"
    
    echo "=== $description ===" >> "$LOG_FILE"
    echo "Command: $cmd" >> "$LOG_FILE"
    echo "Time: $(date)" >> "$LOG_FILE"
    
    if eval "$cmd" >> "$LOG_FILE" 2>&1; then
        print_success "$description"
        return 0
    else
        print_error "$description - Failed"
        echo "Error: Command failed" >> "$LOG_FILE"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∑–∞–ø—É—Å–∫–∞
check_permissions() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if [ "$USER" != "root" ] && [ "$USER" != "printfarm" ]; then
        print_warning "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $USER. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è root –∏–ª–∏ printfarm"
        print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo ./scripts/diagnose.sh –∏–ª–∏ sudo su - printfarm"
    else
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $USER"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -d "$APP_DIR" ]; then
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $APP_DIR –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 1
    else
        print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if [ ! -w "$APP_DIR" ]; then
        print_warning "–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ $APP_DIR"
        if [ "$USER" = "root" ]; then
            print_fix "–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞..."
            chown -R printfarm:printfarm "$APP_DIR"
            chmod -R 755 "$APP_DIR"
        fi
    else
        print_success "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
check_system() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if command -v docker &> /dev/null; then
        print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version | cut -d' ' -f3)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã Docker
        if systemctl is-active --quiet docker; then
            print_success "Docker —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω"
        else
            print_error "Docker —Å–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
            if [ "$USER" = "root" ]; then
                print_fix "–ó–∞–ø—É—Å–∫–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å..."
                systemctl start docker
                systemctl enable docker
            fi
        fi
    else
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if command -v docker-compose &> /dev/null; then
        print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker-compose --version | cut -d' ' -f4)"
    else
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤:"
    for port in 80 443 5432 6379 8000 8080 9000 9001; do
        if netstat -tln 2>/dev/null | grep -q ":$port "; then
            local process=$(netstat -tlnp 2>/dev/null | grep ":$port " | awk '{print $7}' | head -1)
            print_info "–ü–æ—Ä—Ç $port: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ($process)"
        else
            print_info "–ü–æ—Ä—Ç $port: —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    local mem_total=$(free -h | awk '/^Mem:/{print $2}')
    local mem_free=$(free -h | awk '/^Mem:/{print $7}')
    local disk_free=$(df -h "$APP_DIR" | awk 'NR==2{print $4}')
    
    print_info "–ü–∞–º—è—Ç—å: $mem_free –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ $mem_total"
    print_info "–î–∏—Å–∫: $disk_free —Å–≤–æ–±–æ–¥–Ω–æ –≤ $APP_DIR"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_code() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    
    cd "$APP_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if [ -d ".git" ]; then
        print_success "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω"
        
        local branch=$(git branch --show-current 2>/dev/null || echo "unknown")
        local commit=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        print_info "–í–µ—Ç–∫–∞: $branch, –∫–æ–º–º–∏—Ç: $commit"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if run_command "git fetch origin" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ GitHub"; then
            local behind=$(git rev-list --count HEAD..origin/test_v1 2>/dev/null || echo "0")
            if [ "$behind" -gt 0 ]; then
                print_warning "–ö–æ–¥ –æ—Ç—Å—Ç–∞–µ—Ç –Ω–∞ $behind –∫–æ–º–º–∏—Ç–æ–≤"
                if [ "$USER" = "root" ] || [ "$USER" = "printfarm" ]; then
                    print_fix "–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥..."
                    if [ "$USER" = "root" ]; then
                        sudo -u printfarm git reset --hard origin/test_v1
                    else
                        git reset --hard origin/test_v1
                    fi
                fi
            else
                print_success "–ö–æ–¥ –∞–∫—Ç—É–∞–ª–µ–Ω"
            fi
        fi
    else
        print_error "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for file in docker-compose.prod.yml .env.prod; do
        if [ -f "$file" ]; then
            print_success "–§–∞–π–ª $file –Ω–∞–π–¥–µ–Ω"
        else
            print_error "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
            if [ "$file" = ".env.prod" ] && [ -f ".env.prod.example" ]; then
                print_fix "–°–æ–∑–¥–∞–µ–º $file –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..."
                cp .env.prod.example .env.prod
                print_warning "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env.prod"
            fi
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.prod
    if [ -f ".env.prod" ]; then
        print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env.prod:"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        local critical_vars=("SECRET_KEY" "POSTGRES_PASSWORD" "MOYSKLAD_TOKEN")
        for var in "${critical_vars[@]}"; do
            if grep -q "^${var}=" .env.prod && ! grep -q "^${var}=.*default" .env.prod; then
                print_success "$var –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            else
                print_warning "$var –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            fi
        done
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ALLOWED_HOSTS
        local server_ip=$(hostname -I | awk '{print $1}')
        if grep -q "$server_ip" .env.prod; then
            print_success "IP —Å–µ—Ä–≤–µ—Ä–∞ ($server_ip) –¥–æ–±–∞–≤–ª–µ–Ω –≤ ALLOWED_HOSTS"
        else
            print_warning "IP —Å–µ—Ä–≤–µ—Ä–∞ ($server_ip) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ALLOWED_HOSTS"
            if [ "$USER" = "root" ] || [ "$USER" = "printfarm" ]; then
                print_fix "–î–æ–±–∞–≤–ª—è–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞ –≤ ALLOWED_HOSTS..."
                sed -i "s/ALLOWED_HOSTS=.*/ALLOWED_HOSTS=localhost,127.0.0.1,$server_ip/" .env.prod
            fi
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    cd "$APP_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose —Ñ–∞–π–ª–∞
    if run_command "docker-compose -f docker-compose.prod.yml config" "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; then
        print_success "Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    else
        print_error "–û—à–∏–±–∫–∞ –≤ docker-compose.prod.yml"
        return 1
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local container_status
    if [ "$USER" = "root" ]; then
        container_status=$(sudo -u printfarm docker-compose -f docker-compose.prod.yml ps 2>/dev/null || echo "")
    else
        container_status=$(docker-compose -f docker-compose.prod.yml ps 2>/dev/null || echo "")
    fi
    
    if [ -n "$container_status" ]; then
        print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
        echo "$container_status"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        local services=("db" "redis" "backend" "frontend" "nginx")
        for service in "${services[@]}"; do
            if echo "$container_status" | grep -q "$service.*Up"; then
                print_success "–°–µ—Ä–≤–∏—Å $service: —Ä–∞–±–æ—Ç–∞–µ—Ç"
            elif echo "$container_status" | grep -q "$service.*unhealthy"; then
                print_warning "–°–µ—Ä–≤–∏—Å $service: –Ω–µ–∑–¥–æ—Ä–æ–≤"
            else
                print_error "–°–µ—Ä–≤–∏—Å $service: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            fi
        done
    else
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
check_connectivity() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    
    local server_ip=$(hostname -I | awk '{print $1}')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö endpoint'–æ–≤
    local endpoints=(
        "http://localhost:8080/health:Nginx health"
        "http://localhost:8080:Frontend"
        "http://localhost:8000/health/:Backend health (internal)"
        "http://localhost:9001/health:Webhook health"
    )
    
    for endpoint in "${endpoints[@]}"; do
        local url=$(echo "$endpoint" | cut -d':' -f1)
        local name=$(echo "$endpoint" | cut -d':' -f2-)
        
        if curl -f -s --max-time 5 "$url" > /dev/null 2>&1; then
            print_success "$name: –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            print_warning "$name: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if [ -n "$server_ip" ]; then
        print_info "–í–Ω–µ—à–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞: $server_ip"
        
        if curl -f -s --max-time 5 "http://$server_ip:8080/" > /dev/null 2>&1; then
            print_success "–í–µ–±-—Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ –ø–æ http://$server_ip:8080/"
        else
            print_warning "–í–µ–±-—Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ –ø–æ –ø–æ—Ä—Ç—É 8080"
            print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª: sudo ufw status"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂—É—Ä–Ω–∞–ª–æ–≤
check_logs() {
    print_section "–ê–Ω–∞–ª–∏–∑ –∂—É—Ä–Ω–∞–ª–æ–≤"
    
    cd "$APP_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂—É—Ä–Ω–∞–ª–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local services=("backend" "frontend" "nginx" "db" "redis")
    for service in "${services[@]}"; do
        print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ $service:"
        local logs
        if [ "$USER" = "root" ]; then
            logs=$(sudo -u printfarm docker-compose -f docker-compose.prod.yml logs --tail=10 "$service" 2>/dev/null | grep -i error || echo "–ù–µ—Ç –æ—à–∏–±–æ–∫")
        else
            logs=$(docker-compose -f docker-compose.prod.yml logs --tail=10 "$service" 2>/dev/null | grep -i error || echo "–ù–µ—Ç –æ—à–∏–±–æ–∫")
        fi
        echo "  $logs"
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤
    print_info "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ Docker:"
    local docker_errors=$(journalctl -u docker --since "1 hour ago" --no-pager | grep -i error | tail -5 || echo "–ù–µ—Ç –æ—à–∏–±–æ–∫")
    echo "  $docker_errors"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook —Å–ª—É–∂–±—ã
    if systemctl is-active --quiet printfarm-webhook.service; then
        print_success "Webhook —Å–ª—É–∂–±–∞ –∞–∫—Ç–∏–≤–Ω–∞"
        local webhook_errors=$(journalctl -u printfarm-webhook.service --since "1 hour ago" --no-pager | grep -i error | tail -3 || echo "–ù–µ—Ç –æ—à–∏–±–æ–∫")
        print_info "–û—à–∏–±–∫–∏ webhook: $webhook_errors"
    else
        print_warning "Webhook —Å–ª—É–∂–±–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    fi
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
auto_fix() {
    print_section "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    
    if [ "$ISSUES_FOUND" -eq 0 ]; then
        print_success "–ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        return 0
    fi
    
    print_info "–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $ISSUES_FOUND"
    print_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: $FIX_APPLIED"
    
    if [ "$USER" != "root" ] && [ "$USER" != "printfarm" ]; then
        print_warning "–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –∏–ª–∏ printfarm"
        return 1
    fi
    
    cd "$APP_DIR"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_fix "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    mkdir -p logs/{deploy,webhook} data/{postgres,redis,media,static} backups
    
    if [ "$USER" = "root" ]; then
        chown -R printfarm:printfarm logs data backups
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏ printfarm
        print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        if sudo -u printfarm docker-compose -f docker-compose.prod.yml down 2>/dev/null; then
            sleep 5
            sudo -u printfarm docker-compose -f docker-compose.prod.yml up -d
            sleep 10
        fi
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ webhook —Å–ª—É–∂–±—ã
        if systemctl list-unit-files | grep -q printfarm-webhook.service; then
            systemctl restart printfarm-webhook.service
        fi
    else
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –æ—Ç printfarm
        docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
        sleep 5
        docker-compose -f docker-compose.prod.yml up -d
        sleep 10
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    print_section "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
    
    local report_file="/tmp/printfarm_report_$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "PrintFarm Production System - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"
        echo "=================================================="
        echo "–î–∞—Ç–∞: $(date)"
        echo "–°–µ—Ä–≤–µ—Ä: $(hostname) ($(hostname -I | awk '{print $1}'))"
        echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $USER"
        echo ""
        
        echo "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
        echo "- –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $ISSUES_FOUND"
        echo "- –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: $FIX_APPLIED"
        echo ""
        
        echo "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        if [ "$USER" = "root" ]; then
            sudo -u printfarm docker-compose -f "$APP_DIR/docker-compose.prod.yml" ps 2>/dev/null || echo "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        else
            docker-compose -f "$APP_DIR/docker-compose.prod.yml" ps 2>/dev/null || echo "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        fi
        echo ""
        
        echo "–°–µ—Ç–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:"
        curl -f -s --max-time 5 "http://localhost:8080/" > /dev/null && echo "- Frontend: ‚úì" || echo "- Frontend: ‚úó"
        curl -f -s --max-time 5 "http://localhost:8000/health/" > /dev/null && echo "- Backend: ‚úì" || echo "- Backend: ‚úó"
        curl -f -s --max-time 5 "http://localhost:9001/health" > /dev/null && echo "- Webhook: ‚úì" || echo "- Webhook: ‚úó"
        echo ""
        
        echo "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
        if [ "$ISSUES_FOUND" -gt 0 ]; then
            echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏: $LOG_FILE"
            echo "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω .env.prod —Ñ–∞–π–ª"
            echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GitHub Actions –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        else
            echo "- –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            echo "- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        fi
        
    } > "$report_file"
    
    print_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    local server_ip=$(hostname -I | awk '{print $1}')
    print_info "–ö–ª—é—á–µ–≤—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "  üåê –í–µ–±-—Å–∞–π—Ç: http://$server_ip/"
    echo "  üîß API: http://$server_ip/api/v1/"
    echo "  ‚ö° Webhook: http://$server_ip:9000/health"
    echo "  üìä –û—Ç—á–µ—Ç: $report_file"
    echo "  üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏: $LOG_FILE"
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
interactive_menu() {
    if [ "${1:-}" = "--auto" ]; then
        return  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
    fi
    
    print_section "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
    print_info "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "  1) –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
    echo "  2) –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏–∑ GitHub"
    echo "  3) –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  4) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GitHub Actions"
    echo "  5) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    echo "  0) –í—ã—Ö–æ–¥"
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-5): " choice
    
    case $choice in
        1)
            print_info "–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
            cd "$APP_DIR"
            if [ "$USER" = "root" ]; then
                sudo -u printfarm docker-compose -f docker-compose.prod.yml down
                sudo -u printfarm docker system prune -f
                sleep 5
                sudo -u printfarm ./scripts/deploy.sh
                systemctl restart printfarm-webhook.service
            else
                docker-compose -f docker-compose.prod.yml down
                docker system prune -f
                sleep 5
                ./scripts/deploy.sh
            fi
            ;;
        2)
            print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
            cd "$APP_DIR"
            if [ "$USER" = "root" ]; then
                sudo -u printfarm git pull origin test_v1
                sudo -u printfarm ./scripts/deploy.sh
            else
                git pull origin test_v1
                ./scripts/deploy.sh
            fi
            ;;
        3)
            print_info "–õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
            cd "$APP_DIR"
            if [ "$USER" = "root" ]; then
                sudo -u printfarm docker-compose -f docker-compose.prod.yml logs -f
            else
                docker-compose -f docker-compose.prod.yml logs -f
            fi
            ;;
        4)
            print_info "GitHub Actions —Å—Ç–∞—Ç—É—Å:"
            echo "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ https://github.com/DeviceIngineering/printfarm-production/actions"
            ;;
        5)
            print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
            echo "1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather"
            echo "2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ chat_id"
            echo "3. –î–æ–±–∞–≤—å—Ç–µ –≤ /opt/printfarm/webhook.env:"
            echo "   TELEGRAM_BOT_TOKEN=your_token"
            echo "   TELEGRAM_CHAT_ID=your_chat_id"
            echo "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ webhook: sudo systemctl restart printfarm-webhook.service"
            ;;
        0|"")
            print_info "–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            ;;
        *)
            print_warning "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥ —Ñ–∞–π–ª–∞
    echo "PrintFarm Diagnostic Log - $(date)" > "$LOG_FILE"
    
    print_header "üè≠ PrintFarm Production System - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    print_info "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥: $LOG_FILE"
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    check_permissions
    check_system  
    check_code
    check_containers
    check_connectivity
    check_logs
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    auto_fix
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if [ "$FIX_APPLIED" -gt 0 ]; then
        print_header "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
        sleep 10
        check_containers
        check_connectivity
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    interactive_menu "$@"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    print_header "üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"
    if [ "$ISSUES_FOUND" -eq 0 ]; then
        print_success "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚ú®"
        echo -e "${GREEN}–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã PrintFarm —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.${NC}"
    else
        print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $ISSUES_FOUND"
        if [ "$FIX_APPLIED" -gt 0 ]; then
            print_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: $FIX_APPLIED"
            print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        fi
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏: $LOG_FILE${NC}"
    fi
    
    local server_ip=$(hostname -I | awk '{print $1}')
    echo -e "\n${CYAN}üåê –í–∞—à —Å–∞–π—Ç: ${BOLD}http://$server_ip:8080/${NC}"
    echo -e "${CYAN}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: AUTO-DEPLOY.md${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --help|-h)
        echo "PrintFarm Production System - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
        echo "  ./scripts/diagnose.sh [–æ–ø—Ü–∏–∏]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  --auto    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é)"
        echo "  --help    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        echo "–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."
        exit 0
        ;;
    --auto)
        main --auto
        ;;
    *)
        main "$@"
        ;;
esac