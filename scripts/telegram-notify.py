#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
"""

import json
import requests
import sys
import os
import argparse
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '')

def send_telegram_message(message, parse_mode='Markdown'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("Telegram bot token –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    data = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': parse_mode,
        'disable_web_page_preview': True
    }
    
    try:
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def get_deployment_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    status_file = '/opt/printfarm/logs/last_deployment.json'
    
    if not os.path.exists(status_file):
        return None
    
    try:
        with open(status_file, 'r') as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError):
        return None

def format_deployment_message(status_data, message_type='status'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
    if not status_data:
        return "‚ùì –°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    status = status_data.get('status', 'unknown')
    branch = status_data.get('branch', 'unknown')
    commit = status_data.get('commit', 'unknown')[:8]
    timestamp = status_data.get('timestamp', '')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    try:
        if timestamp:
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            time_str = dt.strftime('%d.%m.%Y %H:%M:%S')
        else:
            time_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    except:
        time_str = timestamp
    
    if status == 'success':
        icon = "‚úÖ"
        status_text = "–£—Å–ø–µ—à–Ω–æ"
    elif status == 'failed':
        icon = "‚ùå"
        status_text = "–û—à–∏–±–∫–∞"
    else:
        icon = "‚ö†Ô∏è"
        status_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    message = f"{icon} *PrintFarm –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ*\n\n"
    message += f"*–°—Ç–∞—Ç—É—Å:* {status_text}\n"
    message += f"*–í–µ—Ç–∫–∞:* `{branch}`\n"
    message += f"*–ö–æ–º–º–∏—Ç:* `{commit}`\n"
    message += f"*–í—Ä–µ–º—è:* {time_str}\n"
    
    if 'duration' in status_data:
        duration = status_data['duration']
        message += f"*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {duration:.1f} —Å–µ–∫\n"
    
    if status == 'failed' and 'error' in status_data:
        error = status_data['error'][:200]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        message += f"\n*–û—à–∏–±–∫–∞:*\n```\n{error}\n```"
    
    return message

def get_server_status():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook —Å–µ—Ä–≤–∏—Å
        webhook_status = os.system('systemctl is-active --quiet printfarm-webhook.service') == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        docker_status = "unknown"
        if os.path.exists('/opt/printfarm/docker-compose.prod.yml'):
            result = os.system('cd /opt/printfarm && docker-compose -f docker-compose.prod.yml ps | grep -q Up')
            docker_status = "running" if result == 0 else "stopped"
        
        return {
            'webhook': 'active' if webhook_status else 'inactive',
            'docker': docker_status
        }
    except:
        return {'webhook': 'unknown', 'docker': 'unknown'}

def format_status_message():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_status = get_server_status()
    deployment_status = get_deployment_status()
    
    message = "üìä *PrintFarm –°—Ç–∞—Ç—É—Å –°–µ—Ä–≤–µ—Ä–∞*\n\n"
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    webhook_icon = "‚úÖ" if server_status['webhook'] == 'active' else "‚ùå"
    message += f"{webhook_icon} *Webhook:* {server_status['webhook']}\n"
    
    docker_icon = "‚úÖ" if server_status['docker'] == 'running' else "‚ùå" if server_status['docker'] == 'stopped' else "‚ùì"
    message += f"{docker_icon} *Docker:* {server_status['docker']}\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    if deployment_status:
        status = deployment_status.get('status', 'unknown')
        timestamp = deployment_status.get('timestamp', '')
        
        try:
            if timestamp:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime('%d.%m.%Y %H:%M:%S')
            else:
                time_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        except:
            time_str = timestamp
        
        deploy_icon = "‚úÖ" if status == 'success' else "‚ùå" if status == 'failed' else "‚ùì"
        message += f"\n{deploy_icon} *–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π:* {status}\n"
        message += f"üìÖ *–í—Ä–µ–º—è:* {time_str}"
    else:
        message += "\n‚ùì *–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π:* –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç"
    
    return message

def main():
    parser = argparse.ArgumentParser(description='–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –≤ Telegram')
    parser.add_argument('action', choices=['deploy', 'status', 'test'], 
                       help='–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    parser.add_argument('--message', help='–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID")
        return 1
    
    if args.action == 'test':
        message = args.message if args.message else "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PrintFarm"
        if send_telegram_message(message):
            print("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return 0
        else:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return 1
    
    elif args.action == 'deploy':
        deployment_status = get_deployment_status()
        message = format_deployment_message(deployment_status)
        
        if send_telegram_message(message):
            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return 0
        else:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return 1
    
    elif args.action == 'status':
        message = format_status_message()
        
        if send_telegram_message(message):
            print("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return 0
        else:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return 1
    
    return 0

if __name__ == '__main__':
    sys.exit(main())