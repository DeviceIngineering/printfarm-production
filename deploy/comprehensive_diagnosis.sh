#!/bin/bash

# PrintFarm Production - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
# –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_debug() {
    echo -e "${PURPLE}üîç $1${NC}"
}

print_header() {
    echo -e "\n${CYAN}===========================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}===========================================${NC}\n"
}

print_section() {
    echo -e "\n${BLUE}--- $1 ---${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
test_url() {
    local url="$1"
    local description="$2"
    
    print_debug "–¢–µ—Å—Ç–∏—Ä—É–µ–º: $description"
    echo "URL: $url"
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if curl -f -s --max-time 10 "$url" > /dev/null 2>&1; then
        print_success "‚úì –î–û–°–¢–£–ü–ï–ù"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞
        echo "–û—Ç–≤–µ—Ç:"
        curl -s --max-time 10 "$url" 2>/dev/null | head -3 | sed 's/^/  /'
    else
        print_error "‚úó –ù–ï–î–û–°–¢–£–ü–ï–ù"
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        echo "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:"
        curl -v --max-time 10 "$url" 2>&1 | head -10 | sed 's/^/  /'
    fi
    echo
}

print_header "–ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PRINTFARM"

# ============================================
# 1. –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï
# ============================================
print_header "1. –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"

print_section "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
uname -a
cat /etc/os-release | head -5

print_section "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø—Ä–∞–≤–∞"
echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(whoami)"
echo "UID: $(id -u)"
echo "–ì—Ä—É–ø–ø—ã: $(groups)"

print_section "–í—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã"
date
timedatectl status 2>/dev/null | head -5 || echo "timedatectl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# ============================================
# 2. DOCKER –ò –ö–û–ù–¢–ï–ô–ù–ï–†–´
# ============================================
print_header "2. DOCKER –ò –ö–û–ù–¢–ï–ô–ù–ï–†–´"

print_section "–í–µ—Ä—Å–∏–∏ Docker"
docker --version 2>/dev/null || print_error "Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
docker-compose --version 2>/dev/null || print_error "Docker Compose –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

print_section "–°—Ç–∞—Ç—É—Å Docker —Å–µ—Ä–≤–∏—Å–∞"
systemctl is-active docker 2>/dev/null || echo "–°—Ç–∞—Ç—É—Å Docker –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

print_section "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ PrintFarm"
if docker-compose -f docker-compose.prod.yml ps 2>/dev/null; then
    print_success "Docker Compose —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å Docker Compose"
fi

print_section "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö"
for container in backend nginx db redis celery; do
    echo "=== $container ==="
    if docker-compose -f docker-compose.prod.yml ps $container 2>/dev/null | grep -q "Up"; then
        print_success "$container: –†–∞–±–æ—Ç–∞–µ—Ç"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç—ã
        docker-compose -f docker-compose.prod.yml ps $container | grep -E "(PORTS|tcp)" || echo "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç–∞—Ö"
    else
        print_warning "$container: –ü—Ä–æ–±–ª–µ–º—ã"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        docker-compose -f docker-compose.prod.yml ps $container 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    echo
done

print_section "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker"
docker stats --no-stream 2>/dev/null | head -10 || echo "Docker stats –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# ============================================
# 3. –°–ï–¢–ï–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
# ============================================
print_header "3. –°–ï–¢–ï–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê"

print_section "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–∞ —Ö–æ—Å—Ç–µ"
echo "TCP –ø–æ—Ä—Ç—ã:"
netstat -tlnp 2>/dev/null | grep -E ":(80|8000|8089|5432|6379)" || echo "–¶–µ–ª–µ–≤—ã–µ –ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

print_section "–ü—Ä–æ—Ü–µ—Å—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç—ã"
for port in 80 8000 8089; do
    echo "–ü–æ—Ä—Ç $port:"
    lsof -i :$port 2>/dev/null || echo "  –ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω –∏–ª–∏ lsof –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
done

print_section "Docker networks"
docker network ls 2>/dev/null || echo "Docker networks –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

print_section "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
for container in backend nginx; do
    if docker-compose -f docker-compose.prod.yml ps $container 2>/dev/null | grep -q "Up"; then
        container_id=$(docker-compose -f docker-compose.prod.yml ps -q $container 2>/dev/null)
        if [ -n "$container_id" ]; then
            ip=$(docker inspect $container_id 2>/dev/null | grep -E '"IPAddress".*[0-9]' | head -1 | cut -d'"' -f4)
            echo "$container: $ip"
        fi
    fi
done

# ============================================
# 4. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ï –§–ê–ô–õ–´
# ============================================
print_header "4. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ï –§–ê–ô–õ–´"

print_section "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env"
if [ -f ".env" ]; then
    echo "–§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ($(wc -l < .env) —Å—Ç—Ä–æ–∫):"
    grep -E "(ALLOWED_HOSTS|DEBUG|SECRET_KEY|POSTGRES|REDIS|MOYSKLAD)" .env 2>/dev/null | sed 's/^/  /' || echo "  –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
else
    print_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

print_section "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ nginx.conf"
if [ -f "nginx.conf" ]; then
    echo "–§–∞–π–ª nginx.conf —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ($(wc -l < nginx.conf) —Å—Ç—Ä–æ–∫):"
    echo "–ü–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫:"
    head -20 nginx.conf | sed 's/^/  /'
else
    print_error "–§–∞–π–ª nginx.conf –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

print_section "Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
if [ -f "docker-compose.prod.yml" ]; then
    echo "–ü–æ—Ä—Ç—ã –≤ docker-compose.prod.yml:"
    grep -A1 -B1 "ports:" docker-compose.prod.yml | sed 's/^/  /'
else
    print_error "–§–∞–π–ª docker-compose.prod.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

# ============================================
# 5. –õ–û–ì–ò –°–ï–†–í–ò–°–û–í
# ============================================
print_header "5. –õ–û–ì–ò –°–ï–†–í–ò–°–û–í"

for service in nginx backend celery; do
    print_section "–õ–æ–≥–∏ $service (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫)"
    if docker-compose -f docker-compose.prod.yml logs --tail=10 $service 2>/dev/null; then
        echo
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ $service"
    fi
done

# ============================================
# 6. DJANGO –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
# ============================================
print_header "6. DJANGO –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê"

print_section "Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
if docker-compose -f docker-compose.prod.yml ps backend 2>/dev/null | grep -q "Up"; then
    echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:"
    docker-compose -f docker-compose.prod.yml exec -T backend python -c "
import os
import sys
try:
    from django.conf import settings
    print('‚úì Django –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    print(f'  ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}')
    print(f'  DEBUG: {settings.DEBUG}')
    print(f'  SECRET_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bool(settings.SECRET_KEY)}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    from django.db import connection
    connection.ensure_connection()
    print('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print(f'  –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {len(settings.INSTALLED_APPS)}')
    
except Exception as e:
    print(f'‚úó –û—à–∏–±–∫–∞ Django: {e}')
    sys.exit(1)
" 2>/dev/null || print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
else
    print_error "Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# ============================================
# 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–ò
# ============================================
print_header "7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–ò"

# –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
print_section "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"
test_url "http://localhost:8089/health" "Health check –Ω–∞ –ø–æ—Ä—Ç—É 8089"
test_url "http://localhost:8089/api/v1/tochka/stats/" "API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8089"
test_url "http://localhost:8089/" "–ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8089"

test_url "http://localhost:80/api/v1/tochka/stats/" "API –Ω–∞ –ø–æ—Ä—Ç—É 80 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)"
test_url "http://localhost:8000/api/v1/tochka/stats/" "–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ backend –Ω–∞ –ø–æ—Ä—Ç—É 8000"

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ—Å—Ç—ã Docker
print_section "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ—Å—Ç—ã Docker"
if docker-compose -f docker-compose.prod.yml ps backend 2>/dev/null | grep -q "Up"; then
    echo "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ nginx ‚Üí backend –∏–∑–Ω—É—Ç—Ä–∏:"
    docker-compose -f docker-compose.prod.yml exec -T nginx sh -c "
        apk add --no-cache curl 2>/dev/null >/dev/null || true
        echo '–¢–µ—Å—Ç: nginx ‚Üí backend:8000'
        if curl -f -s --max-time 5 http://backend:8000/api/v1/tochka/stats/ >/dev/null 2>&1; then
            echo '‚úì nginx –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ backend'
        else
            echo '‚úó nginx –ù–ï –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ backend'
        fi
    " 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
fi

# –í–Ω–µ—à–Ω–∏–µ —Ç–µ—Å—Ç—ã
print_section "–í–Ω–µ—à–Ω–∏–µ —Ç–µ—Å—Ç—ã"
# –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP
LOCAL_IP=$(hostname -I | awk '{print $1}' 2>/dev/null || echo "192.168.1.98")
test_url "http://$LOCAL_IP:8089/api/v1/tochka/stats/" "–í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –ø–æ IP ($LOCAL_IP)"
test_url "http://kemomail3.keenetic.pro:8089/api/v1/tochka/stats/" "–í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –ø–æ –¥–æ–º–µ–Ω—É"

# ============================================
# 8. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–û–£–¢–ï–†–ê/–°–ï–¢–ò
# ============================================
print_header "8. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–¢–ò"

print_section "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"
ip addr show 2>/dev/null | grep -E "(inet |mtu)" | head -10 || ifconfig 2>/dev/null | grep -E "(inet|mtu)" | head -10 || echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

print_section "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"
ip route show 2>/dev/null | head -5 || route -n 2>/dev/null | head -5 || echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

print_section "DNS"
cat /etc/resolv.conf 2>/dev/null | head -5 || echo "DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

print_section "–¢–µ—Å—Ç DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
nslookup kemomail3.keenetic.pro 2>/dev/null | head -10 || dig kemomail3.keenetic.pro 2>/dev/null | head -10 || echo "DNS —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# ============================================
# 9. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ
# ============================================
print_header "9. –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"

print_section "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
problems=0

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
if ! docker-compose -f docker-compose.prod.yml ps 2>/dev/null | grep -q "Up.*nginx"; then
    print_error "–ü—Ä–æ–±–ª–µ–º–∞ 1: Nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "  –†–µ—à–µ–Ω–∏–µ: docker-compose -f docker-compose.prod.yml restart nginx"
    problems=$((problems + 1))
fi

if ! docker-compose -f docker-compose.prod.yml ps 2>/dev/null | grep -q "Up.*backend"; then
    print_error "–ü—Ä–æ–±–ª–µ–º–∞ 2: Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "  –†–µ—à–µ–Ω–∏–µ: docker-compose -f docker-compose.prod.yml restart backend"
    problems=$((problems + 1))
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
if ! netstat -tlnp 2>/dev/null | grep -q ":8089.*LISTEN"; then
    print_error "–ü—Ä–æ–±–ª–µ–º–∞ 3: –ü–æ—Ä—Ç 8089 –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è"
    echo "  –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å docker-compose.prod.yml –Ω–∞ –Ω–∞–ª–∏—á–∏–µ '8089:80' –≤ nginx"
    problems=$((problems + 1))
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ ! -f "nginx.conf" ]; then
    print_error "–ü—Ä–æ–±–ª–µ–º–∞ 4: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç nginx.conf"
    echo "  –†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å nginx.conf —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
    problems=$((problems + 1))
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ ALLOWED_HOSTS
if ! grep -q "ALLOWED_HOSTS=.*\*" .env 2>/dev/null; then
    print_error "–ü—Ä–æ–±–ª–µ–º–∞ 5: ALLOWED_HOSTS –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    echo "  –†–µ—à–µ–Ω–∏–µ: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ ALLOWED_HOSTS=* –≤ .env"
    problems=$((problems + 1))
fi

print_section "–°–≤–æ–¥–∫–∞"
if [ $problems -eq 0 ]; then
    print_success "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—ã–≥–ª—è–¥—è—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–º–∏"
    echo "–ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞:"
    echo "  - –ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ 8089 ‚Üí 192.168.1.98:8089"
    echo "  - –ü—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"
else
    print_warning "–ù–∞–π–¥–µ–Ω–æ $problems –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º (—Å–º. –≤—ã—à–µ)"
fi

print_section "–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
echo "# –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:"
echo "docker-compose -f docker-compose.prod.yml down && docker-compose -f docker-compose.prod.yml up -d"
echo
echo "# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:"
echo "curl http://localhost:8089/api/v1/tochka/stats/"
echo
echo "# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:"
echo "curl http://kemomail3.keenetic.pro:8089/api/v1/tochka/stats/"
echo
echo "# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
echo "docker-compose -f docker-compose.prod.yml logs nginx"
echo "docker-compose -f docker-compose.prod.yml logs backend"

print_header "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê"
print_info "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º"
print_success "–î–∞—Ç–∞: $(date)"