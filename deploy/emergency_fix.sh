#!/bin/bash

# PrintFarm Production - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Celery, Nginx –∏ API

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "\n${BLUE}===========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}===========================================${NC}\n"
}

print_header "–≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PRINTFARM"

# –®–∞–≥ 1: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
print_info "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose -f docker-compose.prod.yml down
docker-compose down 2>/dev/null || true
print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –®–∞–≥ 2: –û—á–∏—â–∞–µ–º –≤—Å–µ
print_info "üßπ –û—á–∏—â–∞–µ–º Docker..."
docker system prune -f
docker volume prune -f
print_success "Docker –æ—á–∏—â–µ–Ω"

# –®–∞–≥ 3: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª
print_info "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª..."
cat > .env << 'EOF'
# Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SECRET_KEY=django-insecure-production-key-please-change
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
POSTGRES_DB=printfarm
POSTGRES_USER=printfarm
POSTGRES_PASSWORD=1qaz2wsX
DATABASE_URL=postgresql://printfarm:1qaz2wsX@db:5432/printfarm

# Redis
REDIS_URL=redis://redis:6379/0

# –ú–æ–π–°–∫–ª–∞–¥ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–ø–æ–ª–Ω–∏—Ç–µ!)
MOYSKLAD_TOKEN=f9be4985f5e3488716c040ca52b8e04c7c0f9e0b
MOYSKLAD_DEFAULT_WAREHOUSE=241ed919-a631-11ee-0a80-07a9000bb947

# Celery
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# Django Settings Module
DJANGO_SETTINGS_MODULE=config.settings.production

# Email (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
EMAIL_HOST=mail@kemomail.ru
EOF

print_success ".env —Ñ–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"

# –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π docker-compose.prod.yml
print_info "üìù –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π docker-compose.prod.yml..."
cat > docker-compose.prod.yml << 'EOF'
version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-printfarm}
      - POSTGRES_USER=${POSTGRES_USER:-printfarm}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-1qaz2wsX}
    networks:
      - printfarm-network
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - printfarm-network
    ports:
      - "6379:6379"

  backend:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
    networks:
      - printfarm-network
    ports:
      - "8000:8000"

  celery:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    restart: unless-stopped
    command: celery -A config worker -l info --without-heartbeat --without-gossip --without-mingle
    volumes:
      - media_volume:/app/media
    depends_on:
      - db
      - redis
      - backend
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
    networks:
      - printfarm-network

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - printfarm-network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  printfarm-network:
    driver: bridge
EOF

print_success "docker-compose.prod.yml —Å–æ–∑–¥–∞–Ω"

# –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π nginx.conf
print_info "üåê –°–æ–∑–¥–∞–µ–º nginx.conf..."
cat > nginx.conf << 'EOF'
upstream backend {
    server backend:8000;
}

server {
    listen 80;
    server_name _;
    
    client_max_body_size 100M;
    
    # Static files
    location /static/ {
        alias /app/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Media files  
    location /media/ {
        alias /app/media/;
        expires 1y;
        add_header Cache-Control "public";
    }
    
    # API endpoints
    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }
    
    # Admin
    location /admin/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Frontend (–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API)
    location / {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF

print_success "nginx.conf —Å–æ–∑–¥–∞–Ω"

# –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile
if [[ ! -f "docker/django/Dockerfile" ]]; then
    print_info "üì¶ –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π Dockerfile..."
    mkdir -p docker/django
    cat > docker/django/Dockerfile << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN apt-get update && apt-get install -y \
    postgresql-client \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥
COPY backend/ .

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
RUN mkdir -p /app/static /app/media

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "Waiting for database..."' >> /app/start.sh && \
    echo 'while ! nc -z db 5432; do sleep 1; done' >> /app/start.sh && \
    echo 'echo "Database ready!"' >> /app/start.sh && \
    echo 'python manage.py migrate --noinput || true' >> /app/start.sh && \
    echo 'python manage.py collectstatic --noinput || true' >> /app/start.sh && \
    echo 'echo "Starting server..."' >> /app/start.sh && \
    echo 'exec "$@"' >> /app/start.sh && \
    chmod +x /app/start.sh

EXPOSE 8000

ENTRYPOINT ["/app/start.sh"]
CMD ["gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "2", "--timeout", "120"]
EOF
    print_success "Dockerfile —Å–æ–∑–¥–∞–Ω"
fi

# –®–∞–≥ 7: –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
print_header "–°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö"

print_info "üî® –°–æ–±–∏—Ä–∞–µ–º backend..."
docker-compose -f docker-compose.prod.yml build backend

print_info "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É..."

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis
print_info "üóÑÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis..."
docker-compose -f docker-compose.prod.yml up -d db redis
sleep 10

# –ó–∞–ø—É—Å–∫–∞–µ–º backend
print_info "‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º backend..."
docker-compose -f docker-compose.prod.yml up -d backend
sleep 20

# –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
print_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º backend..."
if curl -f -s http://localhost:8000/api/v1/tochka/stats/ > /dev/null 2>&1; then
    print_success "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    print_warning "Backend –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
    sleep 10
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º nginx
print_info "üåê –ó–∞–ø—É—Å–∫–∞–µ–º nginx..."
docker-compose -f docker-compose.prod.yml up -d nginx
sleep 5

# –ó–∞–ø—É—Å–∫–∞–µ–º celery (–µ—Å–ª–∏ backend —Ä–∞–±–æ—Ç–∞–µ—Ç)
print_info "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º celery..."
docker-compose -f docker-compose.prod.yml up -d celery
sleep 5

# –®–∞–≥ 8: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
print_header "–ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò"

print_info "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose -f docker-compose.prod.yml ps

print_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API..."
sleep 5

if curl -f -s http://localhost/api/v1/tochka/stats/ > /dev/null 2>&1; then
    print_success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Nginx!"
    echo "   URL: http://localhost/api/v1/tochka/stats/"
elif curl -f -s http://localhost:8000/api/v1/tochka/stats/ > /dev/null 2>&1; then
    print_success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é!"
    echo "   URL: http://localhost:8000/api/v1/tochka/stats/"
else
    print_warning "API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs backend"
fi

# –®–∞–≥ 9: –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print_header "–°–û–ó–î–ê–ù–ò–ï –°–£–ü–ï–†–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"

print_info "üë§ –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin/admin..."
docker-compose -f docker-compose.prod.yml exec -T backend python manage.py shell << 'EOF'
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@example.com', 'admin')
    print("‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin/admin —Å–æ–∑–¥–∞–Ω!")
else:
    print("‚ÑπÔ∏è –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
EOF

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print_header "–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"

print_success "üéâ PrintFarm –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
echo
print_info "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
echo "   API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:  http://localhost/api/v1/tochka/stats/"
echo "   –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:     http://localhost/admin/"
echo "   Backend –ø—Ä—è–º–æ:    http://localhost:8000/"
echo
print_info "üë§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:"
echo "   –õ–æ–≥–∏–Ω:    admin"
echo "   –ü–∞—Ä–æ–ª—å:   admin"
echo
print_info "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   –õ–æ–≥–∏:        docker-compose -f docker-compose.prod.yml logs"
echo "   –°—Ç–∞—Ç—É—Å:      docker-compose -f docker-compose.prod.yml ps"
echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:  docker-compose -f docker-compose.prod.yml restart"
echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:   docker-compose -f docker-compose.prod.yml down"
echo
print_warning "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
echo
print_success "–ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"