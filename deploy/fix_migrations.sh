#!/bin/bash

# PrintFarm Production - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
# –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "\n${BLUE}===========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}===========================================${NC}\n"
}

print_header "–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•"

# –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
print_info "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.prod.yml ps

# –®–∞–≥ 2: –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
print_info "‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
for i in {1..30}; do
    if docker-compose -f docker-compose.prod.yml exec -T db pg_isready -U printfarm -d printfarm > /dev/null 2>&1; then
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!"
        break
    fi
    echo "   –ü–æ–ø—ã—Ç–∫–∞ $i/30... –∂–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã"
    sleep 2
done

# –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Django
print_header "–ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ô"

print_info "üóÑÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ Django..."
docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate --run-syncdb || {
    print_warning "–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ..."
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ —á–∞—Å—Ç—è–º
    print_info "–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã..."
    docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate auth 
    docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate contenttypes
    docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate sessions
    docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate admin
    
    print_info "–ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏..."
    docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate
}

print_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"

# –®–∞–≥ 4: –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
print_info "üì¶ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã..."
docker-compose -f docker-compose.prod.yml exec -T backend python manage.py collectstatic --noinput

print_success "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã!"

# –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print_header "–°–û–ó–î–ê–ù–ò–ï –°–£–ü–ï–†–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"

print_info "üë§ –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin/admin..."
docker-compose -f docker-compose.prod.yml exec -T backend python manage.py shell << 'EOF'
from django.contrib.auth import get_user_model
from django.db import connection

try:
    User = get_user_model()
    if not User.objects.filter(username='admin').exists():
        user = User.objects.create_superuser('admin', 'admin@example.com', 'admin')
        print("‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin/admin —Å–æ–∑–¥–∞–Ω!")
        print(f"   ID: {user.id}")
        print(f"   Email: {user.email}")
        print(f"   Is staff: {user.is_staff}")
        print(f"   Is superuser: {user.is_superuser}")
    else:
        print("‚ÑπÔ∏è –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        user = User.objects.get(username='admin')
        print(f"   ID: {user.id}")
        print(f"   Email: {user.email}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    with connection.cursor() as cursor:
        cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema='public';")
        tables = cursor.fetchall()
        print("üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for table in tables:
            print(f"   - {table[0]}")
EOF

# –®–∞–≥ 6: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
print_info "‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
docker-compose -f docker-compose.prod.yml exec -T backend python manage.py shell << 'EOF'
try:
    # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    import subprocess
    result = subprocess.run(['python', 'manage.py', 'init_settings'], 
                          capture_output=True, text=True, timeout=30)
    if result.returncode == 0:
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        print("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ init_settings –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞")
except Exception as e:
    print(f"‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {e}")
EOF

# –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É API
print_header "–ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò"

print_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API..."
sleep 3

if curl -f -s http://localhost/api/v1/tochka/stats/ > /dev/null 2>&1; then
    print_success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    echo "   –¢–µ—Å—Ç–∏—Ä—É–µ–º API:"
    curl -s http://localhost/api/v1/tochka/stats/ | python3 -m json.tool 2>/dev/null | head -10 || echo "   API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    print_warning "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º backend..."
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ backend –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print_info "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ backend:"
    docker-compose -f docker-compose.prod.yml logs --tail=20 backend
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å backend –Ω–∞–ø—Ä—è–º—É—é
    if docker-compose -f docker-compose.prod.yml exec -T backend curl -f -s http://localhost:8000/api/v1/tochka/stats/ > /dev/null 2>&1; then
        print_warning "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ nginx –Ω–µ –º–æ–∂–µ—Ç –∫ –Ω–µ–º—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ nginx:"
        docker-compose -f docker-compose.prod.yml logs nginx
    else
        print_error "Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
fi

# –®–∞–≥ 8: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
print_header "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï"

print_info "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose -f docker-compose.prod.yml ps

print_info "üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:"
docker-compose -f docker-compose.prod.yml exec -T backend python manage.py shell << 'EOF'
from django.contrib.auth import get_user_model
from django.db import connection

try:
    User = get_user_model()
    total_users = User.objects.count()
    admin_users = User.objects.filter(is_superuser=True).count()
    
    print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print(f"   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    with connection.cursor() as cursor:
        cursor.execute("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public' AND table_name LIKE '%product%';")
        product_tables = cursor.fetchone()[0]
        print(f"   –¢–∞–±–ª–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤: {product_tables}")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
EOF

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print_header "–ú–ò–ì–†–ê–¶–ò–ò –ò –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–´!"

print_success "üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
echo
print_info "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
echo "   API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:  http://localhost/api/v1/tochka/stats/"
echo "   –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:     http://localhost/admin/"
echo
print_info "üë§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:"
echo "   –õ–æ–≥–∏–Ω:    admin"
echo "   –ü–∞—Ä–æ–ª—å:   admin"
echo
print_info "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã:"
echo "   –°—Ç–∞—Ç—É—Å:      docker-compose -f docker-compose.prod.yml ps"
echo "   –õ–æ–≥–∏:        docker-compose -f docker-compose.prod.yml logs [—Å–µ—Ä–≤–∏—Å]"
echo "   API —Ç–µ—Å—Ç:    curl http://localhost/api/v1/tochka/stats/"
echo
print_success "–ì–æ—Ç–æ–≤–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"