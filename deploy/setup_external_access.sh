#!/bin/bash

# PrintFarm Production - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ kemomail3.keenetic.pro:8089

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "\n${BLUE}===========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}===========================================${NC}\n"
}

print_header "–ù–ê–°–¢–†–û–ô–ö–ê –í–ù–ï–®–ù–ï–ì–û –î–û–°–¢–£–ü–ê"

EXTERNAL_DOMAIN="kemomail3.keenetic.pro"
EXTERNAL_PORT="8089"
INTERNAL_PORT="80"

print_info "üåê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑: ${EXTERNAL_DOMAIN}:${EXTERNAL_PORT}"

# –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ ALLOWED_HOSTS
print_info "üîß –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ..."

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é .env
cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

# –û–±–Ω–æ–≤–ª—è–µ–º ALLOWED_HOSTS
sed -i "s/ALLOWED_HOSTS=.*/ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,${EXTERNAL_DOMAIN}/" .env

print_success ".env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω"

# –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π nginx.conf –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
print_info "üåê –°–æ–∑–¥–∞–µ–º nginx.conf –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞..."

cat > nginx.conf << EOF
upstream backend {
    server backend:8000;
}

server {
    listen 80;
    server_name localhost ${EXTERNAL_DOMAIN};
    
    client_max_body_size 100M;
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    access_log /var/log/nginx/printfarm_access.log;
    error_log /var/log/nginx/printfarm_error.log;
    
    # Static files
    location /static/ {
        alias /app/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CORS –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏
        add_header Access-Control-Allow-Origin "*";
    }
    
    # Media files  
    location /media/ {
        alias /app/media/;
        expires 1y;
        add_header Cache-Control "public";
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CORS –¥–ª—è –º–µ–¥–∏–∞
        add_header Access-Control-Allow-Origin "*";
    }
    
    # API endpoints —Å CORS
    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        
        # CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        if (\$request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Admin –ø–∞–Ω–µ–ª—å
    location /admin/ {
        proxy_pass http://backend;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;
    }
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞ backend (–≤–∫–ª—é—á–∞—è React SPA)
    location / {
        proxy_pass http://backend;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;
    }
    
    # Healthcheck endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

print_success "nginx.conf –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞"

# –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ—Ä—Ç–∞
print_info "üê≥ –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –¥–ª—è –ø–æ—Ä—Ç–∞ ${EXTERNAL_PORT}..."

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
cp docker-compose.prod.yml docker-compose.prod.yml.backup.$(date +%Y%m%d_%H%M%S)

# –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π docker-compose —Å –≤–Ω–µ—à–Ω–∏–º –ø–æ—Ä—Ç–æ–º
cat > docker-compose.prod.yml << EOF
version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=\${POSTGRES_DB:-printfarm}
      - POSTGRES_USER=\${POSTGRES_USER:-printfarm}
      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD:-1qaz2wsX}
    networks:
      - printfarm-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - printfarm-network

  backend:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
    networks:
      - printfarm-network

  celery:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    restart: unless-stopped
    command: celery -A config worker -l info --without-heartbeat --without-gossip --without-mingle --concurrency=2
    volumes:
      - media_volume:/app/media
    depends_on:
      - db
      - redis
      - backend
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
    networks:
      - printfarm-network

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${EXTERNAL_PORT}:80"  # –í–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç ${EXTERNAL_PORT}
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - printfarm-network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  printfarm-network:
    driver: bridge
EOF

print_success "docker-compose.prod.yml –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ—Ä—Ç–∞ ${EXTERNAL_PORT}"

# –®–∞–≥ 4: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º nginx —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
print_header "–ü–ï–†–ï–ó–ê–ü–£–°–ö NGINX"

print_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º nginx —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π..."
docker-compose -f docker-compose.prod.yml restart nginx

sleep 5

print_info "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å nginx..."
docker-compose -f docker-compose.prod.yml logs --tail=10 nginx

# –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
print_header "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–ò"

print_info "üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø..."
if curl -f -s http://localhost:${EXTERNAL_PORT}/api/v1/tochka/stats/ > /dev/null 2>&1; then
    print_success "–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç ${EXTERNAL_PORT} —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    print_warning "–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç ${EXTERNAL_PORT} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

print_info "üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø..."
if curl -f -s -H "Host: ${EXTERNAL_DOMAIN}" http://localhost:${EXTERNAL_PORT}/api/v1/tochka/stats/ > /dev/null 2>&1; then
    print_success "–í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    print_warning "–í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞)"
fi

# –®–∞–≥ 6: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
print_header "–ù–ê–°–¢–†–û–ô–ö–ê –í–ù–ï–®–ù–ï–ì–û –î–û–°–¢–£–ü–ê –ó–ê–í–ï–†–®–ï–ù–ê!"

print_success "üéâ PrintFarm –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
echo
print_info "üåê –í–Ω–µ—à–Ω–∏–µ URL:"
echo "   API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:  http://${EXTERNAL_DOMAIN}:${EXTERNAL_PORT}/api/v1/tochka/stats/"
echo "   –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:     http://${EXTERNAL_DOMAIN}:${EXTERNAL_PORT}/admin/"
echo "   –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç:    http://${EXTERNAL_DOMAIN}:${EXTERNAL_PORT}/"
echo
print_info "üè† –õ–æ–∫–∞–ª—å–Ω—ã–µ URL (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):"
echo "   API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:  http://localhost:${EXTERNAL_PORT}/api/v1/tochka/stats/"
echo "   –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:     http://localhost:${EXTERNAL_PORT}/admin/"
echo
print_info "üë§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:"
echo "   –õ–æ–≥–∏–Ω:    admin"
echo "   –ü–∞—Ä–æ–ª—å:   admin"
echo
print_info "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–±—Ä–æ—Å–∞ –ø–æ—Ä—Ç–æ–≤:"
echo "   –†–æ—É—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø–æ—Ä—Ç ${EXTERNAL_PORT} –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
echo "   –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç: ${INTERNAL_PORT}"
echo "   –í–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç: ${EXTERNAL_PORT}"
echo
print_info "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:  netstat -tlnp | grep :${EXTERNAL_PORT}"
echo "   –õ–æ–≥–∏ nginx:       docker-compose -f docker-compose.prod.yml logs nginx"
echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:       docker-compose -f docker-compose.prod.yml restart nginx"
echo
print_warning "‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ ${EXTERNAL_PORT} ‚Üí ${INTERNAL_PORT}"
echo
print_success "–ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑–≤–Ω–µ! üöÄ"