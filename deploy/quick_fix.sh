#!/bin/bash

# PrintFarm Production - –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker —Å–±–æ—Ä–∫–∏
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–∫–∏ MOYSKLAD_TOKEN

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "\n${BLUE}===========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}===========================================${NC}\n"
}

print_header "–ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DOCKER –°–ë–û–†–ö–ò"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
if [[ ! -f "docker-compose.prod.yml" ]]; then
    print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ printfarm-production!"
    exit 1
fi

# –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
print_info "üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
git fetch origin main
git reset --hard origin/main
print_success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"

# –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
print_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

if [[ ! -f "docker/django/Dockerfile.prod" ]]; then
    print_error "–§–∞–π–ª docker/django/Dockerfile.prod –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    print_info "–°–æ–∑–¥–∞–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é..."
    
    mkdir -p docker/django
    cat > docker/django/Dockerfile.prod << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN apt-get update && apt-get install -y \
    postgresql-client \
    build-essential \
    libpq-dev \
    git \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥
COPY backend/ .

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
RUN mkdir -p /app/static /app/media

# –ù–ï —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É –Ω–∞ —ç—Ç–∞–ø–µ —Å–±–æ—Ä–∫–∏!

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN adduser --disabled-password --gecos '' appuser
RUN chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

# –°–æ–∑–¥–∞–µ–º entrypoint —Å–∫—Ä–∏–ø—Ç
COPY --chown=appuser:appuser docker/django/entrypoint.prod.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "4", "--timeout", "120"]
EOF
    print_success "Dockerfile.prod —Å–æ–∑–¥–∞–Ω"
fi

if [[ ! -f "docker/django/entrypoint.prod.sh" ]]; then
    print_info "–°–æ–∑–¥–∞–µ–º entrypoint.prod.sh..."
    
    cat > docker/django/entrypoint.prod.sh << 'EOF'
#!/bin/sh

set -e

echo "üöÄ Starting PrintFarm Production Django..."

# –ñ–¥–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ Waiting for PostgreSQL..."
while ! nc -z db 5432 2>/dev/null; do
  echo "   PostgreSQL is not ready yet... waiting..."
  sleep 2
done
echo "‚úÖ PostgreSQL is ready!"

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
echo "üóÑÔ∏è Applying database migrations..."
python manage.py migrate --noinput || true

# –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã)
echo "üì¶ Collecting static files..."
python manage.py collectstatic --noinput || true

echo "‚úÖ Django is ready!"

# –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
exec "$@"
EOF
    chmod +x docker/django/entrypoint.prod.sh
    print_success "entrypoint.prod.sh —Å–æ–∑–¥–∞–Ω"
fi

# –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π .env –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [[ ! -f ".env" ]]; then
    print_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π..."
    cat > .env << 'EOF'
# Django
SECRET_KEY=django-insecure-change-this-in-production
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1

# Database
POSTGRES_DB=printfarm_prod
POSTGRES_USER=printfarm_user
POSTGRES_PASSWORD=secure_password_change_this
DATABASE_URL=postgresql://printfarm_user:secure_password_change_this@db:5432/printfarm_prod

# Redis
REDIS_URL=redis://redis:6379/0

# –ú–æ–π–°–∫–ª–∞–¥ (–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏)
MOYSKLAD_TOKEN=
MOYSKLAD_DEFAULT_WAREHOUSE=

# Celery
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0
EOF
    print_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
    print_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!"
fi

# –®–∞–≥ 4: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º settings/base.py –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
print_info "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django..."
if grep -q "config('MOYSKLAD_TOKEN')" backend/config/settings/base.py; then
    print_info "–î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ base.py..."
    sed -i "s/config('MOYSKLAD_TOKEN')/config('MOYSKLAD_TOKEN', default='')/g" backend/config/settings/base.py
    sed -i "s/config('MOYSKLAD_DEFAULT_WAREHOUSE')/config('MOYSKLAD_DEFAULT_WAREHOUSE', default='')/g" backend/config/settings/base.py
    print_success "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
fi

# –®–∞–≥ 5: –û—á–∏—â–∞–µ–º Docker –∫—ç—à
print_info "üßπ –û—á–∏—â–∞–µ–º Docker –∫—ç—à..."
docker system prune -f
docker builder prune -f

# –®–∞–≥ 6: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
print_info "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose -f docker-compose.prod.yml down || true

# –®–∞–≥ 7: –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
print_header "–°–ë–û–†–ö–ê DOCKER –û–ë–†–ê–ó–û–í"
print_info "üî® –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-10 –º–∏–Ω—É—Ç)..."

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º backend –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
print_info "–°–æ–±–∏—Ä–∞–µ–º backend..."
docker-compose -f docker-compose.prod.yml build --no-cache backend

if [[ $? -eq 0 ]]; then
    print_success "Backend —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
else
    print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ backend!"
    print_info "–ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±..."
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π Dockerfile –±–µ–∑ collectstatic
    cat > docker/django/Dockerfile.prod.simple << 'EOF'
FROM python:3.11-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \
    postgresql-client \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY backend/ .
RUN mkdir -p /app/static /app/media

EXPOSE 8000
CMD ["gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8000"]
EOF
    
    # –ú–µ–Ω—è–µ–º Dockerfile –≤ docker-compose
    sed -i 's/Dockerfile.prod/Dockerfile.prod.simple/g' docker-compose.prod.yml
    
    # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    docker-compose -f docker-compose.prod.yml build --no-cache backend
fi

# –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
print_info "–°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
docker-compose -f docker-compose.prod.yml build

# –®–∞–≥ 8: –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
print_header "–ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"
print_info "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose -f docker-compose.prod.yml up -d

# –®–∞–≥ 9: –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
print_info "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# –®–∞–≥ 10: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
print_info "üóÑÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate --noinput || true

# –®–∞–≥ 11: –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É –≤—Ä—É—á–Ω—É—é
print_info "üì¶ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã..."
docker-compose -f docker-compose.prod.yml exec -T backend python manage.py collectstatic --noinput || true

# –®–∞–≥ 12: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
print_header "–ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò"
print_info "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose -f docker-compose.prod.yml ps

# –®–∞–≥ 13: –ü—Ä–æ–≤–µ—Ä—è–µ–º API
print_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API..."
sleep 5

if curl -f -s http://localhost:8000/api/v1/tochka/stats/ > /dev/null 2>&1; then
    print_success "API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ—Ä—Ç—É 8000!"
elif curl -f -s http://localhost/api/v1/tochka/stats/ > /dev/null 2>&1; then
    print_success "API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ Nginx!"
else
    print_warning "API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print_header "–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û"

print_success "Docker —Å–±–æ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!"
echo
print_info "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   –õ–æ–≥–∏ backend:    docker-compose -f docker-compose.prod.yml logs backend"
echo "   –õ–æ–≥–∏ –≤—Å–µ—Ö:       docker-compose -f docker-compose.prod.yml logs"
echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:      docker-compose -f docker-compose.prod.yml restart"
echo "   –°—Ç–∞—Ç—É—Å:          docker-compose -f docker-compose.prod.yml ps"
echo
print_info "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É:"
echo "   API:     http://localhost:8000/api/v1/tochka/stats/"
echo "   –°–∞–π—Ç:    http://localhost/"
echo
print_warning "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ú–æ–π–°–∫–ª–∞–¥!"
echo
print_success "–ì–æ—Ç–æ–≤–æ! üéâ"