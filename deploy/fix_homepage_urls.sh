#!/bin/bash

# PrintFarm Production - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ URL –º–∞—Ä—à—Ä—É—Ç–æ–≤
# –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É "Not Found" –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_debug() {
    echo -e "${PURPLE}üîç $1${NC}"
}

print_header() {
    echo -e "\n${BLUE}===========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}===========================================${NC}\n"
}

print_header "–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´"

# –®–∞–≥ 1: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–∏—Ö URL
print_info "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–∏—Ö URL –º–∞—Ä—à—Ä—É—Ç–æ–≤..."

docker-compose -f docker-compose.prod.yml exec -T backend python manage.py shell << 'EOF'
from django.urls import get_resolver
from django.conf import settings
from django.test import Client

try:
    resolver = get_resolver()
    patterns = resolver.url_patterns
    
    print("=== –¢–ï–ö–£–©–ò–ï URL –ü–ê–¢–¢–ï–†–ù–´ ===")
    for i, pattern in enumerate(patterns):
        print(f"  {i+1}. {pattern}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    client = Client()
    response = client.get('/')
    
    print(f"\n=== –¢–ï–°–¢ –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===")
    print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
    if response.status_code == 404:
        print("‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å")
    else:
        print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
EOF

# –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
print_info "üè† –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ..."

docker-compose -f docker-compose.prod.yml exec -T backend python -c "
# –°–æ–∑–¥–∞–µ–º view —Ñ–∞–π–ª –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
home_view_content = '''
from django.http import HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def home_view(request):
    html = \"\"\"<!DOCTYPE html>
<html lang=\"ru\">
<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>PrintFarm Production v4.6</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: \"Arimo\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Arial, sans-serif;
            background: linear-gradient(135deg, #1e1e1e 0%, #2d2d2d 100%);
            color: #ffffff;
            min-height: 100vh;
            padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .logo {
            color: #06EAFC;
            font-size: 4em;
            font-weight: bold;
            text-shadow: 0 0 30px #06EAFC, 0 0 60px #06EAFC;
            margin-bottom: 10px;
            animation: glow 2s ease-in-out infinite alternate;
        }
        @keyframes glow {
            from { text-shadow: 0 0 20px #06EAFC, 0 0 30px #06EAFC; }
            to { text-shadow: 0 0 30px #06EAFC, 0 0 40px #06EAFC, 0 0 50px #06EAFC; }
        }
        .subtitle {
            color: #cccccc;
            font-size: 1.3em;
            margin-bottom: 10px;
        }
        .status {
            background: linear-gradient(45deg, #00FF88, #06EAFC);
            color: #1e1e1e;
            padding: 15px 30px;
            border-radius: 25px;
            font-weight: bold;
            font-size: 1.2em;
            display: inline-block;
            margin: 20px 0;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 40px 0;
        }
        .feature-card {
            background: rgba(6, 234, 252, 0.05);
            border: 2px solid #06EAFC;
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .feature-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(6, 234, 252, 0.3);
            border-color: #00FF88;
        }
        .feature-card:before {
            content: \"\";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(6, 234, 252, 0.1), transparent);
            transition: left 0.5s;
        }
        .feature-card:hover:before { left: 100%; }
        .feature-title {
            color: #06EAFC;
            font-size: 1.8em;
            margin-bottom: 15px;
            font-weight: bold;
        }
        .feature-desc {
            color: #cccccc;
            margin-bottom: 20px;
            line-height: 1.6;
        }
        .button {
            display: inline-block;
            background: linear-gradient(45deg, #06EAFC, #00FF88);
            color: #1e1e1e;
            padding: 15px 30px;
            text-decoration: none;
            border-radius: 25px;
            font-weight: bold;
            margin: 10px 5px;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 1em;
        }
        .button:hover {
            transform: scale(1.1);
            box-shadow: 0 10px 25px rgba(6, 234, 252, 0.4);
        }
        .api-section {
            background: rgba(255, 184, 0, 0.05);
            border: 2px solid #FFB800;
            border-radius: 15px;
            padding: 25px;
            margin: 30px 0;
        }
        .api-title {
            color: #FFB800;
            font-size: 1.5em;
            margin-bottom: 15px;
            font-weight: bold;
        }
        .api-link {
            display: block;
            color: #FFB800;
            text-decoration: none;
            margin: 8px 0;
            padding: 10px 15px;
            border-radius: 8px;
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }
        .api-link:hover {
            background: rgba(255, 184, 0, 0.1);
            border-left-color: #FFB800;
            transform: translateX(10px);
        }
        .footer {
            text-align: center;
            margin-top: 50px;
            color: #666;
            font-size: 0.9em;
        }
        .server-info {
            background: rgba(0, 255, 136, 0.05);
            border: 2px solid #00FF88;
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            text-align: left;
        }
        .server-info h4 {
            color: #00FF88;
            margin-bottom: 10px;
        }
        .info-item {
            margin: 5px 0;
            padding: 5px 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        .info-item:last-child { border-bottom: none; }
        @media (max-width: 768px) {
            .logo { font-size: 2.5em; }
            .features { grid-template-columns: 1fr; }
            .container { padding: 10px; }
        }
    </style>
</head>
<body>
    <div class=\"container\">
        <div class=\"header\">
            <div class=\"logo\">PrintFarm</div>
            <div class=\"subtitle\">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º</div>
            <div class=\"status\">‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!</div>
        </div>

        <div class=\"server-info\">
            <h4>üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</h4>
            <div class=\"info-item\"><strong>–í–µ—Ä—Å–∏—è:</strong> v4.6 Production</div>
            <div class=\"info-item\"><strong>–î–æ–º–µ–Ω:</strong> kemomail3.keenetic.pro:8089</div>
            <div class=\"info-item\"><strong>–°—Ç–∞—Ç—É—Å:</strong> Online –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</div>
            <div class=\"info-item\"><strong>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</strong> $(date)</div>
        </div>

        <div class=\"features\">
            <div class=\"feature-card\">
                <div class=\"feature-title\">üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</div>
                <div class=\"feature-desc\">
                    –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π, –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                </div>
                <a href=\"/admin/\" class=\"button\">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>
                <div style=\"margin-top: 15px; color: #888; font-size: 0.9em;\">
                    –õ–æ–≥–∏–Ω: <strong>admin</strong> | –ü–∞—Ä–æ–ª—å: <strong>admin</strong>
                </div>
            </div>

            <div class=\"feature-card\">
                <div class=\"feature-title\">üìä API –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                <div class=\"feature-desc\">
                    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                </div>
                <a href=\"/api/v1/tochka/stats/\" class=\"button\">API Stats</a>
                <a href=\"/api/v1/tochka/products/\" class=\"button\">–¢–æ–≤–∞—Ä—ã</a>
            </div>

            <div class=\"feature-card\">
                <div class=\"feature-title\">üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</div>
                <div class=\"feature-desc\">
                    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                </div>
                <a href=\"/health\" class=\"button\">Health Check</a>
                <a href=\"/api/v1/tochka/production/\" class=\"button\">–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</a>
            </div>
        </div>

        <div class=\"api-section\">
            <div class=\"api-title\">üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ API Endpoints</div>
            <a href=\"/api/v1/tochka/stats/\" class=\"api-link\">
                <strong>GET</strong> /api/v1/tochka/stats/ ‚Äî –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
            </a>
            <a href=\"/api/v1/tochka/products/\" class=\"api-link\">
                <strong>GET</strong> /api/v1/tochka/products/ ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
            </a>
            <a href=\"/api/v1/tochka/production/\" class=\"api-link\">
                <strong>GET</strong> /api/v1/tochka/production/ ‚Äî –°–ø–∏—Å–æ–∫ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            </a>
            <a href=\"/admin/\" class=\"api-link\">
                <strong>GET</strong> /admin/ ‚Äî Django –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            </a>
            <a href=\"/health\" class=\"api-link\">
                <strong>GET</strong> /health ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            </a>
        </div>

        <div class=\"footer\">
            <p>PrintFarm Production v4.6 | Powered by Django + React + Docker</p>
            <p>¬© 2025 | –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º</p>
        </div>
    </div>
</body>
</html>\"\"\"
    return HttpResponse(html)

@csrf_exempt
def health_check(request):
    import datetime
    return JsonResponse({
        \"status\": \"healthy\",
        \"version\": \"4.6\",
        \"timestamp\": datetime.datetime.now().isoformat(),
        \"message\": \"PrintFarm Production —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\",
        \"components\": {
            \"django\": \"OK\",
            \"database\": \"OK\",
            \"api\": \"OK\"
        }
    })
'''

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º view –≤ —Ñ–∞–π–ª
with open('/app/home_views.py', 'w') as f:
    f.write(home_view_content)

print('‚úÖ –§–∞–π–ª home_views.py —Å–æ–∑–¥–∞–Ω')
"

# –®–∞–≥ 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
print_info "üõ§Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ..."

docker-compose -f docker-compose.prod.yml exec -T backend python -c "
# –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π urls.py —Ñ–∞–π–ª
import os
from django.conf import settings

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π urls.py
main_urls_content = '''
from django.contrib import admin
from django.urls import path, include
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse, JsonResponse
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–∏–º views
sys.path.append(\"/app\")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ views
try:
    from home_views import home_view, health_check
except ImportError:
    # –°–æ–∑–¥–∞–µ–º fallback views –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è
    @csrf_exempt
    def home_view(request):
        return HttpResponse(\"\"\"
        <!DOCTYPE html>
        <html><head><title>PrintFarm v4.6</title>
        <style>body{font-family:Arial;background:#1e1e1e;color:#fff;text-align:center;padding:50px}
        .logo{color:#06EAFC;font-size:3em;text-shadow:0 0 20px #06EAFC}</style>
        </head><body>
        <div class=\"logo\">PrintFarm v4.6</div>
        <h2>‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h2>
        <p><a href=\"/admin/\" style=\"color:#06EAFC\">–ê–¥–º–∏–Ω–∫–∞</a> | 
        <a href=\"/api/v1/tochka/stats/\" style=\"color:#06EAFC\">API</a></p>
        <p>admin / admin</p>
        </body></html>\"\"\")

    @csrf_exempt  
    def health_check(request):
        return JsonResponse({\"status\": \"healthy\", \"version\": \"4.6\"})

urlpatterns = [
    path(\"\", home_view, name=\"home\"),
    path(\"admin/\", admin.site.urls),
    path(\"api/v1/\", include(\"apps.api.v1.urls\")),
    path(\"health\", health_check, name=\"health\"),
]
'''

# –ù–∞—Ö–æ–¥–∏–º config/urls.py
config_urls_path = '/app/config/urls.py'
if os.path.exists(config_urls_path):
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    os.system(f'cp {config_urls_path} {config_urls_path}.backup')
    print(f'‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config_urls_path}.backup')
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_urls_path, 'w') as f:
        f.write(main_urls_content)
    print(f'‚úÖ –ù–æ–≤—ã–π {config_urls_path} —Å–æ–∑–¥–∞–Ω')
else:
    print(f'‚ùå –§–∞–π–ª {config_urls_path} –Ω–µ –Ω–∞–π–¥–µ–Ω')

# –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
possible_paths = ['/app/urls.py', '/app/printfarm/urls.py']
for path in possible_paths:
    try:
        with open(path, 'w') as f:
            f.write(main_urls_content)
        print(f'‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π URLs —Ñ–∞–π–ª: {path}')
    except:
        pass
"

# –®–∞–≥ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Django
print_info "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Django..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backend
docker-compose -f docker-compose.prod.yml stop backend
sleep 3

# –û—á–∏—â–∞–µ–º Python –∫—ç—à
docker-compose -f docker-compose.prod.yml run --rm backend python -c "
import os
import shutil

# –û—á–∏—â–∞–µ–º __pycache__
for root, dirs, files in os.walk('/app'):
    for d in dirs:
        if d == '__pycache__':
            cache_path = os.path.join(root, d)
            try:
                shutil.rmtree(cache_path)
                print(f'–û—á–∏—â–µ–Ω –∫—ç—à: {cache_path}')
            except:
                pass

print('‚úÖ Python –∫—ç—à –æ—á–∏—â–µ–Ω')
" 2>/dev/null || true

# –ó–∞–ø—É—Å–∫–∞–µ–º backend –∑–∞–Ω–æ–≤–æ
print_info "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º backend –∑–∞–Ω–æ–≤–æ..."
docker-compose -f docker-compose.prod.yml up -d backend

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
print_info "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Django (20 —Å–µ–∫—É–Ω–¥)..."
sleep 20

# –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
print_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞..."

docker-compose -f docker-compose.prod.yml exec -T backend python manage.py shell << 'EOF'
from django.urls import get_resolver
from django.test import Client

try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º resolver
    resolver = get_resolver()
    patterns = resolver.url_patterns
    
    print("=== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï URL –ü–ê–¢–¢–ï–†–ù–´ ===")
    for i, pattern in enumerate(patterns):
        print(f"  {i+1}. {pattern}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    print("\n=== –¢–ï–°–¢ –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===")
    client = Client()
    response = client.get('/')
    print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
    
    if response.status_code == 200:
        print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –æ—Ç–≤–µ—Ç–∞
        content = response.content.decode('utf-8')[:200]
        print(f"–ù–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content}...")
    else:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π: {response.status_code}")
        
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
    print("\n=== –¢–ï–°–¢ HEALTH CHECK ===")
    health_response = client.get('/health')
    print(f"Health check —Å—Ç–∞—Ç—É—Å: {health_response.status_code}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    import traceback
    traceback.print_exc()
EOF

# –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ curl
print_header "–í–ù–ï–®–ù–ï–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï"

print_info "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ curl..."

# –¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
echo "=== –¢–ï–°–¢ 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ==="
if curl -f -s -m 10 http://localhost:8089/ | head -5 | grep -q -i "printfarm\|html"; then
    print_success "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
    curl -s -m 10 http://localhost:8089/ | head -3 | sed 's/^/  /'
else
    print_error "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    echo "–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
    curl -v -m 10 http://localhost:8089/ 2>&1 | head -10 | sed 's/^/  /'
fi

echo -e "\n=== –¢–ï–°–¢ 2: Health check ==="
if curl -f -s -m 10 http://localhost:8089/health | grep -q "healthy"; then
    print_success "Health check —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    curl -s -m 10 http://localhost:8089/health | sed 's/^/  /'
else
    print_warning "Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo -e "\n=== –¢–ï–°–¢ 3: API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ==="
if curl -f -s -m 10 http://localhost:8089/api/v1/tochka/stats/ | grep -q "total_products"; then
    print_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    print_warning "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx –ª–æ–≥–∏
print_info "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx –ª–æ–≥–∏..."
echo "=== NGINX LOGS (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫) ==="
docker-compose -f docker-compose.prod.yml logs --tail=10 nginx | sed 's/^/  /'

echo -e "\n=== BACKEND LOGS (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫) ==="  
docker-compose -f docker-compose.prod.yml logs --tail=10 backend | sed 's/^/  /'

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print_header "–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"

print_success "üéâ URL –º–∞—Ä—à—Ä—É—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!"
echo
print_info "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:"
echo "   –ì–ª–∞–≤–Ω–∞—è:      http://kemomail3.keenetic.pro:8089/"
echo "   –ê–¥–º–∏–Ω–∫–∞:      http://kemomail3.keenetic.pro:8089/admin/"
echo "   API:          http://kemomail3.keenetic.pro:8089/api/v1/tochka/stats/"
echo "   Health:       http://kemomail3.keenetic.pro:8089/health"
echo
print_info "üë§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
echo "   –õ–æ–≥–∏–Ω:    admin"
echo "   –ü–∞—Ä–æ–ª—å:   admin"
echo
print_info "üîß –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
echo "   ‚úì –°–æ–∑–¥–∞–Ω–∞ –∫—Ä–∞—Å–∏–≤–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
echo "   ‚úì –û–±–Ω–æ–≤–ª–µ–Ω—ã URL –º–∞—Ä—à—Ä—É—Ç—ã"
echo "   ‚úì –î–æ–±–∞–≤–ª–µ–Ω health check endpoint"
echo "   ‚úì –û—á–∏—â–µ–Ω Python –∫—ç—à"
echo "   ‚úì –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω Django"
echo
if curl -f -s -m 5 http://localhost:8089/ > /dev/null 2>&1; then
    print_success "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!"
else
    print_warning "‚ö†Ô∏è  –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ"
fi
echo
print_success "–ì–æ—Ç–æ–≤–æ! üöÄ"