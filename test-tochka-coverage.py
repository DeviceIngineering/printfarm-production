#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¢–æ—á–∫–µ
–õ–æ–≥–∏–∫–∞: Excel —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ï–°–¢–¨ –≤ –¢–æ—á–∫–µ,
–Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –ú–æ–π–°–∫–ª–∞–¥ –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ –¢–æ—á–∫–µ
"""

import requests
import json
import pandas as pd

def test_tochka_coverage():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¢–æ—á–∫–µ")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥...")
    
    try:
        response = requests.get('http://localhost:8000/api/v1/tochka/production/')
        if response.ok:
            production_data = response.json()
            production_products = production_data.get('results', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(production_products)} —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É")
            
            if len(production_products) > 0:
                print("üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É:")
                for i, product in enumerate(production_products[:5]):
                    print(f"   {product['article']} - {product['name']} (–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É: {product['production_needed']} —à—Ç)")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Excel (—Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ï–°–¢–¨ –≤ –¢–æ—á–∫–µ)
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Excel (—Ç–æ–≤–∞—Ä—ã –¢–æ—á–∫–∏)...")
    
    # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (—Å–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –æ–Ω–∏ –µ—Å—Ç—å –≤ –¢–æ—á–∫–µ)
    # –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–≥–∏—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    excel_test_data = []
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–æ–Ω–∏ –ï–°–¢–¨ –≤ –¢–æ—á–∫–µ)
    for i, product in enumerate(production_products[:3]):
        excel_test_data.append({
            'article': product['article'],
            'orders': (i + 1) * 20,  # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
            'row_number': i + 1,
            'has_duplicates': False,
            'duplicate_rows': None
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ (–Ω–æ –µ—Å—Ç—å –≤ –¢–æ—á–∫–µ)
    excel_test_data.append({
        'article': 'TOCHKA-ONLY-001',
        'orders': 50,
        'row_number': 4,
        'has_duplicates': False,
        'duplicate_rows': None
    })
    
    print(f"üìã –¢–æ–≤–∞—Ä—ã –≤ Excel (–¢–æ—á–∫–∞): {len(excel_test_data)} —à—Ç")
    for item in excel_test_data:
        print(f"   {item['article']} -> {item['orders']} –∑–∞–∫–∞–∑–æ–≤")
    
    print(f"\n‚ùó –¢–æ–≤–∞—Ä—ã –ú–æ–π–°–∫–ª–∞–¥ –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ Excel (–¢–æ—á–∫–µ):")
    missing_in_tochka = []
    for product in production_products[3:8]:  # –ë–µ—Ä–µ–º —Ç–æ–≤–∞—Ä—ã 4-8 –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
        print(f"   {product['article']} - {product['name']}")
        missing_in_tochka.append(product['article'])
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–Ω–∞–ª–∏–∑–∞
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è...")
    
    try:
        merge_response = requests.post(
            'http://localhost:8000/api/v1/tochka/merge-with-products/',
            json={'excel_data': excel_test_data},
            headers={'Content-Type': 'application/json'}
        )
        
        if merge_response.ok:
            merge_data = merge_response.json()
            print(f"‚úÖ {merge_data['message']}")
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É: {merge_data['total_production_needed']}")
            print(f"   –ï—Å—Ç—å –≤ –¢–æ—á–∫–µ: {merge_data['products_in_tochka']}")
            print(f"   –ù–ï–¢ –≤ –¢–æ—á–∫–µ: {merge_data['products_not_in_tochka']} ‚ö†Ô∏è")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {merge_data['coverage_rate']}%")
            
            print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            # –°–Ω–∞—á–∞–ª–∞ —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ –¢–æ—á–∫–µ
            not_in_tochka = [item for item in merge_data['data'] if item['needs_registration']]
            if not_in_tochka:
                print("\n‚ùå –¢–û–í–ê–†–´ –ö–û–¢–û–†–´–• –ù–ï–¢ –í –¢–û–ß–ö–ï (—Ç—Ä–µ–±—É—é—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏):")
                for item in not_in_tochka[:10]:  # –ü–µ—Ä–≤—ã–µ 10
                    print(f"   {item['article']} - {item['product_name']}")
                    print(f"      ‚îî‚îÄ –ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É: {item['production_needed']} —à—Ç")
                    print(f"      ‚îî‚îÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {item['production_priority']}")
                    print()
            
            # –ü–æ—Ç–æ–º —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ï–°–¢–¨ –≤ –¢–æ—á–∫–µ
            in_tochka = [item for item in merge_data['data'] if item['is_in_tochka']]
            if in_tochka:
                print("\n‚úÖ –¢–û–í–ê–†–´ –ö–û–¢–û–†–´–ï –ï–°–¢–¨ –í –¢–û–ß–ö–ï:")
                for item in in_tochka[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                    print(f"   {item['article']} - {item['product_name']}")
                    print(f"      ‚îî‚îÄ –ó–∞–∫–∞–∑–æ–≤ –≤ –¢–æ—á–∫–µ: {item['orders_in_tochka']} —à—Ç")
                    print(f"      ‚îî‚îÄ –ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É: {item['production_needed']} —à—Ç")
                    print()
            
        else:
            error_data = merge_response.json()
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {error_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def create_test_excel_for_tochka():
    """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å–∏–º—É–ª–∏—Ä—É—é—â–∏–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –¢–æ—á–∫–∏"""
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¢–æ—á–∫–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        response = requests.get('http://localhost:8000/api/v1/tochka/production/')
        if response.ok:
            production_data = response.json()
            products = production_data.get('results', [])
            
            if len(products) >= 5:
                # –°–æ–∑–¥–∞–µ–º Excel —Å –ß–ê–°–¢–¨–Æ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –Ω–µ –≤—Å–µ –µ—Å—Ç—å –≤ –¢–æ—á–∫–µ)
                excel_data = []
                
                # –ë–µ—Ä–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä (50% –ø–æ–∫—Ä—ã—Ç–∏–µ)
                for i in range(0, min(10, len(products)), 2):
                    product = products[i]
                    excel_data.append({
                        '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞': product['article'],
                        '–ó–∞–∫–∞–∑–æ–≤, —à—Ç.': (i + 1) * 15
                    })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                if len(excel_data) > 0:
                    excel_data.append({
                        '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞': excel_data[0]['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞'],
                        '–ó–∞–∫–∞–∑–æ–≤, —à—Ç.': 30
                    })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
                df = pd.DataFrame(excel_data)
                filename = 'test-tochka-products.xlsx'
                df.to_excel(filename, index=False)
                
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}")
                print("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (—Ç–æ–≤–∞—Ä—ã –¢–æ—á–∫–∏):")
                for item in excel_data:
                    print(f"   {item['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞']} -> {item['–ó–∞–∫–∞–∑–æ–≤, —à—Ç.']} —à—Ç")
                
                print(f"\nüí° –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞:")
                print(f"   - {len(excel_data)-1} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ '–ï—Å—Ç—å –≤ –¢–æ—á–∫–µ'")
                print(f"   - –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ú–æ–π–°–∫–ª–∞–¥ –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ '–ù–ï–¢ –≤ –¢–æ—á–∫–µ'")
                print(f"   - –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ~50%")
                
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    test_tochka_coverage()
    create_test_excel_for_tochka()