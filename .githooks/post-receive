#!/bin/bash
# ============================================================
# Git post-receive hook для автоматического развертывания
# PrintFarm v4.1.8 - Test Environment
# ============================================================

set -e

# Конфигурация
DEPLOY_BRANCH="main"
DEPLOY_DIR="/opt/printfarm-test"
DOCKER_COMPOSE_FILE="docker-compose.test.yml"
LOG_FILE="/var/log/printfarm-deploy.log"

# Цвета для вывода
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Функция логирования
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a $LOG_FILE
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a $LOG_FILE
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a $LOG_FILE
}

# Читаем информацию о push
while read oldrev newrev ref; do
    BRANCH=$(git rev-parse --symbolic --abbrev-ref $ref)
    
    log_info "Received push to branch: $BRANCH"
    
    # Развертываем только если push в main branch
    if [ "$BRANCH" = "$DEPLOY_BRANCH" ]; then
        log_info "Deploying branch $BRANCH to test environment..."
        
        # Переходим в директорию развертывания
        cd $DEPLOY_DIR
        
        # Обновляем код
        log_info "Fetching latest changes..."
        git fetch origin
        git reset --hard origin/$DEPLOY_BRANCH
        
        # Получаем информацию о коммите
        COMMIT_HASH=$(git rev-parse HEAD)
        COMMIT_MSG=$(git log -1 --pretty=%B)
        COMMIT_AUTHOR=$(git log -1 --pretty=%an)
        
        log_info "Deploying commit: $COMMIT_HASH"
        log_info "Author: $COMMIT_AUTHOR"
        log_info "Message: $COMMIT_MSG"
        
        # Проверяем наличие изменений в ключевых файлах
        BACKEND_CHANGED=$(git diff HEAD~1 --name-only | grep -c "backend/" || true)
        FRONTEND_CHANGED=$(git diff HEAD~1 --name-only | grep -c "frontend/" || true)
        DOCKER_CHANGED=$(git diff HEAD~1 --name-only | grep -c "docker" || true)
        
        # Останавливаем существующие контейнеры
        log_info "Stopping existing containers..."
        docker-compose -f $DOCKER_COMPOSE_FILE down
        
        # Пересобираем образы если изменились Dockerfile
        if [ "$DOCKER_CHANGED" -gt 0 ]; then
            log_info "Docker configuration changed, rebuilding images..."
            docker-compose -f $DOCKER_COMPOSE_FILE build --no-cache
        else
            # Пересобираем только измененные сервисы
            if [ "$BACKEND_CHANGED" -gt 0 ]; then
                log_info "Backend changed, rebuilding backend image..."
                docker-compose -f $DOCKER_COMPOSE_FILE build printfarm-test-backend printfarm-test-celery printfarm-test-celery-beat
            fi
            
            if [ "$FRONTEND_CHANGED" -gt 0 ]; then
                log_info "Frontend changed, rebuilding frontend image..."
                docker-compose -f $DOCKER_COMPOSE_FILE build printfarm-test-frontend
            fi
        fi
        
        # Запускаем контейнеры
        log_info "Starting containers..."
        docker-compose -f $DOCKER_COMPOSE_FILE up -d
        
        # Ждем готовности сервисов
        log_info "Waiting for services to be ready..."
        sleep 10
        
        # Применяем миграции если изменились модели
        MODELS_CHANGED=$(git diff HEAD~1 --name-only | grep -c "models.py" || true)
        if [ "$MODELS_CHANGED" -gt 0 ]; then
            log_info "Models changed, applying migrations..."
            docker-compose -f $DOCKER_COMPOSE_FILE exec -T printfarm-test-backend python manage.py migrate --noinput
        fi
        
        # Собираем статику если изменился frontend
        if [ "$FRONTEND_CHANGED" -gt 0 ]; then
            log_info "Collecting static files..."
            docker-compose -f $DOCKER_COMPOSE_FILE exec -T printfarm-test-backend python manage.py collectstatic --noinput
        fi
        
        # Проверяем health check
        log_info "Checking service health..."
        for i in {1..30}; do
            if curl -f http://localhost:18000/api/v1/health/ >/dev/null 2>&1; then
                log_success "Health check passed!"
                break
            fi
            sleep 2
        done
        
        # Отправляем уведомление (можно интегрировать с Slack/Telegram)
        log_success "==================================================="
        log_success "Deployment completed successfully!"
        log_success "Commit: $COMMIT_HASH"
        log_success "Author: $COMMIT_AUTHOR"
        log_success "==================================================="
        
        # Очищаем старые Docker образы
        log_info "Cleaning up old Docker images..."
        docker image prune -f
        
    else
        log_warning "Push to branch $BRANCH ignored (not deploying)"
    fi
done