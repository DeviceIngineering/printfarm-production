#!/bin/bash

# PrintFarm Production System - Server Update Script v3.1
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ 3.1 –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "docker-compose.yml" ] || [ ! -d "backend" ]; then
    error "–ù–µ –Ω–∞–π–¥–µ–Ω docker-compose.yml –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backend"
    error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ PrintFarm"
    exit 1
fi

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PrintFarm Production System –¥–æ –≤–µ—Ä—Å–∏–∏ 3.1"

# Step 1: Create backup
log "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
BACKUP_DATE=$(date +%Y%m%d_%H%M%S)

# Backup database
if docker-compose ps db | grep -q "Up"; then
    log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    docker-compose exec -T db pg_dump -U printfarm_user printfarm_db > "backup_db_${BACKUP_DATE}.sql"
    log "‚úÖ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: backup_db_${BACKUP_DATE}.sql"
else
    warn "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø –ë–î"
fi

# Backup media files
if [ -d "backend/media" ]; then
    log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ media —Ñ–∞–π–ª–æ–≤..."
    tar -czf "media_backup_${BACKUP_DATE}.tar.gz" backend/media/
    log "‚úÖ –ë—ç–∫–∞–ø media —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω: media_backup_${BACKUP_DATE}.tar.gz"
fi

# Step 2: Stop services
log "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose down

# Step 3: Update code
log "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
git fetch --all --tags
git status

# Check if v3.1 tag exists
if git tag -l | grep -q "^v3.1$"; then
    log "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Å–∏—é v3.1..."
    git checkout v3.1
    log "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–µ—Ä—Å–∏—é v3.1"
else
    error "Tag v3.1 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
    info "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:"
    git tag -l
    exit 1
fi

# Show what changed
log "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
git log --oneline -5

# Step 4: Start database for migrations
log "üîÑ –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π..."
docker-compose up -d db redis

# Wait for database to be ready
log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 10

# Step 5: Apply migrations
log "üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."

# Check if monitoring migrations are needed
if docker-compose run --rm backend python manage.py showmigrations monitoring 2>/dev/null | grep -q "\[ \]"; then
    log "–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è monitoring app..."
    docker-compose run --rm backend python manage.py makemigrations monitoring
fi

log "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π..."
docker-compose run --rm backend python manage.py migrate

# Step 6: Collect static files
log "üìÅ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤..."
docker-compose run --rm backend python manage.py collectstatic --noinput

# Step 7: Build and start all services
log "üîß –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up --build -d

# Step 8: Wait for services to start
log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 15

# Step 9: Health checks
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."

# Check if containers are running
log "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose ps

# Test API endpoints
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints..."

# Test products endpoint
if curl -sf "http://localhost:8000/api/v1/products/" > /dev/null; then
    log "‚úÖ Products API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    error "‚ùå Products API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# Test warehouses endpoint  
if curl -sf "http://localhost:8000/api/v1/sync/warehouses/" > /dev/null; then
    log "‚úÖ Warehouses API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    error "‚ùå Warehouses API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# Test product groups endpoint
if curl -sf "http://localhost:8000/api/v1/sync/product-groups/" > /dev/null; then
    log "‚úÖ Product Groups API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    error "‚ùå Product Groups API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# Step 10: Test production algorithm  
log "üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞..."

cat << 'EOF' > /tmp/test_algorithm.py
import os
import sys
import django
from decimal import Decimal

# Setup Django
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.base')
django.setup()

from apps.products.models import Product

def test_algorithm():
    print("=== –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ ===")
    
    # Test case 1: Product with low sales (<=3)
    print("\n1. –¢–µ—Å—Ç —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏ (<=3):")
    test_product = Product(
        article='TEST-001',
        name='Test Product 1',
        current_stock=Decimal('8'),
        sales_last_2_months=Decimal('2')
    )
    test_product.update_calculated_fields()
    
    expected = Decimal('2')  # 10 - 8 = 2
    actual = test_product.production_needed
    status = "‚úÖ PASS" if actual == expected else f"‚ùå FAIL (expected {expected}, got {actual})"
    print(f"   –û—Å—Ç–∞—Ç–æ–∫: {test_product.current_stock}, –ü—Ä–æ–¥–∞–∂–∏: {test_product.sales_last_2_months}")
    print(f"   –ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É: {actual} {status}")
    
    # Test case 2: Product with medium-low stock and sales
    print("\n2. –¢–µ—Å—Ç —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏:")
    test_product2 = Product(
        article='TEST-002',
        name='Test Product 2', 
        current_stock=Decimal('2'),
        sales_last_2_months=Decimal('10')
    )
    test_product2.update_calculated_fields()
    
    expected2 = Decimal('8')  # 10 - 2 = 8
    actual2 = test_product2.production_needed
    status2 = "‚úÖ PASS" if actual2 == expected2 else f"‚ùå FAIL (expected {expected2}, got {actual2})"
    print(f"   –û—Å—Ç–∞—Ç–æ–∫: {test_product2.current_stock}, –ü—Ä–æ–¥–∞–∂–∏: {test_product2.sales_last_2_months}")
    print(f"   –ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É: {actual2} {status2}")
    
    print("\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")

if __name__ == "__main__":
    test_algorithm()
EOF

# Run algorithm test
if docker-compose exec -T backend python /tmp/test_algorithm.py; then
    log "‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    error "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
fi

# Step 11: Show logs
log "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker-compose logs --tail=20

# Step 12: Final status
log "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ 3.1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

info "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
info "   ‚Ä¢ –í–µ—Ä—Å–∏—è: v3.1"
info "   ‚Ä¢ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $(date)"
info "   ‚Ä¢ –ë—ç–∫–∞–ø –ë–î: backup_db_${BACKUP_DATE}.sql"
info "   ‚Ä¢ –ë—ç–∫–∞–ø media: media_backup_${BACKUP_DATE}.tar.gz"

info "üîß –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –≤–µ—Ä—Å–∏–∏ 3.1:"
info "   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏ (‚â§3)"
info "   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
info "   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ edge cases –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ"
info "   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"

warn "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:"
warn "   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"
warn "   ‚Ä¢ –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –≤ apps/api/v1/urls.py"
warn "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'docker-compose exec backend python manage.py setup_monitoring'"

log "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"

# Cleanup temp files
rm -f /tmp/test_algorithm.py

echo ""
log "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://your-server-ip"
log "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://your-server-ip/api/v1/"