#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è Excel –¥–∞–Ω–Ω—ã—Ö —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import pandas as pd

def test_merge_api():
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è Excel –¥–∞–Ω–Ω—ã—Ö —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        response = requests.get('http://localhost:8000/api/v1/tochka/products/')
        if response.ok:
            products_data = response.json()
            products = products_data.get('results', [])
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
            test_articles = [product['article'] for product in products[:5] if product.get('article')]
            print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã: {test_articles}")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ Excel –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ Excel –¥–∞–Ω–Ω—ã–µ...")
    
    excel_test_data = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ä—Ç–∏–∫—É–ª—ã
    for i, article in enumerate(test_articles):
        excel_test_data.append({
            'article': article,
            'orders': (i + 1) * 10,
            'row_number': i + 1,
            'has_duplicates': False,
            'duplicate_rows': None
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª
    excel_test_data.append({
        'article': 'TEST-999-FAKE',
        'orders': 50,
        'row_number': len(test_articles) + 1,
        'has_duplicates': False,
        'duplicate_rows': None
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ (—Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
    if test_articles:
        excel_test_data.append({
            'article': test_articles[0],
            'orders': 25,
            'row_number': len(test_articles) + 2,
            'has_duplicates': True,
            'duplicate_rows': [len(test_articles) + 2]
        })
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ –∏–º–µ—é—â—É—é –¥—É–±–ª–∏–∫–∞—Ç—ã
        excel_test_data[0]['has_duplicates'] = True
        excel_test_data[0]['duplicate_rows'] = [len(test_articles) + 2]
        excel_test_data[0]['orders'] = excel_test_data[0]['orders'] + 25  # 10 + 25 = 35
    
    print(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(excel_test_data)} –∑–∞–ø–∏—Å–µ–π Excel:")
    for item in excel_test_data:
        dup_info = f" (–¥—É–±–ª–∏–∫–∞—Ç: +{item['duplicate_rows']})" if item['has_duplicates'] else ""
        print(f"   {item['article']} -> {item['orders']} —à—Ç{dup_info}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
    
    try:
        merge_response = requests.post(
            'http://localhost:8000/api/v1/tochka/merge-with-products/',
            json={'excel_data': excel_test_data},
            headers={'Content-Type': 'application/json'}
        )
        
        if merge_response.ok:
            merge_data = merge_response.json()
            print(f"‚úÖ {merge_data['message']}")
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
            print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {merge_data['total_records']}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {merge_data['matched_products']}")
            print(f"   –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {merge_data['unmatched_products']}")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {merge_data['match_rate']}%")
            
            print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for item in merge_data['data']:
                match_status = "‚úÖ –ù–ê–ô–î–ï–ù" if item['product_matched'] else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
                product_name = item.get('product_name', 'N/A')
                stock = item.get('current_stock', 'N/A')
                production = item.get('production_needed', 'N/A')
                
                print(f"   {item['article']}: {item['orders']} –∑–∞–∫–∞–∑–æ–≤ | {match_status}")
                if item['product_matched']:
                    print(f"      ‚îî‚îÄ –¢–æ–≤–∞—Ä: {product_name}")
                    print(f"      ‚îî‚îÄ –û—Å—Ç–∞—Ç–æ–∫: {stock} —à—Ç, –ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É: {production} —à—Ç")
                print()
            
        else:
            error_data = merge_response.json()
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {error_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def create_test_excel_with_real_articles():
    """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏–∑ –±–∞–∑—ã"""
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã
        response = requests.get('http://localhost:8000/api/v1/tochka/products/')
        if response.ok:
            products_data = response.json()
            products = products_data.get('results', [])
            
            if len(products) >= 3:
                # –°–æ–∑–¥–∞–µ–º Excel —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
                excel_data = []
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                for i, product in enumerate(products[:3]):
                    excel_data.append({
                        '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞': product['article'],
                        '–ó–∞–∫–∞–∑–æ–≤, —à—Ç.': (i + 1) * 15
                    })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                excel_data.append({
                    '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞': products[0]['article'],
                    '–ó–∞–∫–∞–∑–æ–≤, —à—Ç.': 30
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª
                excel_data.append({
                    '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞': 'FAKE-ARTICLE-999',
                    '–ó–∞–∫–∞–∑–æ–≤, —à—Ç.': 100
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
                df = pd.DataFrame(excel_data)
                filename = 'test-merge-with-real-articles.xlsx'
                df.to_excel(filename, index=False)
                
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}")
                print("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
                for item in excel_data:
                    print(f"   {item['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞']} -> {item['–ó–∞–∫–∞–∑–æ–≤, —à—Ç.']} —à—Ç")
                
                print(f"\nüí° –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                print(f"   {products[0]['article']}: 15 + 30 = 45 —à—Ç (–Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ)")
                print(f"   {products[1]['article']}: 30 —à—Ç (–Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ)")
                print(f"   {products[2]['article']}: 45 —à—Ç (–Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ)")
                print(f"   FAKE-ARTICLE-999: 100 —à—Ç (–ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ)")
                
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    test_merge_api()
    create_test_excel_with_real_articles()