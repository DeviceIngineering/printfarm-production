#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–∞ –≤ –ë–î
"""
import os
import sys
import django
import json
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É Django
sys.path.append('/Users/dim11/Documents/myProjects/Factory_v3/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from apps.products.models import Product

def fix_color_data():
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ JSON —Å—Ç—Ä–æ–∫
    """
    print("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞...")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å —Ü–≤–µ—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    products_with_json_color = Product.objects.filter(
        color__icontains='{"meta":'
    ).exclude(color='')
    
    fixed_count = 0
    total_count = products_with_json_color.count()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º: {total_count}")
    
    for product in products_with_json_color:
        try:
            print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä {product.article}: {product.color[:50]}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            if product.color.startswith('{') and '"name"' in product.color:
                try:
                    color_data = json.loads(product.color)
                    if isinstance(color_data, dict) and 'name' in color_data:
                        new_color = color_data['name']
                        print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ü–≤–µ—Ç: {new_color}")
                        product.color = new_color
                        product.save()
                        fixed_count += 1
                        continue
                except json.JSONDecodeError:
                    pass
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            name_match = re.search(r'"name":\s*"([^"]+)"', product.color)
            if name_match:
                new_color = name_match.group(1)
                print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ü–≤–µ—Ç (regex): {new_color}")
                product.color = new_color
                product.save()
                fixed_count += 1
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–≤–µ—Ç, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ")
                product.color = ''
                product.save()
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {product.article}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
            product.color = ''
            product.save()
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {fixed_count} –∏–∑ {total_count}")
    return fixed_count, total_count

if __name__ == '__main__':
    fix_color_data()