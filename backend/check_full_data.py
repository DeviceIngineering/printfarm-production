#!/usr/bin/env python3
"""
Check full data statistics and examples.
"""
import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
django.setup()

from apps.products.models import Product
from decimal import Decimal

print("üìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –í –°–ò–°–¢–ï–ú–ï\n")

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total = Product.objects.count()
print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}")

# –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
fields_stats = {
    '–û—Å—Ç–∞—Ç–æ–∫ > 0': Product.objects.filter(current_stock__gt=0).count(),
    '–ü—Ä–æ–¥–∞–∂–∏ > 0': Product.objects.filter(sales_last_2_months__gt=0).count(),
    '–†–∞—Å—Ö–æ–¥/–¥–µ–Ω—å > 0': Product.objects.filter(average_daily_consumption__gt=0).count(),
    '–î–Ω–µ–π –æ—Å—Ç–∞—Ç–∫–∞': Product.objects.filter(days_of_stock__isnull=False).count(),
    '–¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': Product.objects.filter(production_needed__gt=0).count(),
}

print("\nüìà –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:")
for field, count in fields_stats.items():
    percentage = (count / total * 100) if total > 0 else 0
    print(f"  {field}: {count}/{total} ({percentage:.1f}%)")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
print("\nüì¶ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
for product_type, label in Product.PRODUCT_TYPE_CHOICES:
    count = Product.objects.filter(product_type=product_type).count()
    percentage = (count / total * 100) if total > 0 else 0
    print(f"  {label}: {count} ({percentage:.1f}%)")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
print("\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
priority_ranges = [
    (100, 100, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π (100)"),
    (80, 99, "–í—ã—Å–æ–∫–∏–π (80-99)"),
    (60, 79, "–°—Ä–µ–¥–Ω–∏–π (60-79)"),
    (40, 59, "–ù–∏–∑–∫–∏–π (40-59)"),
    (0, 39, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (0-39)"),
]

for min_p, max_p, label in priority_ranges:
    count = Product.objects.filter(production_priority__gte=min_p, production_priority__lte=max_p).count()
    percentage = (count / total * 100) if total > 0 else 0
    print(f"  {label}: {count} ({percentage:.1f}%)")

# –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
print("\nüìã –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")

print("\n1Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï (–æ—Å—Ç–∞—Ç–æ–∫ < 5, –µ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏):")
critical_products = Product.objects.filter(product_type='critical').order_by('-production_priority')[:3]
for p in critical_products:
    print(f"  ‚Ä¢ {p.article}: –æ—Å—Ç–∞—Ç–æ–∫={p.current_stock}, –ø—Ä–æ–¥–∞–∂–∏={p.sales_last_2_months}, "
          f"—Ä–∞—Å—Ö–æ–¥/–¥–µ–Ω—å={p.average_daily_consumption}, –¥–Ω–µ–π={p.days_of_stock}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç={p.production_priority}")

print("\n2Ô∏è‚É£ –ù–û–í–´–ï (–Ω–µ—Ç –ø—Ä–æ–¥–∞–∂ –∏–ª–∏ –º–∞–ª–æ –ø—Ä–æ–¥–∞–∂ –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤):")
new_products = Product.objects.filter(product_type='new').order_by('-production_needed')[:3]
for p in new_products:
    print(f"  ‚Ä¢ {p.article}: –æ—Å—Ç–∞—Ç–æ–∫={p.current_stock}, –ø—Ä–æ–¥–∞–∂–∏={p.sales_last_2_months}, "
          f"–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É={p.production_needed}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç={p.production_priority}")

print("\n3Ô∏è‚É£ –°–¢–ê–†–´–ï (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏):")
old_products = Product.objects.filter(product_type='old', sales_last_2_months__gt=0).order_by('-sales_last_2_months')[:3]
for p in old_products:
    print(f"  ‚Ä¢ {p.article}: –æ—Å—Ç–∞—Ç–æ–∫={p.current_stock}, –ø—Ä–æ–¥–∞–∂–∏={p.sales_last_2_months}, "
          f"—Ä–∞—Å—Ö–æ–¥/–¥–µ–Ω—å={p.average_daily_consumption}, –¥–Ω–µ–π={p.days_of_stock}")

# –¢–æ–≤–∞—Ä—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
print("\n‚ö° –¢–û–í–ê–†–´ –¢–†–ï–ë–£–Æ–©–ò–ï –°–†–û–ß–ù–û–ì–û –ü–†–û–ò–ó–í–û–î–°–¢–í–ê:")
urgent_products = Product.objects.filter(production_needed__gt=0).order_by('-production_priority', '-production_needed')[:5]
for p in urgent_products:
    print(f"  ‚Ä¢ {p.article} [{p.product_type}]: –æ—Å—Ç–∞—Ç–æ–∫={p.current_stock}, "
          f"–Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏={p.production_needed}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç={p.production_priority}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –†–ê–°–ß–ï–¢–û–í:")
sample_product = Product.objects.filter(sales_last_2_months__gt=0, current_stock__gt=0).first()
if sample_product:
    print(f"–ü—Ä–∏–º–µ—Ä: {sample_product.article}")
    print(f"  –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ 2 –º–µ—Å: {sample_product.sales_last_2_months}")
    print(f"  –†–∞—Å—Ö–æ–¥/–¥–µ–Ω—å: {sample_product.average_daily_consumption}")
    print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞: {sample_product.sales_last_2_months} / 60 = {sample_product.sales_last_2_months / 60}")
    print(f"  –û—Å—Ç–∞—Ç–æ–∫: {sample_product.current_stock}")
    print(f"  –î–Ω–µ–π –æ—Å—Ç–∞—Ç–∫–∞: {sample_product.days_of_stock}")
    if sample_product.average_daily_consumption > 0:
        calculated_days = sample_product.current_stock / sample_product.average_daily_consumption
        print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞: {sample_product.current_stock} / {sample_product.average_daily_consumption} = {calculated_days}")

print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")