"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ HOTFIX: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–æ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
"""
import requests
import json
from decimal import Decimal

def test_critical_reserve_inclusion():
    """
    –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–µ—Ä–≤–æ–º –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    """
    print("üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –¢–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–µ—Ä–≤–æ–º –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    response = requests.get("http://localhost:8000/api/v1/tochka/production/")
    assert response.status_code == 200, f"API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}"
    
    data = response.json()
    products = data['results']
    
    # 2. –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–µ—Ä–≤–æ–º
    products_with_reserve = [p for p in products if float(p['reserved_stock']) > 0]
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–æ–º: {len(products_with_reserve)}")
    
    # 3. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 5 —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–æ–º
    assert len(products_with_reserve) >= 5, f"–û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(products_with_reserve)} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–æ–º, –æ–∂–∏–¥–∞–ª–æ—Å—å >= 5"
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–µ—Ä–≤–æ–º –∏–º–µ—é—Ç production_needed > 0
    for product in products_with_reserve:
        reserve = float(product['reserved_stock'])
        production = float(product['production_needed'])
        
        print(f"  {product['article']}: —Ä–µ–∑–µ—Ä–≤={reserve}, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ={production}")
        
        assert reserve > 0, f"–¢–æ–≤–∞—Ä {product['article']} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–µ–∑–µ—Ä–≤ > 0"
        assert production > 0, f"–¢–æ–≤–∞—Ä {product['article']} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å production_needed > 0"
        assert product['has_reserve'] == True, f"–¢–æ–≤–∞—Ä {product['article']} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å has_reserve=True"
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û: production_needed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= reserved_stock
        assert production >= reserve, f"–¢–æ–≤–∞—Ä {product['article']}: production_needed ({production}) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= reserved_stock ({reserve})"
    
    print("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–µ—Ä–≤–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
    return True

def test_reserved_articles_specifically():
    """
    –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏
    """
    print("\nüéØ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    
    expected_articles = [
        "15-43001R",   # —Ä–µ–∑–µ—Ä–≤ 800
        "263-41522",   # —Ä–µ–∑–µ—Ä–≤ 500  
        "556-51448",   # —Ä–µ–∑–µ—Ä–≤ 1000
        "N321-12",     # —Ä–µ–∑–µ—Ä–≤ 1000
        "N421-11-45K"  # —Ä–µ–∑–µ—Ä–≤ 5000
    ]
    
    response = requests.get("http://localhost:8000/api/v1/tochka/production/")
    data = response.json()
    products = data['results']
    
    found_articles = [p['article'] for p in products]
    
    for article in expected_articles:
        assert article in found_articles, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê—Ä—Ç–∏–∫—É–ª {article} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞!"
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        product = next(p for p in products if p['article'] == article)
        
        reserve = float(product['reserved_stock'])
        production = float(product['production_needed'])
        
        print(f"  ‚úÖ {article}: —Ä–µ–∑–µ—Ä–≤={reserve}, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ={production}")
        
        assert reserve > 0, f"–¢–æ–≤–∞—Ä {article} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–µ–∑–µ—Ä–≤ > 0"
        assert production >= reserve, f"–¢–æ–≤–∞—Ä {article}: –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= —Ä–µ–∑–µ—Ä–≤–∞"
    
    print("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
    return True

def test_api_consistency():
    """
    –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö API endpoint'–æ–≤
    """
    print("\nüîÑ –¢–ï–°–¢: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å API endpoints")
    
    endpoints = [
        "/api/v1/tochka/production/",
        "/api/v1/tochka/products/"
    ]
    
    for endpoint in endpoints:
        response = requests.get(f"http://localhost:8000{endpoint}")
        assert response.status_code == 200, f"Endpoint {endpoint} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        
        data = response.json()
        products_with_reserve = [p for p in data['results'] if float(p['reserved_stock']) > 0]
        
        print(f"  {endpoint}: –Ω–∞–π–¥–µ–Ω–æ {len(products_with_reserve)} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–æ–º")
        
        # –í —Å–ø–∏—Å–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–µ—Ä–≤–æ–º
        if endpoint == "/api/v1/tochka/production/":
            assert len(products_with_reserve) >= 5, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–æ–º –≤ {endpoint}"
    
    print("‚úÖ –í—Å–µ API endpoints –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
    return True

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í HOTFIX")
    
    try:
        test_critical_reserve_inclusion()
        test_reserved_articles_specifically() 
        test_api_consistency()
        
        print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Hotfix —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —Å —Ä–µ–∑–µ—Ä–≤–æ–º")
        print("‚úÖ –¢–æ–≤–∞—Ä—ã —Å —Ä–µ–∑–µ—Ä–≤–æ–º —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        exit(1)