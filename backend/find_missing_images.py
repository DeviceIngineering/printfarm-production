#!/usr/bin/env python3
"""
Find products that should have images but don't have them loaded.
"""
import os
import sys
import django

# Setup Django
sys.path.append('/Users/dim11/Documents/myProjects/Factory_v2/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from apps.products.models import Product
from apps.sync.moysklad_client import MoySkladClient

def find_missing_images():
    """Find products that have images in –ú–æ–π–°–∫–ª–∞–¥ but not in DB."""
    
    print("üîç –ü–û–ò–°–ö –¢–û–í–ê–†–û–í –° –ü–†–û–ü–£–©–ï–ù–ù–´–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò")
    print("=" * 50)
    
    client = MoySkladClient()
    
    # –í–æ–∑—å–º–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    products_without_images = Product.objects.filter(
        images__isnull=True,
        last_synced_at__isnull=False
    ).distinct()[:50]  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 50
    
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(products_without_images)} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    missing_images = []
    checked = 0
    
    for product in products_without_images:
        checked += 1
        if checked % 10 == 0:
            print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked}/{len(products_without_images)} —Ç–æ–≤–∞—Ä–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ú–æ–π–°–∫–ª–∞–¥
            images_data = client.get_product_images(product.moysklad_id)
            
            if images_data:  # –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ú–æ–π–°–∫–ª–∞–¥
                missing_images.append({
                    'product': product,
                    'images_count': len(images_data),
                    'images_data': images_data
                })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.article}: {str(e)}")
            continue
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {checked}")
    print(f"–¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(missing_images)}")
    
    if missing_images:
        print(f"\nüñºÔ∏è –¢–û–í–ê–†–´ –° –ü–†–û–ü–£–©–ï–ù–ù–´–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò:")
        for i, item in enumerate(missing_images[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            product = item['product']
            print(f"{i:2d}. {product.article}: {product.name[:50]}...")
            print(f"    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ú–æ–π–°–∫–ª–∞–¥: {item['images_count']}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                from apps.sync.services import SyncService
                sync_service = SyncService()
                synced_count = sync_service.sync_product_images(product)
                print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {synced_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if len(missing_images) > 20:
        print("1. –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å 20 –¥–æ 50-100 —Ç–æ–≤–∞—Ä–æ–≤")
        print("2. –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("3. –°–æ–∑–¥–∞—Ç—å API endpoint –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    elif missing_images:
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
    else:
        print("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∏–º–µ—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ú–æ–π–°–∫–ª–∞–¥")

if __name__ == '__main__':
    find_missing_images()