"""
SimplePrint Views

–í–∫–ª—é—á–∞–µ—Ç webhook endpoint –∏ REST API endpoints –¥–ª—è SimplePrint.
"""

import logging
from rest_framework import status, viewsets
from rest_framework.decorators import action
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.authentication import TokenAuthentication, SessionAuthentication
from rest_framework import filters
from rest_framework.pagination import PageNumberPagination
from django_filters.rest_framework import DjangoFilterBackend
from django.utils import timezone
from django.conf import settings

from .models import SimplePrintWebhookEvent, SimplePrintFile, SimplePrintFolder, SimplePrintSync, PrinterSnapshot
from .services import SimplePrintSyncService, PrinterSyncService
from .serializers import (
    SimplePrintFileSerializer, SimplePrintFileListSerializer,
    SimplePrintFolderSerializer, SimplePrintFolderListSerializer,
    SimplePrintSyncSerializer, SimplePrintWebhookEventSerializer,
    SyncStatsSerializer, TriggerSyncSerializer,
    PrinterSnapshotSerializer, PrinterSyncResultSerializer, PrinterStatsSerializer,
    PrinterWebhookEventSerializer
)

logger = logging.getLogger(__name__)


class SimplePrintFilePagination(PageNumberPagination):
    """Custom pagination —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è page_size"""
    page_size = 100
    page_size_query_param = 'page_size'
    max_page_size = 2000  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (1587 –Ω–∞ 2025-10-23)


class SimplePrintWebhookView(APIView):
    """
    Webhook endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç SimplePrint

    POST /api/v1/simpleprint/webhook/

    –§–æ—Ä–º–∞—Ç payload –æ—Ç SimplePrint:
    {
        "webhook_id": int,
        "event": string,      # –Ω–∞–ø—Ä–∏–º–µ—Ä: "job.started", "job.finished"
        "timestamp": int,     # Unix timestamp
        "data": object       # –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (job, printer, user, –∏ —Ç.–¥.)
    }

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è:
    - job.started: –ø–µ—á–∞—Ç—å –Ω–∞—á–∞–ª–∞—Å—å
    - job.finished: –ø–µ—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    - job.paused: –ø–µ—á–∞—Ç—å –Ω–∞ –ø–∞—É–∑–µ
    - job.resumed: –ø–µ—á–∞—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞
    - job.failed: –ø–µ—á–∞—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–∞
    - queue.item_added: –¥–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å
    - queue.item_deleted: —É–¥–∞–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    - queue.item_moved: –ø–µ—Ä–µ–º–µ—â–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
    - file.created: —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    - file.deleted: —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    """
    permission_classes = [AllowAny]  # SimplePrint webhooks –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç auth

    def post(self, request):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å webhook –æ—Ç SimplePrint

        SimplePrint –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
        - Header: X-SP-Token (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω secret)
        - Body: JSON —Å –ø–æ–ª—è–º–∏ webhook_id, event, timestamp, data
        """
        try:
            payload = request.data

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            expected_token = getattr(settings, 'SIMPLEPRINT_WEBHOOK_SECRET', None)
            if expected_token:
                received_token = request.headers.get('X-SP-Token') or request.headers.get('X-Sp-Token')
                if received_token != expected_token:
                    logger.warning(f"Invalid webhook token received")
                    return Response({
                        'status': 'error',
                        'message': 'Invalid token'
                    }, status=status.HTTP_401_UNAUTHORIZED)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è SimplePrint
            webhook_id = payload.get('webhook_id')
            event = payload.get('event', 'unknown')
            timestamp = payload.get('timestamp')
            data = payload.get('data', {})

            logger.info(f"üì® Received SimplePrint webhook: event={event}, webhook_id={webhook_id}, timestamp={timestamp}")

            # –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π SimplePrint –∫ –Ω–∞—à–∏–º —Ç–∏–ø–∞–º
            event_mapping = {
                # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                'test': 'test',
                # –°–æ–±—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–µ—á–∞—Ç–∏
                'job.started': 'job_started',
                'job.finished': 'job_completed',
                'job.done': 'job_completed',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è job.finished
                'job.paused': 'job_paused',
                'job.resumed': 'job_resumed',
                'job.failed': 'job_failed',
                'job.bed_cleared': 'job_completed',  # –°—Ç–æ–ª –æ—á–∏—â–µ–Ω = –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                # –°–æ–±—ã—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏
                'queue.changed': 'queue_changed',
                'queue.add_item': 'queue_changed',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                'queue.item_added': 'queue_changed',
                'queue.item_deleted': 'queue_changed',
                'queue.item_moved': 'queue_changed',
                'queue.delete_item': 'queue_item_deleted',  # v4.4.2: –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                # –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
                'printer.online': 'printer_online',
                'printer.offline': 'printer_offline',
                'printer.state_changed': 'printer_state_changed',
                'printer.material_changed': 'printer_state_changed',  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                'printer.ai_failure_detected': 'ai_failure_detected',  # v4.4.2: AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—É
                'printer.ai_failure_false_positive': 'ai_false_positive',  # v4.4.2: AI –ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
                # –°–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤
                'file.created': 'file_created',
                'file.deleted': 'file_deleted',
                # –°–æ–±—ã—Ç–∏—è —Ñ–∏–ª–∞–º–µ–Ω—Ç–æ–≤ (v4.4.2)
                'filament.delete': 'filament_deleted',  # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª–∞–º–µ–Ω—Ç–∞
            }

            our_event_type = event_mapping.get(event, 'unknown')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook —Å–æ–±—ã—Ç–∏–µ
            from .models import PrinterWebhookEvent

            # –ò–∑–≤–ª–µ–∫–∞–µ–º printer_id –∏ job_id –∏–∑ data
            printer_id = None
            job_id = None

            if 'job' in data and isinstance(data['job'], dict):
                job_id = str(data['job'].get('id', ''))
                printer_id = str(data['job'].get('printer_id', ''))

            webhook_event = PrinterWebhookEvent.objects.create(
                event_type=our_event_type,
                printer_id=printer_id,
                job_id=job_id,
                payload=payload
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            try:
                self._process_webhook_event(webhook_event, event, data)
                webhook_event.processed = True
                webhook_event.processed_at = timezone.now()
                webhook_event.save()

                logger.info(f"‚úÖ Webhook processed successfully: {event}")

            except Exception as e:
                logger.error(f"‚ùå Failed to process webhook: {e}", exc_info=True)
                webhook_event.processing_error = str(e)
                webhook_event.save()

            return Response({
                'status': 'received',
                'event': event,
                'message': 'Webhook processed successfully'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"‚ùå Webhook processing failed: {e}", exc_info=True)
            return Response({
                'status': 'error',
                'message': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def _process_webhook_event(self, webhook_event, event: str, data: dict):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å webhook —Å–æ–±—ã—Ç–∏–µ SimplePrint

        Args:
            webhook_event: –æ–±—ä–µ–∫—Ç PrinterWebhookEvent
            event: —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –æ—Ç SimplePrint (job.started, –∏ —Ç.–¥.)
            data: –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        """
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç SimplePrint
        if event == 'test':
            logger.info(f"‚úÖ Test webhook received successfully")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–µ—á–∞—Ç–∏
        if event.startswith('job.'):
            self._handle_job_event(event, data)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—á–µ—Ä–µ–¥–∏
        elif event.startswith('queue.'):
            self._handle_queue_event(event, data)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        elif event.startswith('printer.'):
            self._handle_printer_event(event, data)

        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ñ–∞–π–ª—ã
        elif event.startswith('file.'):
            self._handle_file_event(event, data)

        else:
            logger.warning(f"‚ö†Ô∏è Unknown event type: {event}")

    def _handle_job_event(self, event: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
        job_data = data.get('job', {})
        if not job_data:
            return

        from .models import PrintJob, PrinterSnapshot
        from django.core.cache import cache

        job_id = str(job_data.get('id', ''))
        printer_id = str(job_data.get('printer_id', ''))

        logger.info(f"üñ®Ô∏è Processing job event: {event} for job_id={job_id}, printer_id={printer_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è
        if event == 'job.started':
            PrintJob.objects.update_or_create(
                job_id=job_id,
                defaults={
                    'printer_id': printer_id,
                    'printer_name': job_data.get('printer_name', ''),
                    'file_name': job_data.get('file_name', ''),
                    'status': 'printing',
                    'started_at': timezone.now(),
                    'raw_data': job_data
                }
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è timeline
            cache.set('timeline_jobs_updated', True, 300)  # 5 –º–∏–Ω—É—Ç
            logger.info(f"üì¢ Timeline update flag set for job.started")

        elif event == 'job.finished' or event == 'job.done':
            PrintJob.objects.filter(job_id=job_id).update(
                status='completed',
                completed_at=timezone.now(),
                success=True,
                percentage=100
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è timeline
            cache.set('timeline_jobs_updated', True, 300)
            logger.info(f"üì¢ Timeline update flag set for job.finished/done")

        elif event == 'job.failed':
            PrintJob.objects.filter(job_id=job_id).update(
                status='failed',
                completed_at=timezone.now(),
                success=False,
                error_message=job_data.get('error', '')
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è timeline
            cache.set('timeline_jobs_updated', True, 300)
            logger.info(f"üì¢ Timeline update flag set for job.failed")

        elif event == 'job.cancelled':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è
            cache.set('timeline_jobs_updated', True, 300)
            logger.info(f"üì¢ Timeline update flag set for job.cancelled")

    def _handle_queue_event(self, event: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ—á–µ—Ä–µ–¥–∏"""
        logger.info(f"üìã Processing queue event: {event}")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏

    def _handle_printer_event(self, event: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
        logger.info(f"üñ®Ô∏è Processing printer event: {event}")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏–Ω—Ç–µ—Ä–∞

    def _handle_file_event(self, event: str, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
        logger.info(f"üìÅ Processing file event: {event}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

    def _detect_event_type(self, payload: dict) -> str:
        """
        DEPRECATED: –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        # SimplePrint –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–µ 'event'
        if 'event' in payload:
            return payload['event']

        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        if 'event_type' in payload:
            return payload['event_type']

        # Fallback - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
        if 'file' in payload:
            if payload.get('action') == 'created':
                return 'file_created'
            elif payload.get('action') == 'updated':
                return 'file_updated'
            elif payload.get('action') == 'deleted':
                return 'file_deleted'

        if 'folder' in payload:
            if payload.get('action') == 'created':
                return 'folder_created'
            elif payload.get('action') == 'deleted':
                return 'folder_deleted'

        return 'unknown'


class SimplePrintFileViewSet(viewsets.ReadOnlyModelViewSet):
    """
    ViewSet –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ SimplePrint

    GET /api/v1/simpleprint/files/ - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    GET /api/v1/simpleprint/files/{id}/ - –¥–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞
    GET /api/v1/simpleprint/files/stats/ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
    """
    queryset = SimplePrintFile.objects.select_related('folder').all()
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]
    pagination_class = SimplePrintFilePagination
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['folder', 'file_type', 'ext']
    search_fields = ['name', 'simpleprint_id']
    ordering_fields = ['name', 'size', 'created_at_sp', 'last_synced_at']
    ordering = ['-created_at_sp']

    def get_serializer_class(self):
        """–í—ã–±—Ä–∞—Ç—å serializer –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç action"""
        if self.action == 'list':
            return SimplePrintFileListSerializer
        return SimplePrintFileSerializer

    @action(detail=False, methods=['get'])
    def stats(self, request):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º"""
        total_files = self.get_queryset().count()
        total_size = sum(f.size for f in self.get_queryset())

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        by_type = {}
        for file in self.get_queryset():
            file_type = file.file_type or 'unknown'
            if file_type not in by_type:
                by_type[file_type] = {'count': 0, 'size': 0}
            by_type[file_type]['count'] += 1
            by_type[file_type]['size'] += file.size

        return Response({
            'total_files': total_files,
            'total_size': total_size,
            'by_type': by_type
        })


class SimplePrintFolderViewSet(viewsets.ReadOnlyModelViewSet):
    """
    ViewSet –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–ø–æ–∫ SimplePrint

    GET /api/v1/simpleprint/folders/ - —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
    GET /api/v1/simpleprint/folders/{id}/ - –¥–µ—Ç–∞–ª–∏ –ø–∞–ø–∫–∏
    GET /api/v1/simpleprint/folders/{id}/files/ - —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
    """
    queryset = SimplePrintFolder.objects.all()
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['parent', 'depth']
    search_fields = ['name', 'simpleprint_id']
    ordering_fields = ['name', 'depth', 'files_count', 'last_synced_at']
    ordering = ['depth', 'name']

    def get_serializer_class(self):
        """–í—ã–±—Ä–∞—Ç—å serializer –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç action"""
        if self.action == 'list':
            return SimplePrintFolderListSerializer
        return SimplePrintFolderSerializer

    @action(detail=True, methods=['get'])
    def files(self, request, pk=None):
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ"""
        folder = self.get_object()
        files = folder.files.all()
        serializer = SimplePrintFileListSerializer(files, many=True)
        return Response(serializer.data)


class SimplePrintSyncViewSet(viewsets.ReadOnlyModelViewSet):
    """
    ViewSet –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π

    GET /api/v1/simpleprint/sync/ - –∏—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π
    GET /api/v1/simpleprint/sync/{id}/ - –¥–µ—Ç–∞–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    POST /api/v1/simpleprint/sync/trigger/ - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    GET /api/v1/simpleprint/sync/stats/ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    """
    queryset = SimplePrintSync.objects.all()
    serializer_class = SimplePrintSyncSerializer
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]
    ordering = ['-started_at']

    @action(detail=False, methods=['post'])
    def trigger(self, request):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é

        Body:
        {
            "full_sync": false,  // –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
            "force": false       // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        }
        """
        serializer = TriggerSyncSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        full_sync = serializer.validated_data.get('full_sync', False)
        force = serializer.validated_data.get('force', False)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        logger.info(f"üîç Sync trigger request: full_sync={full_sync}, force={force}, user={request.user.username}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        service = SimplePrintSyncService()
        stats = service.get_sync_stats()

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üìä Stats: last_sync={stats.get('last_sync')}, status={stats.get('last_sync_status')}")

        if stats['last_sync'] and not force:
            time_since_last = timezone.now() - stats['last_sync']
            seconds_since_last = int(time_since_last.total_seconds())

            if time_since_last.total_seconds() < 300:  # 5 –º–∏–Ω—É—Ç
                logger.warning(f"‚è±Ô∏è Cooldown ACTIVE: {seconds_since_last}s < 300s. Returning 429. Force={force}")
                return Response({
                    'status': 'rejected',
                    'message': f'–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ {seconds_since_last} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ force=true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.',
                    'last_sync': stats['last_sync']
                }, status=status.HTTP_429_TOO_MANY_REQUESTS)
            else:
                logger.info(f"‚úÖ Cooldown passed: {seconds_since_last}s >= 300s")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            from .tasks import sync_simpleprint_task

            task = sync_simpleprint_task.delay(full_sync=full_sync)

            logger.info(f"‚úÖ Sync started: task_id={task.id}, full_sync={full_sync}")

            return Response({
                'status': 'started',
                'task_id': task.id,
                'message': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ'
            }, status=status.HTTP_202_ACCEPTED)

        except Exception as e:
            logger.error(f"Failed to start sync: {e}", exc_info=True)
            return Response({
                'status': 'error',
                'message': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['get'])
    def stats(self, request):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        service = SimplePrintSyncService()
        stats = service.get_sync_stats()

        serializer = SyncStatsSerializer(stats)
        return Response(serializer.data)

    @action(detail=False, methods=['get'], url_path='status/(?P<task_id>[^/.]+)')
    def task_status(self, request, task_id=None):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

        GET /api/v1/simpleprint/sync/status/{task_id}/
        """
        from celery.result import AsyncResult

        task = AsyncResult(task_id)

        response_data = {
            'task_id': task_id,
            'state': task.state,
            'ready': task.ready(),
        }

        if task.ready():
            if task.successful():
                response_data['result'] = task.result
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if 'sync_id' in task.result:
                    try:
                        sync_log = SimplePrintSync.objects.get(id=task.result['sync_id'])
                        response_data['sync_log'] = SimplePrintSyncSerializer(sync_log).data
                    except SimplePrintSync.DoesNotExist:
                        pass
            else:
                response_data['error'] = str(task.info)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            latest_sync = SimplePrintSync.objects.filter(status='pending').first()
            if latest_sync:
                response_data['progress'] = {
                    'total_files': latest_sync.total_files,
                    'synced_files': latest_sync.synced_files,
                    'total_folders': latest_sync.total_folders,
                    'synced_folders': latest_sync.synced_folders,
                }

        return Response(response_data)

    @action(detail=False, methods=['post'], url_path='cancel')
    def cancel_sync(self, request):
        """
        –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

        POST /api/v1/simpleprint/sync/cancel/
        Body: {"task_id": "..."}
        """
        from celery.result import AsyncResult

        task_id = request.data.get('task_id')
        if not task_id:
            return Response({
                'status': 'error',
                'message': 'task_id is required'
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            task = AsyncResult(task_id)

            logger.info(f"Attempting to cancel task: {task_id}, state: {task.state}")

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            task.revoke(terminate=True, signal='SIGKILL')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –ë–î
            try:
                latest_sync = SimplePrintSync.objects.filter(status='pending').first()
                if latest_sync:
                    latest_sync.status = 'cancelled'
                    latest_sync.finished_at = timezone.now()
                    latest_sync.save()
                    logger.info(f"Updated sync log {latest_sync.id} status to cancelled")
            except Exception as e:
                logger.error(f"Failed to update sync log: {e}")

            return Response({
                'status': 'cancelled',
                'task_id': task_id,
                'message': '–ó–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to cancel task {task_id}: {e}", exc_info=True)
            return Response({
                'status': 'error',
                'message': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PrinterSyncView(APIView):
    """
    API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏–∑ SimplePrint
    """
    permission_classes = [AllowAny]  # TODO: Add authentication

    def post(self, request):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤"""
        try:
            service = PrinterSyncService()
            results = service.sync_printers()

            serializer = PrinterSyncResultSerializer(results)
            return Response(serializer.data, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Printer sync failed: {e}", exc_info=True)
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class PrinterSnapshotsView(APIView):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    """
    permission_classes = [AllowAny]  # TODO: Add authentication

    def get(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∏–º–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
        try:
            service = PrinterSyncService()

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î
            snapshots = service.get_latest_snapshots()

            if not snapshots:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                logger.info("No snapshots found, attempting sync...")
                try:
                    service.sync_printers()
                    snapshots = service.get_latest_snapshots()
                except Exception as sync_error:
                    logger.warning(f"Sync failed: {sync_error}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                    return Response([], status=status.HTTP_200_OK)

            serializer = PrinterSnapshotSerializer(snapshots, many=True)
            return Response(serializer.data, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to fetch printer snapshots: {e}", exc_info=True)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            return Response([], status=status.HTTP_200_OK)


class PrinterStatsView(APIView):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    """
    permission_classes = [AllowAny]  # TODO: Add authentication

    def get(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤"""
        try:
            service = PrinterSyncService()
            stats = service.get_printer_stats()

            serializer = PrinterStatsSerializer(stats)
            return Response(serializer.data, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to fetch printer stats: {e}", exc_info=True)
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# ============================================================================
# Webhook Testing API Views
# ============================================================================

class WebhookEventsListView(APIView):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ webhook —Å–æ–±—ã—Ç–∏–π

    GET /api/v1/simpleprint/webhook/events/

    Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (default: 20, max: 100)
    - event_type: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    - printer_id: —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É
    - processed: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (true/false)
    """
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ webhook —Å–æ–±—ã—Ç–∏–π"""
        try:
            from .models import PrinterWebhookEvent

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            limit = int(request.query_params.get('limit', 20))
            limit = min(limit, 100)  # –ú–∞–∫—Å–∏–º—É–º 100

            event_type = request.query_params.get('event_type')
            printer_id = request.query_params.get('printer_id')
            processed = request.query_params.get('processed')

            # –ë–∞–∑–æ–≤—ã–π queryset
            queryset = PrinterWebhookEvent.objects.all()

            # –§–∏–ª—å—Ç—Ä—ã
            if event_type:
                queryset = queryset.filter(event_type=event_type)
            if printer_id:
                queryset = queryset.filter(printer_id=printer_id)
            if processed is not None:
                processed_bool = processed.lower() == 'true'
                queryset = queryset.filter(processed=processed_bool)

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏)
            queryset = queryset.order_by('-received_at')[:limit]

            serializer = PrinterWebhookEventSerializer(queryset, many=True)

            return Response({
                'count': queryset.count(),
                'events': serializer.data
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to fetch webhook events: {e}", exc_info=True)
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class WebhookStatsView(APIView):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ webhook —Å–æ–±—ã—Ç–∏–π

    GET /api/v1/simpleprint/webhook/stats/

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - total: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
    - processed: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
    - errors: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –æ—à–∏–±–∫–∞–º–∏
    - by_type: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
    - last_hour: —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    - last_24h: —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    """
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É webhook —Å–æ–±—ã—Ç–∏–π"""
        try:
            from .models import PrinterWebhookEvent
            from django.db.models import Count, Q
            from datetime import timedelta

            now = timezone.now()
            one_hour_ago = now - timedelta(hours=1)
            one_day_ago = now - timedelta(hours=24)

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total = PrinterWebhookEvent.objects.count()
            processed = PrinterWebhookEvent.objects.filter(processed=True).count()
            errors = PrinterWebhookEvent.objects.filter(
                processing_error__isnull=False
            ).count()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
            by_type = {}
            type_stats = PrinterWebhookEvent.objects.values('event_type').annotate(
                count=Count('id')
            ).order_by('-count')

            for stat in type_stats:
                by_type[stat['event_type']] = stat['count']

            # –°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            last_hour = PrinterWebhookEvent.objects.filter(
                received_at__gte=one_hour_ago
            ).count()

            # –°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            last_24h = PrinterWebhookEvent.objects.filter(
                received_at__gte=one_day_ago
            ).count()

            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ
            last_event = PrinterWebhookEvent.objects.order_by('-received_at').first()
            last_event_time = last_event.received_at if last_event else None

            return Response({
                'total': total,
                'processed': processed,
                'errors': errors,
                'by_type': by_type,
                'last_hour': last_hour,
                'last_24h': last_24h,
                'last_event_at': last_event_time,
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to fetch webhook stats: {e}", exc_info=True)
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class WebhookTestTriggerView(APIView):
    """
    API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook —Å–æ–±—ã—Ç–∏—è

    POST /api/v1/simpleprint/webhook/test-trigger/

    Body:
    {
        "event_type": "job.started" | "job.finished" | "printer.state_changed" | etc.
    }
    """
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π webhook"""
        try:
            import requests
            import time

            event_type = request.data.get('event_type', 'test')

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π payload –≤ —Ñ–æ—Ä–º–∞—Ç–µ SimplePrint
            test_payload = {
                'webhook_id': 999999,
                'event': event_type,
                'timestamp': int(time.time()),
                'data': {
                    'test': True,
                    'triggered_by': 'frontend_ui',
                    'user': request.user.username if request.user else 'anonymous'
                }
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –¥–∞–Ω–Ω—ã–µ
            if event_type.startswith('job.'):
                test_payload['data']['job'] = {
                    'id': f'test_job_{int(time.time())}',
                    'name': 'test_model.gcode',
                    'started': int(time.time()),
                }
                test_payload['data']['printer'] = {
                    'id': 'test_printer_001',
                    'name': 'Test Printer #1'
                }
            elif event_type.startswith('printer.'):
                test_payload['data']['printer'] = {
                    'id': 'test_printer_001',
                    'name': 'Test Printer #1',
                    'state': 'operational'
                }
            elif event_type.startswith('queue.'):
                test_payload['data']['printer'] = {
                    'id': 'test_printer_001',
                    'name': 'Test Printer #1'
                }
                test_payload['data']['queue'] = {
                    'id': 'test_queue_001',
                    'items': []
                }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—à webhook endpoint
            webhook_url = request.build_absolute_uri('/api/v1/simpleprint/webhook/')

            response = requests.post(
                webhook_url,
                json=test_payload,
                timeout=5
            )

            return Response({
                'status': 'sent',
                'webhook_url': webhook_url,
                'payload': test_payload,
                'response_status': response.status_code,
                'response_data': response.json() if response.ok else response.text
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to trigger test webhook: {e}", exc_info=True)
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class WebhookClearOldEventsView(APIView):
    """
    API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö webhook —Å–æ–±—ã—Ç–∏–π

    DELETE /api/v1/simpleprint/webhook/events/clear/

    Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - days: —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π (default: 7)
    """
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]

    def delete(self, request):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ webhook —Å–æ–±—ã—Ç–∏—è"""
        try:
            from .models import PrinterWebhookEvent
            from datetime import timedelta

            days = int(request.query_params.get('days', 7))
            cutoff_date = timezone.now() - timedelta(days=days)

            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫
            deleted_count, _ = PrinterWebhookEvent.objects.filter(
                received_at__lt=cutoff_date,
                processed=True,
                processing_error__isnull=True
            ).delete()

            return Response({
                'status': 'success',
                'deleted_count': deleted_count,
                'cutoff_date': cutoff_date,
                'message': f'Deleted {deleted_count} events older than {days} days'
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to clear old webhook events: {e}", exc_info=True)
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class TimelineJobsView(APIView):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–µ—á–∞—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ timeline.

    GET /api/v1/simpleprint/timeline-jobs/

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —Å –∏—Ö –∑–∞–¥–∞–Ω–∏—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —á–∞—Å–æ–≤ (5 —Å–º–µ–Ω –ø–æ 12—á).
    –î–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è timeline: –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.

    –û—Ç–≤–µ—Ç:
    {
        "printers": [
            {
                "id": "printer_sp_id",
                "name": "–ü—Ä–∏–Ω—Ç–µ—Ä 1",
                "jobs": [
                    {
                        "job_id": "job123",
                        "article": "375-42108",
                        "file_name": "file.gcode",
                        "status": "completed",
                        "percentage": 100,
                        "started_at": "2025-10-28T10:30:00Z",
                        "completed_at": "2025-10-28T16:45:00Z",
                        "duration_seconds": 22500,
                        "material_color": "black"
                    }
                ]
            }
        ]
    }
    """
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è timeline"""
        try:
            from .models import PrintJob, PrinterSnapshot
            from .serializers import TimelinePrinterSerializer, TimelineJobSerializer
            from datetime import timedelta
            from collections import defaultdict

            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —á–∞—Å–æ–≤ (5 —Å–º–µ–Ω √ó 12 —á–∞—Å–æ–≤)
            time_range_hours = 60
            cutoff_time = timezone.now() - timedelta(hours=time_range_hours)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            # –°—Ç–∞—Ç—É—Å—ã: printing (–∞–∫—Ç–∏–≤–Ω—ã–µ), completed, failed, cancelled
            jobs = PrintJob.objects.filter(
                started_at__gte=cutoff_time,
                status__in=['printing', 'completed', 'failed', 'cancelled']
            ).select_related().order_by('printer_id', 'started_at')

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º
            printers_jobs = defaultdict(list)
            for job in jobs:
                printers_jobs[job.printer_id].append(job)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö snapshots
            printer_snapshots = {}
            for printer_id in printers_jobs.keys():
                snapshot = PrinterSnapshot.objects.filter(
                    printer_id=printer_id
                ).order_by('-created_at').first()

                if snapshot:
                    printer_snapshots[printer_id] = {
                        'id': snapshot.printer_id,
                        'name': snapshot.printer_name or f"–ü—Ä–∏–Ω—Ç–µ—Ä {printer_id}"
                    }
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç snapshot, –±–µ—Ä–µ–º –∏–º—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ job
                    first_job = printers_jobs[printer_id][0]
                    printer_snapshots[printer_id] = {
                        'id': printer_id,
                        'name': first_job.printer_name or f"–ü—Ä–∏–Ω—Ç–µ—Ä {printer_id}"
                    }

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
            printers_data = []
            for printer_id, jobs_list in printers_jobs.items():
                printer_info = printer_snapshots.get(printer_id, {
                    'id': printer_id,
                    'name': f"–ü—Ä–∏–Ω—Ç–µ—Ä {printer_id}"
                })

                printers_data.append({
                    'id': printer_info['id'],
                    'name': printer_info['name'],
                    'jobs': TimelineJobSerializer(jobs_list, many=True).data
                })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä—ã –ø–æ –∏–º–µ–Ω–∏ (1-27)
            def extract_number(printer_name):
                """–ò–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
                import re
                match = re.search(r'\d+', printer_name)
                return int(match.group()) if match else 999

            printers_data.sort(key=lambda p: extract_number(p['name']))

            return Response({
                'printers': printers_data
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to get timeline jobs: {e}", exc_info=True)
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class TimelineLiveJobsView(APIView):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∏–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ SimplePrint API –¥–ª—è timeline.

    GET /api/v1/simpleprint/timeline-live-jobs/

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SimplePrint API –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:
    - –°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —á–∞—Å–æ–≤
    - –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

    –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ.
    Webhook —Å–æ–±—ã—Ç–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    """
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –∏–∑ SimplePrint API"""
        try:
            from .client import SimplePrintPrintersClient
            from datetime import datetime, timedelta
            from django.core.cache import cache
            import re

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            has_updates = cache.get('timeline_jobs_updated', False)
            if has_updates:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                cache.delete('timeline_jobs_updated')
                logger.info("üì¢ Timeline update flag detected and cleared")

            client = SimplePrintPrintersClient()

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä—ã
            printers = client.get_printers()

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100, –º–∞–∫—Å–∏–º—É–º –¥–ª—è SimplePrint API)
            jobs_response = client.get_jobs_history(limit=100, page=1)
            jobs_history = jobs_response.get('jobs', [])

            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —á–∞—Å–æ–≤
            cutoff_time = timezone.now() - timedelta(hours=60)

            logger.info(f"Processing {len(jobs_history)} jobs, cutoff_time: {cutoff_time}")

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if jobs_history:
                logger.info(f"Sample job structure: {list(jobs_history[0].keys())}")
                logger.info(f"Sample job data: {jobs_history[0]}")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º
            printers_data = []

            for printer in printers:
                printer_id = str(printer.get('id', ''))
                # SimplePrint: –∏–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ printer.name
                printer_obj = printer.get('printer', {})
                printer_name = printer_obj.get('name', 'Unknown') if isinstance(printer_obj, dict) else 'Unknown'

                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —á–∞—Å–æ–≤
                printer_jobs = []

                for job in jobs_history:
                    job_id = job.get('id', 'unknown')
                    job_printer_id = str(job.get('printer', ''))  # SimplePrint –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'printer', –Ω–µ 'printer_id'

                    if job_printer_id != printer_id:
                        continue

                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (SimplePrint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ISO string)
                    start_date_str = job.get('startDate')
                    if not start_date_str:
                        continue

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ISO datetime string –≤ datetime
                    from dateutil import parser
                    try:
                        started_datetime = parser.isoparse(start_date_str)
                    except Exception as e:
                        logger.warning(f"Failed to parse startDate for job {job_id}: {e}")
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 60 —á–∞—Å–æ–≤
                    if started_datetime < cutoff_time:
                        logger.debug(f"Job {job_id}: Too old ({started_datetime} < {cutoff_time}), skipping")
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: "–∞—Ä—Ç–∏–∫—É–ª_...")
                    file_name = job.get('filename', '')  # SimplePrint –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'filename'
                    article = None
                    if file_name:
                        match = re.match(r'^([^_]+)', file_name)
                        if match:
                            article = match.group(1)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (SimplePrint: ongoing, done, failed, cancelled)
                    sp_status = job.get('status', '')
                    if sp_status == 'ongoing':
                        job_status = 'printing'
                    elif sp_status == 'done':
                        job_status = 'completed'
                    elif sp_status == 'failed':
                        job_status = 'failed'
                    elif sp_status == 'cancelled':
                        job_status = 'cancelled'
                    else:
                        job_status = 'completed'

                    # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    end_date_str = job.get('endDate')
                    completed_datetime = None
                    if end_date_str:
                        try:
                            completed_datetime = parser.isoparse(end_date_str)
                        except:
                            pass

                    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    duration_seconds = 0
                    if completed_datetime:
                        duration_seconds = int((completed_datetime - started_datetime).total_seconds())

                    # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    percentage = job.get('currentPercentage', 0)
                    if job_status == 'completed':
                        percentage = 100

                    # –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ü–≤–µ—Ç (SimplePrint —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è)
                    material_color = None
                    filament = job.get('filament', {})
                    if isinstance(filament, dict):
                        # SimplePrint: filament.e0.fil[0].color (hex)
                        e0 = filament.get('e0', {})
                        if isinstance(e0, dict):
                            fil_list = e0.get('fil', [])
                            if fil_list and len(fil_list) > 0:
                                color_hex = fil_list[0].get('color', '')
                                if color_hex:
                                    material_color = color_hex

                    printer_jobs.append({
                        'job_id': str(job.get('id', '')),
                        'article': article,
                        'file_name': file_name,
                        'status': job_status,
                        'percentage': percentage,
                        'started_at': started_datetime.isoformat(),
                        'completed_at': completed_datetime.isoformat() if completed_datetime else None,
                        'duration_seconds': duration_seconds,
                        'material_color': material_color
                    })

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                current_job = printer.get('current_job')
                if current_job and isinstance(current_job, dict):
                    start_date_str = current_job.get('startDate')
                    if start_date_str:
                        try:
                            started_datetime = parser.isoparse(start_date_str)

                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 60 —á–∞—Å–æ–≤
                            if started_datetime >= cutoff_time:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª
                                file_name = current_job.get('filename', '')
                                article = None
                                if file_name:
                                    match = re.match(r'^([^_]+)', file_name)
                                    if match:
                                        article = match.group(1)

                                # –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ü–≤–µ—Ç
                                material_color = None
                                filament = current_job.get('filament', {})
                                if isinstance(filament, dict):
                                    e0 = filament.get('e0', {})
                                    if isinstance(e0, dict):
                                        fil_list = e0.get('fil', [])
                                        if fil_list and len(fil_list) > 0:
                                            color_hex = fil_list[0].get('color', '')
                                            if color_hex:
                                                material_color = color_hex

                                # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                                percentage = current_job.get('currentPercentage', 0)

                                printer_jobs.append({
                                    'job_id': str(current_job.get('id', '')),
                                    'article': article,
                                    'file_name': file_name,
                                    'status': 'printing',
                                    'percentage': percentage,
                                    'started_at': started_datetime.isoformat(),
                                    'completed_at': None,
                                    'duration_seconds': 0,
                                    'material_color': material_color
                                })
                        except Exception as e:
                            logger.warning(f"Failed to parse current_job for printer {printer_id}: {e}")

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
                printer_jobs.sort(key=lambda x: x['started_at'])

                printers_data.append({
                    'id': printer_id,
                    'name': printer_name,
                    'jobs': printer_jobs
                })

            logger.info(f"Successfully fetched live timeline data: {len(printers_data)} printers, "
                       f"{sum(len(p['jobs']) for p in printers_data)} jobs")

            return Response({
                'printers': printers_data,
                'timestamp': timezone.now().isoformat(),
                'has_updates': has_updates  # –§–ª–∞–≥ –¥–ª—è frontend –æ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Failed to get live timeline jobs: {e}", exc_info=True)
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
