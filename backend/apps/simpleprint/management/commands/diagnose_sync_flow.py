"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

–ó–∞–ø—É—Å–∫: docker exec factory_v3_backend python manage.py diagnose_sync_flow
"""

import json
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from rest_framework.authtoken.models import Token
from apps.simpleprint.serializers import TriggerSyncSerializer
from apps.simpleprint.services import SimplePrintSyncService


class Command(BaseCommand):
    help = '–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'

    def handle(self, *args, **options):
        self.stdout.write("\n" + "="*80)
        self.stdout.write(self.style.SUCCESS("üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–¢–û–ö–ê –ó–ê–ü–†–û–°–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò"))
        self.stdout.write("="*80 + "\n")

        # ============================================================================
        # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Serializer
        # ============================================================================
        self.stdout.write(self.style.WARNING("üìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ TriggerSyncSerializer"))
        self.stdout.write("-" * 80)

        # –¢–µ—Å—Ç 1: force=False
        data1 = {'full_sync': False, 'force': False}
        serializer1 = TriggerSyncSerializer(data=data1)

        self.stdout.write(f"\nüß™ –¢–µ—Å—Ç 1: {data1}")
        if serializer1.is_valid():
            self.stdout.write(self.style.SUCCESS("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞"))
            self.stdout.write(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {serializer1.validated_data}")
            self.stdout.write(f"   force = {serializer1.validated_data.get('force', '–ù–ï–¢ –ö–õ–Æ–ß–ê')}")
        else:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {serializer1.errors}"))

        # –¢–µ—Å—Ç 2: force=True
        data2 = {'full_sync': True, 'force': True}
        serializer2 = TriggerSyncSerializer(data=data2)

        self.stdout.write(f"\nüß™ –¢–µ—Å—Ç 2: {data2}")
        if serializer2.is_valid():
            self.stdout.write(self.style.SUCCESS("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞"))
            self.stdout.write(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {serializer2.validated_data}")
            self.stdout.write(f"   force = {serializer2.validated_data.get('force', '–ù–ï–¢ –ö–õ–Æ–ß–ê')}")
        else:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {serializer2.errors}"))

        # –¢–µ—Å—Ç 3: –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ force
        data3 = {'full_sync': False}
        serializer3 = TriggerSyncSerializer(data=data3)

        self.stdout.write(f"\nüß™ –¢–µ—Å—Ç 3: {data3}")
        if serializer3.is_valid():
            self.stdout.write(self.style.SUCCESS("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞"))
            self.stdout.write(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {serializer3.validated_data}")
            force_value = serializer3.validated_data.get('force', 'DEFAULT_NOT_SET')
            self.stdout.write(f"   force = {force_value}")
            if force_value == False or force_value == 'DEFAULT_NOT_SET':
                self.stdout.write(self.style.SUCCESS("   ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é force=False"))
            else:
                self.stdout.write(self.style.ERROR(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = {force_value}"))
        else:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {serializer3.errors}"))

        self.stdout.write("")

        # ============================================================================
        # –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ SimplePrintSyncService.get_sync_stats()
        # ============================================================================
        self.stdout.write(self.style.WARNING("\nüìã –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ SimplePrintSyncService.get_sync_stats()"))
        self.stdout.write("-" * 80)

        try:
            service = SimplePrintSyncService()
            stats = service.get_sync_stats()

            self.stdout.write(self.style.SUCCESS("‚úÖ –ú–µ—Ç–æ–¥ get_sync_stats() —Ä–∞–±–æ—Ç–∞–µ—Ç"))
            self.stdout.write(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for key, value in stats.items():
                self.stdout.write(f"   {key}: {value}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º last_sync
            if stats.get('last_sync'):
                from django.utils import timezone
                time_since_last = timezone.now() - stats['last_sync']
                seconds = int(time_since_last.total_seconds())
                self.stdout.write(f"\n‚è±Ô∏è –ü—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {seconds} —Å–µ–∫—É–Ω–¥")

                if seconds < 300:
                    self.stdout.write(self.style.WARNING(f"   ‚ö†Ô∏è Cooldown –ê–ö–¢–ò–í–ï–ù (–ø—Ä–æ—à–ª–æ {seconds}s < 300s)"))
                    self.stdout.write("   –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ë–ï–ó force –≤–µ—Ä–Ω–µ—Ç—Å—è 429")
                else:
                    self.stdout.write(self.style.SUCCESS(f"   ‚úÖ Cooldown –ù–ï –∞–∫—Ç–∏–≤–µ–Ω (–ø—Ä–æ—à–ª–æ {seconds}s >= 300s)"))

            else:
                self.stdout.write(self.style.WARNING("\n‚ö†Ô∏è last_sync = None (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ)"))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {e}"))
            import traceback
            self.stdout.write(traceback.format_exc())

        self.stdout.write("")

        # ============================================================================
        # –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        # ============================================================================
        self.stdout.write(self.style.WARNING("\nüìã –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ production —Ç–æ–∫–µ–Ω–∞"))
        self.stdout.write("-" * 80)

        production_token = '0a8fee03bca2b530a15b1df44d38b304e3f57484'
        try:
            token = Token.objects.get(key=production_token)
            self.stdout.write(self.style.SUCCESS(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {production_token[:20]}..."))
            self.stdout.write(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {token.user.username} (ID: {token.user.id})")
            self.stdout.write(f"   Email: {token.user.email}")
            self.stdout.write(f"   –ê–∫—Ç–∏–≤–µ–Ω: {token.user.is_active}")
            self.stdout.write(f"   Staff: {token.user.is_staff}")
            self.stdout.write(f"   Superuser: {token.user.is_superuser}")
        except Token.DoesNotExist:
            self.stdout.write(self.style.ERROR(f"‚ùå –¢–æ–∫–µ–Ω –ù–ï –ù–ê–ô–î–ï–ù: {production_token[:20]}..."))
            self.stdout.write("\nüí° –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π:")
            self.stdout.write('docker exec factory_v3_backend python manage.py shell -c "')
            self.stdout.write('from rest_framework.authtoken.models import Token')
            self.stdout.write('from django.contrib.auth.models import User')
            self.stdout.write('user = User.objects.first()')
            self.stdout.write(f'Token.objects.get_or_create(user=user, key=\'{production_token}\')')
            self.stdout.write('"')

        # ============================================================================
        # –®–ê–ì 4: –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ cooldown
        # ============================================================================
        self.stdout.write(self.style.WARNING("\nüìã –®–ê–ì 4: –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ cooldown –∏–∑ views.py"))
        self.stdout.write("-" * 80)

        try:
            service = SimplePrintSyncService()
            stats = service.get_sync_stats()

            test_cases = [
                {'full_sync': False, 'force': False, 'desc': '–û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å'},
                {'full_sync': True, 'force': False, 'desc': '–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ë–ï–ó force'},
                {'full_sync': False, 'force': True, 'desc': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'},
                {'full_sync': True, 'force': True, 'desc': '–ü–æ–ª–Ω–∞—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'},
            ]

            for test_case in test_cases:
                full_sync = test_case['full_sync']
                force = test_case['force']
                desc = test_case['desc']

                self.stdout.write(f"\nüß™ {desc}: full_sync={full_sync}, force={force}")

                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ views.py:395-402
                if stats['last_sync'] and not force:
                    from django.utils import timezone
                    time_since_last = timezone.now() - stats['last_sync']
                    seconds = int(time_since_last.total_seconds())

                    if seconds < 300:
                        self.stdout.write(self.style.WARNING(f"   ‚ùå –í–µ—Ä–Ω–µ—Ç 429 (–ø—Ä–æ—à–ª–æ {seconds}s < 300s)"))
                    else:
                        self.stdout.write(self.style.SUCCESS(f"   ‚úÖ –ü—Ä–æ–π–¥–µ—Ç (–ø—Ä–æ—à–ª–æ {seconds}s >= 300s)"))
                else:
                    if stats['last_sync']:
                        self.stdout.write(self.style.SUCCESS("   ‚úÖ –ü—Ä–æ–π–¥–µ—Ç (force=True –æ–±—Ö–æ–¥–∏—Ç cooldown)"))
                    else:
                        self.stdout.write(self.style.SUCCESS("   ‚úÖ –ü—Ä–æ–π–¥–µ—Ç (last_sync=None)"))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {e}"))

        # ============================================================================
        # –ò–¢–û–ì–ò
        # ============================================================================
        self.stdout.write(self.style.SUCCESS("\n\n" + "="*80))
        self.stdout.write(self.style.SUCCESS("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò"))
        self.stdout.write(self.style.SUCCESS("="*80))

        self.stdout.write("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:")
        self.stdout.write("   1. TriggerSyncSerializer –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        self.stdout.write("   2. SimplePrintSyncService.get_sync_stats() —Ä–∞–±–æ—Ç–∞–µ—Ç")
        self.stdout.write("   3. Production —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        self.stdout.write("   4. –õ–æ–≥–∏–∫–∞ cooldown —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞")

        self.stdout.write("\nüí° –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:")
        self.stdout.write("   –ó–∞–ø—É—Å—Ç–∏—Ç—å: docker exec factory_v3_backend python manage.py test_sync_cooldown")
        self.stdout.write("   –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã")

        self.stdout.write("\n" + "="*80 + "\n")
