"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SimplePrint API

–ó–∞–ø—É—Å–∫: docker exec factory_v3_backend python manage.py test apps.simpleprint.tests_auth_diagnostic
"""

import logging
from django.test import TestCase, Client
from django.contrib.auth.models import User
from rest_framework.authtoken.models import Token
from rest_framework.test import APIClient
from django.urls import reverse
from apps.simpleprint.models import SimplePrintSync

logger = logging.getLogger(__name__)


class SimplePrintAuthDiagnosticTest(TestCase):
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("\n" + "="*80)
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
        print("="*80)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123',
            email='test@example.com'
        )
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {self.user.username} (ID: {self.user.id})")

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        self.token = Token.objects.create(user=self.user)
        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {self.token.key[:20]}...")

        # –°–æ–∑–¥–∞–µ–º API client
        self.api_client = APIClient()
        print("‚úÖ API Client —Å–æ–∑–¥–∞–Ω")

        print("\n")

    def test_01_token_exists(self):
        """
        –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î
        """
        print("\n" + "="*80)
        print("–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
        print("="*80)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        token_exists = Token.objects.filter(key=self.token.key).exists()
        print(f"–¢–æ–∫–µ–Ω {self.token.key[:20]}... —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {token_exists}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        token_obj = Token.objects.get(key=self.token.key)
        print(f"–¢–æ–∫–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {token_obj.user.username}")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω: {token_obj.user.is_active}")

        self.assertTrue(token_exists)
        self.assertEqual(token_obj.user.id, self.user.id)
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def test_02_trigger_without_auth(self):
        """
        –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–ï–ó —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
        """
        print("\n" + "="*80)
        print("–¢–ï–°–¢ 2: –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–ï–ó —Ç–æ–∫–µ–Ω–∞")
        print("="*80)

        url = '/api/v1/simpleprint/sync/trigger/'
        print(f"üì° POST {url}")
        print(f"üîê –¢–æ–∫–µ–Ω: –ù–ï–¢")

        response = self.api_client.post(url, {'full_sync': False, 'force': True})

        print(f"üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {response.data if hasattr(response, 'data') else response.content}")

        self.assertEqual(response.status_code, 401)
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 401")

    def test_03_trigger_with_valid_auth(self):
        """
        –¢–µ—Å—Ç 3: –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –° –ö–û–†–†–ï–ö–¢–ù–´–ú —Ç–æ–∫–µ–Ω–æ–º (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 202 –∏–ª–∏ 429)
        """
        print("\n" + "="*80)
        print("–¢–ï–°–¢ 3: –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –° –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
        print("="*80)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        self.api_client.credentials(HTTP_AUTHORIZATION=f'Token {self.token.key}')

        url = '/api/v1/simpleprint/sync/trigger/'
        print(f"üì° POST {url}")
        print(f"üîê –¢–æ–∫–µ–Ω: Token {self.token.key[:20]}...")
        print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: full_sync=False, force=True")

        response = self.api_client.post(url, {'full_sync': False, 'force': True})

        print(f"üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {response.data if hasattr(response, 'data') else response.content}")

        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ 202 (–∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞), –ª–∏–±–æ 429 (cooldown)
        self.assertIn(response.status_code, [202, 429, 500])  # 500 –µ—Å–ª–∏ –Ω–µ—Ç SimplePrint API
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –° —Ç–æ–∫–µ–Ω–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è {response.status_code}")

    def test_04_trigger_with_invalid_token(self):
        """
        –¢–µ—Å—Ç 4: –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ú —Ç–æ–∫–µ–Ω–æ–º (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
        """
        print("\n" + "="*80)
        print("–¢–ï–°–¢ 4: –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
        print("="*80)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        invalid_token = 'invalid_token_12345678901234567890'
        self.api_client.credentials(HTTP_AUTHORIZATION=f'Token {invalid_token}')

        url = '/api/v1/simpleprint/sync/trigger/'
        print(f"üì° POST {url}")
        print(f"üîê –¢–æ–∫–µ–Ω: Token {invalid_token}")

        response = self.api_client.post(url, {'full_sync': False, 'force': True})

        print(f"üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {response.data if hasattr(response, 'data') else response.content}")

        self.assertEqual(response.status_code, 401)
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –° –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 401")

    def test_05_cooldown_mechanism(self):
        """
        –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ cooldown (2 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥)
        """
        print("\n" + "="*80)
        print("–¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ cooldown")
        print("="*80)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        self.api_client.credentials(HTTP_AUTHORIZATION=f'Token {self.token.key}')

        url = '/api/v1/simpleprint/sync/trigger/'

        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å force=True, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ cooldown)
        print(f"\nüì° –ü–ï–†–í–´–ô –ó–ê–ü–†–û–°: POST {url}")
        print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: full_sync=False, force=True")
        response1 = self.api_client.post(url, {'full_sync': False, 'force': True})
        print(f"üìã –°—Ç–∞—Ç—É—Å: {response1.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç: {response1.data if hasattr(response1, 'data') else response1.content}")

        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ (–ë–ï–ó force, –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 429)
        print(f"\nüì° –í–¢–û–†–û–ô –ó–ê–ü–†–û–° (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ): POST {url}")
        print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: full_sync=False, force=False")
        response2 = self.api_client.post(url, {'full_sync': False, 'force': False})
        print(f"üìã –°—Ç–∞—Ç—É—Å: {response2.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç: {response2.data if hasattr(response2, 'data') else response2.content}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª 429 (cooldown)
        if response1.status_code in [202, 500]:  # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª
            print("\nüîç –ê–ù–ê–õ–ò–ó:")
            print(f"   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {response1.status_code}")
            print(f"   –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {response2.status_code}")

            if response2.status_code == 429:
                print("‚úÖ Cooldown —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª 429")
            elif response2.status_code == 401:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª 401 –≤–º–µ—Å—Ç–æ 429!")
                print("   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–æ–∫–µ–Ω–æ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            else:
                print(f"‚ö†Ô∏è –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô –°–¢–ê–¢–£–°: {response2.status_code}")
        else:
            print(f"‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª: {response1.status_code}")
            print("   –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å cooldown")

    def test_06_check_production_token(self):
        """
        –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ production —Ç–æ–∫–µ–Ω–∞ –∏–∑ CLAUDE.md
        """
        print("\n" + "="*80)
        print("–¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ production —Ç–æ–∫–µ–Ω–∞")
        print("="*80)

        production_token = '0a8fee03bca2b530a15b1df44d38b304e3f57484'
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω: {production_token[:20]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token_exists = Token.objects.filter(key=production_token).exists()
        print(f"üìã –¢–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: {token_exists}")

        if token_exists:
            token = Token.objects.get(key=production_token)
            print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {token.user.username}")
            print(f"   Email: {token.user.email}")
            print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {token.user.is_active}")
            print(f"   –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {token.user.is_superuser}")
        else:
            print(f"‚ùå –¢–æ–∫–µ–Ω –ù–ï –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            print(f"   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É 401")
            print(f"\nüí° –†–ï–®–ï–ù–ò–ï:")
            print(f"   –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π:")
            print(f"   docker exec factory_v3_backend python manage.py shell -c \"")
            print(f"   from rest_framework.authtoken.models import Token")
            print(f"   from django.contrib.auth.models import User")
            print(f"   user = User.objects.first()")
            print(f"   Token.objects.get_or_create(user=user, key='{production_token}')")
            print(f"   \"")

        # –ù–µ –¥–µ–ª–∞–µ–º assert, –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º
        if not token_exists:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Production —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")


class SimplePrintCooldownDiagnosticTest(TestCase):
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–µ—Ö–∞–Ω–∏–∑–º–∞ cooldown
    """

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞"""
        self.user = User.objects.create_user(username='test', password='test')
        self.token = Token.objects.create(user=self.user)
        self.api_client = APIClient()
        self.api_client.credentials(HTTP_AUTHORIZATION=f'Token {self.token.key}')

    def test_cooldown_response_format(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ cooldown
        """
        print("\n" + "="*80)
        print("–¢–ï–°–¢: –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ cooldown")
        print("="*80)

        url = '/api/v1/simpleprint/sync/trigger/'

        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á—Ç–æ–±—ã –±—ã–ª last_sync
        SimplePrintSync.objects.create(
            status='success',
            total_files=100,
            synced_files=100
        )

        # –ó–∞–ø—Ä–æ—Å –ë–ï–ó force - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 429
        response = self.api_client.post(url, {'full_sync': False, 'force': False})

        print(f"üìã –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.data if hasattr(response, 'data') else response.content}")

        if response.status_code == 429:
            print("‚úÖ Cooldown –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 429")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.data.get('message', '–ù–ï–¢')}")
        elif response.status_code == 401:
            print("‚ùå –û–®–ò–ë–ö–ê: Cooldown –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –≤–º–µ—Å—Ç–æ 429!")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
