"""
–¢–µ—Å—Ç—ã SimplePrint API Endpoints
–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å REST API endpoints —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import pytest
import logging
from unittest.mock import patch, MagicMock
from rest_framework.test import APIClient
from rest_framework import status
from django.contrib.auth.models import User
from rest_framework.authtoken.models import Token
from apps.simpleprint.models import SimplePrintSync, SimplePrintFile, SimplePrintFolder

logger = logging.getLogger(__name__)


@pytest.mark.django_db
class TestSimplePrintAPI:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimplePrint REST API"""

    @pytest.fixture
    def api_client(self):
        """–°–æ–∑–¥–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        client = APIClient()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
        user = User.objects.create_user(username='testuser', password='testpass')
        token = Token.objects.create(user=user)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        client.credentials(HTTP_AUTHORIZATION=f'Token {token.key}')

        return client

    def test_01_trigger_sync_endpoint(self, api_client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 1: POST /api/v1/simpleprint/sync/trigger/
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
        """
        print("\n" + "="*80)
        print("üåê –¢–ï–°–¢ 1: POST /api/v1/simpleprint/sync/trigger/")
        print("="*80)

        try:
            url = '/api/v1/simpleprint/sync/trigger/'
            data = {
                'full_sync': False,
                'force': False
            }

            print(f"üì° –ó–∞–ø—Ä–æ—Å:")
            print(f"   - URL: {url}")
            print(f"   - Method: POST")
            print(f"   - Data: {data}")
            print(f"   - Headers: Authorization: Token ***")

            with patch('apps.simpleprint.tasks.sync_simpleprint_task') as mock_task:
                # –ú–æ–∫–∞–µ–º Celery task
                mock_async_result = MagicMock()
                mock_async_result.id = 'test-task-id-123'
                mock_task.delay.return_value = mock_async_result

                print(f"\nüß™ –ú–æ–∫: Celery task –≤–µ—Ä–Ω–µ—Ç task_id='test-task-id-123'")

                response = api_client.post(url, data, format='json')

                print(f"\nüì• –û—Ç–≤–µ—Ç API:")
                print(f"   - Status Code: {response.status_code}")
                print(f"   - Data: {response.json()}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∏
                assert response.status_code == status.HTTP_202_ACCEPTED, \
                    f"‚ùå FAIL: –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 202, –ø–æ–ª—É—á–µ–Ω {response.status_code}"

                response_data = response.json()
                assert 'task_id' in response_data, "‚ùå FAIL: –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç 'task_id'"
                assert response_data['status'] == 'started', \
                    f"‚ùå FAIL: status={response_data.get('status')}, –æ–∂–∏–¥–∞–ª—Å—è 'started'"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Celery task –±—ã–ª –≤—ã–∑–≤–∞–Ω
                assert mock_task.delay.called, "‚ùå FAIL: Celery task –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω"
                call_kwargs = mock_task.delay.call_args[1]
                assert call_kwargs['full_sync'] == False, "‚ùå FAIL: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä full_sync"

                print(f"\n‚úÖ PASS: Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   ‚úì –°—Ç–∞—Ç—É—Å 202 ACCEPTED")
                print(f"   ‚úì task_id –≤–æ–∑–≤—Ä–∞—â–µ–Ω: {response_data['task_id']}")
                print(f"   ‚úì Celery task –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/views.py")
            print(f"üìç –ú–µ—Ç–æ–¥: SimplePrintSyncViewSet.trigger()")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/views.py")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise

    def test_02_sync_status_endpoint(self, api_client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 2: GET /api/v1/simpleprint/sync/status/{task_id}/
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        """
        print("\n" + "="*80)
        print("üåê –¢–ï–°–¢ 2: GET /api/v1/simpleprint/sync/status/{task_id}/")
        print("="*80)

        try:
            task_id = 'test-task-id-456'
            url = f'/api/v1/simpleprint/sync/status/{task_id}/'

            print(f"üì° –ó–∞–ø—Ä–æ—Å:")
            print(f"   - URL: {url}")
            print(f"   - Method: GET")
            print(f"   - Task ID: {task_id}")

            with patch('apps.simpleprint.views.AsyncResult') as mock_async_result:
                # –ú–æ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏
                mock_result = MagicMock()
                mock_result.state = 'SUCCESS'
                mock_result.ready.return_value = True
                mock_result.successful.return_value = True
                mock_result.result = {
                    'sync_id': 1,
                    'status': 'success',
                    'total_files': 100,
                    'synced_files': 100,
                }
                mock_async_result.return_value = mock_result

                print(f"\nüß™ –ú–æ–∫: –ó–∞–¥–∞—á–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SUCCESS")

                response = api_client.get(url)

                print(f"\nüì• –û—Ç–≤–µ—Ç API:")
                print(f"   - Status Code: {response.status_code}")
                print(f"   - Data: {response.json()}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∏
                assert response.status_code == status.HTTP_200_OK, \
                    f"‚ùå FAIL: –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"

                response_data = response.json()
                assert 'state' in response_data, "‚ùå FAIL: –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç 'state'"
                assert response_data['state'] == 'SUCCESS', \
                    f"‚ùå FAIL: state={response_data.get('state')}, –æ–∂–∏–¥–∞–ª—Å—è 'SUCCESS'"
                assert response_data['ready'] is True, "‚ùå FAIL: ready != True"

                print(f"\n‚úÖ PASS: Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   ‚úì –°—Ç–∞—Ç—É—Å 200 OK")
                print(f"   ‚úì State: {response_data['state']}")
                print(f"   ‚úì Ready: {response_data['ready']}")
                print(f"   ‚úì Result –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/views.py")
            print(f"üìç –ú–µ—Ç–æ–¥: SimplePrintSyncViewSet.task_status()")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise

    def test_03_sync_stats_endpoint(self, api_client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 3: GET /api/v1/simpleprint/sync/stats/
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        print("\n" + "="*80)
        print("üåê –¢–ï–°–¢ 3: GET /api/v1/simpleprint/sync/stats/")
        print("="*80)

        try:
            url = '/api/v1/simpleprint/sync/stats/'

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            folder = SimplePrintFolder.objects.create(
                simpleprint_id=12345,
                name='Test Folder',
                depth=0,
                files_count=5,
                folders_count=0
            )

            for i in range(5):
                SimplePrintFile.objects.create(
                    simpleprint_id=f'file_{i}',
                    name=f'test_file_{i}.gcode',
                    folder=folder,
                    ext='gcode',
                    file_type='gcode',
                    size=1000000 * (i + 1)
                )

            print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:")
            print(f"   - –ü–∞–ø–æ–∫: 1")
            print(f"   - –§–∞–π–ª–æ–≤: 5")

            print(f"\nüì° –ó–∞–ø—Ä–æ—Å:")
            print(f"   - URL: {url}")
            print(f"   - Method: GET")

            response = api_client.get(url)

            print(f"\nüì• –û—Ç–≤–µ—Ç API:")
            print(f"   - Status Code: {response.status_code}")
            print(f"   - Data: {response.json()}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert response.status_code == status.HTTP_200_OK, \
                f"‚ùå FAIL: –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"

            response_data = response.json()
            assert 'total_folders' in response_data, "‚ùå FAIL: –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç 'total_folders'"
            assert 'total_files' in response_data, "‚ùå FAIL: –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç 'total_files'"

            assert response_data['total_folders'] == 1, \
                f"‚ùå FAIL: total_folders={response_data.get('total_folders')}, –æ–∂–∏–¥–∞–ª–æ—Å—å 1"
            assert response_data['total_files'] == 5, \
                f"‚ùå FAIL: total_files={response_data.get('total_files')}, –æ–∂–∏–¥–∞–ª–æ—Å—å 5"

            print(f"\n‚úÖ PASS: Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   ‚úì –°—Ç–∞—Ç—É—Å 200 OK")
            print(f"   ‚úì –ü–∞–ø–æ–∫: {response_data['total_folders']}")
            print(f"   ‚úì –§–∞–π–ª–æ–≤: {response_data['total_files']}")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/views.py")
            print(f"üìç –ú–µ—Ç–æ–¥: SimplePrintSyncViewSet.stats()")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise

    def test_04_files_list_endpoint(self, api_client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 4: GET /api/v1/simpleprint/files/
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        """
        print("\n" + "="*80)
        print("üåê –¢–ï–°–¢ 4: GET /api/v1/simpleprint/files/")
        print("="*80)

        try:
            url = '/api/v1/simpleprint/files/'

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            files_count = SimplePrintFile.objects.count()

            print(f"üìä –§–∞–π–ª–æ–≤ –≤ –ë–î: {files_count}")

            print(f"\nüì° –ó–∞–ø—Ä–æ—Å:")
            print(f"   - URL: {url}")
            print(f"   - Method: GET")

            response = api_client.get(url)

            print(f"\nüì• –û—Ç–≤–µ—Ç API:")
            print(f"   - Status Code: {response.status_code}")
            response_data = response.json()
            print(f"   - Results: {len(response_data.get('results', []))} items")

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert response.status_code == status.HTTP_200_OK, \
                f"‚ùå FAIL: –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"

            assert 'results' in response_data, "‚ùå FAIL: –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç 'results'"

            results = response_data['results']
            if len(results) > 0:
                first_file = results[0]
                print(f"\nüìÑ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª:")
                print(f"   - ID: {first_file.get('id')}")
                print(f"   - Name: {first_file.get('name')}")
                print(f"   - Size: {first_file.get('size_display')}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                assert 'id' in first_file, "‚ùå FAIL: –í —Ñ–∞–π–ª–µ –Ω–µ—Ç 'id'"
                assert 'name' in first_file, "‚ùå FAIL: –í —Ñ–∞–π–ª–µ –Ω–µ—Ç 'name'"
                assert 'size' in first_file, "‚ùå FAIL: –í —Ñ–∞–π–ª–µ –Ω–µ—Ç 'size'"

            print(f"\n‚úÖ PASS: Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   ‚úì –°—Ç–∞—Ç—É—Å 200 OK")
            print(f"   ‚úì –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ñ–∞–π–ª–æ–≤")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/views.py")
            print(f"üìç ViewSet: SimplePrintFileViewSet")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
