"""
–¢–µ—Å—Ç—ã SimplePrint Sync Service
–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import pytest
import logging
from unittest.mock import patch, MagicMock
from django.utils import timezone
from apps.simpleprint.services import SimplePrintSyncService
from apps.simpleprint.models import SimplePrintFile, SimplePrintFolder, SimplePrintSync

logger = logging.getLogger(__name__)


@pytest.mark.django_db
class TestSimplePrintSync:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimplePrint —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""

    @pytest.fixture
    def service(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return SimplePrintSyncService()

    @pytest.fixture
    def mock_api_response(self):
        """–ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ API —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏"""
        return {
            'folders': [
                {
                    'id': 16787,
                    'name': '401_500',
                    'parent_id': None,
                },
                {
                    'id': 17670,
                    'name': '402-40441',
                    'parent_id': 16787,
                }
            ],
            'files': [
                {
                    'id': 'file_123',
                    'name': '402-40441_19k_13h3m_365G_BLACK.gcode',
                    'folder': 17670,
                    'ext': 'gcode',
                    'size': 365000000,
                    'created': '2024-01-15T10:30:00Z',
                }
            ]
        }

    def test_01_create_sync_log(self, service):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: SimplePrintSync.objects.create()
        """
        print("\n" + "="*80)
        print("üìù –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("="*80)

        try:
            print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ SimplePrintSync –∑–∞–ø–∏—Å–∏...")
            print(f"   - status: 'pending'")
            print(f"   - started_at: {timezone.now()}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_log = SimplePrintSync.objects.create(
                status='pending',
                started_at=timezone.now()
            )

            print(f"\n‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:")
            print(f"   - ID: {sync_log.id}")
            print(f"   - Status: {sync_log.status}")
            print(f"   - Started: {sync_log.started_at}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ –ë–î
            assert sync_log.id is not None, "‚ùå FAIL: sync_log.id is None"
            assert sync_log.status == 'pending', f"‚ùå FAIL: status={sync_log.status}, expected='pending'"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
            from_db = SimplePrintSync.objects.get(id=sync_log.id)
            assert from_db is not None, "‚ùå FAIL: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ë–î"

            print(f"\n‚úÖ PASS: SimplePrintSync –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/models.py")
            print(f"üìç –ú–æ–¥–µ–ª—å: SimplePrintSync")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/models.py")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise

    @patch('apps.simpleprint.services.SimplePrintClient')
    def test_02_fetch_all_data(self, mock_client_class, service, mock_api_response):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: fetch_all_files_and_folders_recursively()
        """
        print("\n" + "="*80)
        print("üì¶ –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ SimplePrint API")
        print("="*80)

        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
            mock_client = MagicMock()
            mock_client.get_files_and_folders.return_value = mock_api_response
            mock_client_class.return_value = mock_client

            print(f"üß™ –ú–æ–∫ API –æ—Ç–≤–µ—Ç:")
            print(f"   - –ü–∞–ø–æ–∫: {len(mock_api_response['folders'])}")
            print(f"   - –§–∞–π–ª–æ–≤: {len(mock_api_response['files'])}")

            print(f"\nüì° –í—ã–∑–æ–≤: service.fetch_all_files_and_folders_recursively()")

            all_data = service.fetch_all_files_and_folders_recursively()

            print(f"\nüì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"   - –¢–∏–ø: {type(all_data).__name__}")

            if isinstance(all_data, dict):
                print(f"   - –ö–ª—é—á–∏: {list(all_data.keys())}")
                if 'folders' in all_data:
                    print(f"   - –ü–∞–ø–æ–∫: {len(all_data['folders'])}")
                    for folder in all_data['folders'][:3]:
                        print(f"      ‚Ä¢ {folder.get('name', 'N/A')} (id={folder.get('id', 'N/A')})")

                if 'files' in all_data:
                    print(f"   - –§–∞–π–ª–æ–≤: {len(all_data['files'])}")
                    for file in all_data['files'][:3]:
                        print(f"      ‚Ä¢ {file.get('name', 'N/A')} (id={file.get('id', 'N/A')})")

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert all_data is not None, "‚ùå FAIL: all_data is None"
            assert isinstance(all_data, dict), f"‚ùå FAIL: all_data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è dict: {type(all_data)}"

            print(f"\n‚úÖ PASS: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ API")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/services.py")
            print(f"üìç –ú–µ—Ç–æ–¥: fetch_all_files_and_folders_recursively()")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/services.py")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise

    @patch('apps.simpleprint.services.SimplePrintClient')
    def test_03_save_folders(self, mock_client_class, service, mock_api_response):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –ë–î
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: _save_folders_to_db()
        """
        print("\n" + "="*80)
        print("üíæ –¢–ï–°–¢ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("="*80)

        try:
            folders_data = mock_api_response['folders']

            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–∞–ø–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
            for folder in folders_data:
                print(f"   ‚Ä¢ ID: {folder['id']}, –ò–º—è: {folder['name']}, Parent: {folder.get('parent_id', 'None')}")

            print(f"\nüíæ –í—ã–∑–æ–≤: service._save_folders_to_db(folders_data)")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–ø–∫–∏
            saved_count = 0
            for folder_data in folders_data:
                folder, created = SimplePrintFolder.objects.update_or_create(
                    simpleprint_id=folder_data['id'],
                    defaults={
                        'name': folder_data['name'],
                        'depth': 0,  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
                        'files_count': 0,
                        'folders_count': 0,
                        'last_synced_at': timezone.now(),
                    }
                )
                saved_count += 1
                print(f"   {'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞'}: {folder.name} (id={folder.id})")

            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î:")
            db_count = SimplePrintFolder.objects.count()
            print(f"   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count}")
            print(f"   - –í –ë–î: {db_count}")

            assert db_count == len(folders_data), f"‚ùå FAIL: –í –ë–î {db_count} –ø–∞–ø–æ–∫, –æ–∂–∏–¥–∞–ª–æ—Å—å {len(folders_data)}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            for folder_data in folders_data:
                folder = SimplePrintFolder.objects.get(simpleprint_id=folder_data['id'])
                assert folder.name == folder_data['name'], f"‚ùå FAIL: –ò–º—è –ø–∞–ø–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
                print(f"   ‚úì –ü–∞–ø–∫–∞ {folder.name} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            print(f"\n‚úÖ PASS: –í—Å–µ –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/services.py")
            print(f"üìç –ú–µ—Ç–æ–¥: _save_folders_to_db()")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–ø–æ–∫")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/models.py –∏–ª–∏ services.py")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise

    @patch('apps.simpleprint.services.SimplePrintClient')
    def test_04_save_files(self, mock_client_class, service, mock_api_response):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ë–î
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: _save_files_to_db()
        """
        print("\n" + "="*80)
        print("üíæ –¢–ï–°–¢ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("="*80)

        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–∞
            folder = SimplePrintFolder.objects.create(
                simpleprint_id=17670,
                name='402-40441',
                depth=1,
                files_count=0,
                folders_count=0,
                last_synced_at=timezone.now()
            )
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder.name} (id={folder.id})")

            files_data = mock_api_response['files']

            print(f"\nüìä –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
            for file in files_data:
                print(f"   ‚Ä¢ ID: {file['id']}, –ò–º—è: {file['name']}")
                print(f"     –ü–∞–ø–∫–∞: {file.get('folder', 'None')}, –†–∞–∑–º–µ—Ä: {file.get('size', 0)} bytes")

            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")

            saved_count = 0
            for file_data in files_data:
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
                folder_obj = None
                if file_data.get('folder'):
                    try:
                        folder_obj = SimplePrintFolder.objects.get(simpleprint_id=file_data['folder'])
                    except SimplePrintFolder.DoesNotExist:
                        print(f"   ‚ö†Ô∏è  –ü–∞–ø–∫–∞ {file_data['folder']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                file, created = SimplePrintFile.objects.update_or_create(
                    simpleprint_id=file_data['id'],
                    defaults={
                        'name': file_data['name'],
                        'folder': folder_obj,
                        'ext': file_data.get('ext', ''),
                        'file_type': file_data.get('ext', 'unknown'),
                        'size': file_data.get('size', 0),
                        'size_display': f"{file_data.get('size', 0) / 1024 / 1024:.2f} MB",
                        'created_at_sp': file_data.get('created', timezone.now()),
                        'last_synced_at': timezone.now(),
                    }
                )
                saved_count += 1
                print(f"   {'‚úÖ –°–æ–∑–¥–∞–Ω' if created else 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω'}: {file.name}")

            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î:")
            db_count = SimplePrintFile.objects.count()
            print(f"   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count}")
            print(f"   - –í –ë–î: {db_count}")

            assert db_count == len(files_data), f"‚ùå FAIL: –í –ë–î {db_count} —Ñ–∞–π–ª–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å {len(files_data)}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —Å –ø–∞–ø–∫–∞–º–∏
            for file_data in files_data:
                file = SimplePrintFile.objects.get(simpleprint_id=file_data['id'])
                assert file.name == file_data['name'], f"‚ùå FAIL: –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"

                if file_data.get('folder'):
                    assert file.folder is not None, f"‚ùå FAIL: –§–∞–π–ª –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø–∞–ø–∫–æ–π"
                    assert file.folder.simpleprint_id == file_data['folder'], f"‚ùå FAIL: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–∞–ø–∫–∞"
                    print(f"   ‚úì –§–∞–π–ª {file.name} —Å–≤—è–∑–∞–Ω —Å –ø–∞–ø–∫–æ–π {file.folder.name}")
                else:
                    print(f"   ‚úì –§–∞–π–ª {file.name} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

            print(f"\n‚úÖ PASS: –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/services.py")
            print(f"üìç –ú–µ—Ç–æ–¥: _save_files_to_db()")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/models.py –∏–ª–∏ services.py")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise

    @patch('apps.simpleprint.services.SimplePrintClient')
    def test_05_full_sync(self, mock_client_class, service, mock_api_response):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 5: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (end-to-end)
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: sync_all_files()
        """
        print("\n" + "="*80)
        print("üîÑ –¢–ï–°–¢ 5: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (E2E —Ç–µ—Å—Ç)")
        print("="*80)

        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
            mock_client = MagicMock()
            mock_client.get_files_and_folders.return_value = mock_api_response
            mock_client_class.return_value = mock_client

            print(f"üß™ –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ:")
            print(f"   - –ü–∞–ø–æ–∫: {len(mock_api_response['folders'])}")
            print(f"   - –§–∞–π–ª–æ–≤: {len(mock_api_response['files'])}")

            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
            print(f"üì° –í—ã–∑–æ–≤: service.sync_all_files(full_sync=False)")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            sync_log = service.sync_all_files(full_sync=False)

            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            print(f"   - ID –∑–∞–ø–∏—Å–∏: {sync_log.id}")
            print(f"   - –°—Ç–∞—Ç—É—Å: {sync_log.status}")
            print(f"   - –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {sync_log.total_folders}")
            print(f"   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–ø–æ–∫: {sync_log.synced_folders}")
            print(f"   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {sync_log.total_files}")
            print(f"   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {sync_log.synced_files}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert sync_log is not None, "‚ùå FAIL: sync_log is None"
            assert sync_log.status in ['success', 'completed'], f"‚ùå FAIL: status={sync_log.status}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î
            folders_count = SimplePrintFolder.objects.count()
            files_count = SimplePrintFile.objects.count()

            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   - –ü–∞–ø–æ–∫ –≤ –ë–î: {folders_count}")
            print(f"   - –§–∞–π–ª–æ–≤ –≤ –ë–î: {files_count}")

            assert folders_count > 0, "‚ùå FAIL: –ü–∞–ø–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î"
            assert files_count > 0, "‚ùå FAIL: –§–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î"

            print(f"\n‚úÖ PASS: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   ‚úì SimplePrintSync –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞")
            print(f"   ‚úì –ü–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            print(f"   ‚úì –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            print(f"   ‚úì –°–≤—è–∑–∏ –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/services.py")
            print(f"üìç –ú–µ—Ç–æ–¥: sync_all_files()")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/services.py")

            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
