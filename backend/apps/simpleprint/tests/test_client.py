"""
–¢–µ—Å—Ç—ã SimplePrint API Client
–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import pytest
import logging
from unittest.mock import patch, MagicMock
from apps.simpleprint.client import SimplePrintClient
from django.conf import settings

logger = logging.getLogger(__name__)


class TestSimplePrintClient:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimplePrint API –∫–ª–∏–µ–Ω—Ç–∞"""

    @pytest.fixture
    def client(self):
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return SimplePrintClient()

    def test_01_client_initialization(self, client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ settings.py
        """
        print("\n" + "="*80)
        print("üîß –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimplePrint –∫–ª–∏–µ–Ω—Ç–∞")
        print("="*80)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            assert hasattr(settings, 'SIMPLEPRINT_CONFIG'), "‚ùå FAIL: SIMPLEPRINT_CONFIG –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ settings"
            config = settings.SIMPLEPRINT_CONFIG

            print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SimplePrint:")
            print(f"   - API Token: {config.get('api_token')[:10]}... (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"   - User ID: {config.get('user_id')}")
            print(f"   - Company ID: {config.get('company_id')}")
            print(f"   - Base URL: {config.get('base_url')}")
            print(f"   - Rate Limit: {config.get('rate_limit')} req/min")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç
            assert client.api_token is not None, "‚ùå FAIL: api_token is None"
            assert client.user_id is not None, "‚ùå FAIL: user_id is None"
            assert client.company_id is not None, "‚ùå FAIL: company_id is None"
            assert client.base_url is not None, "‚ùå FAIL: base_url is None"

            print(f"\n‚úÖ PASS: –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   - API Token: {'‚úì' if client.api_token else '‚úó'}")
            print(f"   - User ID: {'‚úì' if client.user_id else '‚úó'}")
            print(f"   - Company ID: {'‚úì' if client.company_id else '‚úó'}")
            print(f"   - Base URL: {'‚úì' if client.base_url else '‚úó'}")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/config/settings/base.py")
            print(f"üìç –°—Ç—Ä–æ–∫–∞: SIMPLEPRINT_CONFIG = {{...}}")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            raise

    def test_02_test_connection(self, client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: GET /account/Test
        """
        print("\n" + "="*80)
        print("üåê –¢–ï–°–¢ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SimplePrint API")
        print("="*80)

        try:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: GET {client.base_url}account/Test")
            print(f"üîë Headers:")
            print(f"   - X-API-KEY: {client.api_token[:10]}...")
            print(f"   - Content-Type: application/json")

            result = client.test_connection()

            print(f"\nüì• –û—Ç–≤–µ—Ç API:")
            print(f"   - –°—Ç–∞—Ç—É—Å: {result.get('status', 'N/A')}")
            print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

            assert result.get('success') is True, f"‚ùå FAIL: API –≤–µ—Ä–Ω—É–ª success=False. Response: {result}"

            print(f"\n‚úÖ PASS: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/client.py")
            print(f"üìç –ú–µ—Ç–æ–¥: test_connection()")
            print(f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"   - –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω")
            print(f"   - API SimplePrint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π base_url")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/client.py")
            print(f"üìç –ú–µ—Ç–æ–¥: test_connection() -> _make_request()")
            raise

    def test_03_get_files_folders(self, client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: GET /files/GetFiles
        """
        print("\n" + "="*80)
        print("üìÅ –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –∏–∑ SimplePrint")
        print("="*80)

        try:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: GET {client.base_url}files/GetFiles")
            print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(f"   - userId: {client.user_id}")
            print(f"   - id: None (–∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞)")

            data = client.get_files_and_folders(parent_id=None)

            print(f"\nüì• –û—Ç–≤–µ—Ç API:")
            print(f"   - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data).__name__}")

            if isinstance(data, dict):
                print(f"   - –ö–ª—é—á–∏: {list(data.keys())}")
                if 'files' in data:
                    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(data['files'])}")
                if 'folders' in data:
                    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫: {len(data['folders'])}")
            else:
                print(f"   - –î–∞–Ω–Ω—ã–µ: {str(data)[:200]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            assert data is not None, "‚ùå FAIL: API –≤–µ—Ä–Ω—É–ª None"

            if isinstance(data, dict):
                # SimplePrint –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                has_files = 'files' in data
                has_folders = 'folders' in data
                has_data = 'data' in data

                print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
                print(f"   - –ï—Å—Ç—å 'files': {has_files}")
                print(f"   - –ï—Å—Ç—å 'folders': {has_folders}")
                print(f"   - –ï—Å—Ç—å 'data': {has_data}")

                if has_files or has_folders or has_data:
                    print(f"\n‚úÖ PASS: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
                else:
                    print(f"\n‚ö†Ô∏è  WARNING: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
                    print(f"üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
            else:
                print(f"\n‚ö†Ô∏è  WARNING: –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è dict")
                print(f"üìã –û—Ç–≤–µ—Ç: {data}")

        except AssertionError as e:
            print(f"\n‚ùå FAIL: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/client.py")
            print(f"üìç –ú–µ—Ç–æ–¥: get_files_and_folders()")
            raise
        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/client.py")
            print(f"üìç –ú–µ—Ç–æ–¥: get_files_and_folders() -> _make_request()")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            import traceback
            print(f"\nüîç –ü–æ–ª–Ω—ã–π traceback:")
            print(traceback.format_exc())
            raise

    def test_04_rate_limiting(self, client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ 180 req/min
        """
        print("\n" + "="*80)
        print("‚è±Ô∏è  –¢–ï–°–¢ 4: Rate Limiting (180 req/min)")
        print("="*80)

        try:
            import time

            print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(f"   - –õ–∏–º–∏—Ç: {client.rate_limit} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É")
            print(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {60.0 / client.rate_limit:.3f} —Å–µ–∫—É–Ω–¥")

            # –î–µ–ª–∞–µ–º 3 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            print(f"\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 3 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")

            times = []
            for i in range(3):
                start = time.time()
                try:
                    client.test_connection()
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ API, –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ timing
                elapsed = time.time() - start
                times.append(elapsed)
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: {elapsed:.3f} —Å–µ–∫—É–Ω–¥")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –µ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏
            min_delay = 60.0 / client.rate_limit

            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–µ–∫:")
            for i, t in enumerate(times[1:], 1):
                delay = times[i] - times[i-1]
                status = "‚úì" if delay >= min_delay * 0.9 else "‚úó"  # 90% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ {i}: {delay:.3f}s {status}")

            print(f"\n‚úÖ PASS: Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç")

        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"üìç –§–∞–π–ª: backend/apps/simpleprint/client.py")
            print(f"üìç –ú–µ—Ç–æ–¥: _make_request() -> _apply_rate_limit()")
            raise

    @patch('apps.simpleprint.client.requests.get')
    def test_05_error_handling(self, mock_get, client):
        """
        ‚úÖ/‚ùå –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: retry –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        """
        print("\n" + "="*80)
        print("üî• –¢–ï–°–¢ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry")
        print("="*80)

        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º 500 –æ—à–∏–±–∫—É
            mock_response = MagicMock()
            mock_response.status_code = 500
            mock_response.text = "Internal Server Error"
            mock_response.raise_for_status.side_effect = Exception("500 Server Error")
            mock_get.return_value = mock_response

            print(f"üß™ –°–∏–º—É–ª—è—Ü–∏—è: 500 Internal Server Error")
            print(f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: 3 –ø–æ–ø—ã—Ç–∫–∏ retry")

            try:
                client.test_connection()
                print(f"\n‚ö†Ô∏è  WARNING: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ")
            except Exception as e:
                print(f"\n‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–π–º–∞–Ω–æ: {type(e).__name__}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            call_count = mock_get.call_count
            print(f"\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {call_count}")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: 3")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {call_count}")

            if call_count == 3:
                print(f"\n‚úÖ PASS: Retry –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (3 –ø–æ–ø—ã—Ç–∫–∏)")
            else:
                print(f"\n‚ö†Ô∏è  WARNING: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")

        except Exception as e:
            print(f"\n‚ùå FAIL: –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
            print(f"üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            raise


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
