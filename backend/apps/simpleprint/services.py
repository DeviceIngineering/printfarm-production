"""
SimplePrint Synchronization Service

–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –∏–∑ SimplePrint –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î.
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional
from django.db import transaction
from django.utils import timezone
from django.utils.dateparse import parse_datetime

from .client import SimplePrintFilesClient, SimplePrintAPIError
from .models import SimplePrintFolder, SimplePrintFile, SimplePrintSync

logger = logging.getLogger(__name__)


class SimplePrintSyncService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SimplePrint
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.client = SimplePrintFilesClient()

    def sync_all_files(self, full_sync: bool = False) -> SimplePrintSync:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ SimplePrint

        Args:
            full_sync: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (—É–¥–∞–ª–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã)

        Returns:
            –û–±—ä–µ–∫—Ç SimplePrintSync —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_log = SimplePrintSync.objects.create(status='pending')

        try:
            logger.info("Starting SimplePrint synchronization")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not self.client.test_connection():
                raise SimplePrintAPIError("Connection test failed")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            logger.info("Fetching all files and folders from SimplePrint...")
            data = self.client.get_all_files_recursive()

            all_folders = data['all_folders']
            all_files = data['all_files']

            sync_log.total_folders = len(all_folders)
            sync_log.total_files = len(all_files)
            sync_log.save()

            logger.info(f"Fetched {len(all_folders)} folders and {len(all_files)} files")

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫–∏
            logger.info("Synchronizing folders...")
            synced_folders = self._sync_folders(all_folders)
            sync_log.synced_folders = synced_folders
            sync_log.save()

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã (–ø–µ—Ä–µ–¥–∞–µ–º sync_log –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
            logger.info("Synchronizing files...")
            synced_files = self._sync_files(all_files, sync_log)
            sync_log.synced_files = synced_files
            sync_log.save()

            # –£–¥–∞–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ full_sync)
            deleted_files = 0
            if full_sync:
                logger.info("Cleaning up deleted files...")
                deleted_files = self._cleanup_deleted_files(all_files)
                sync_log.deleted_files = deleted_files
                sync_log.save()

            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            sync_log.status = 'success'
            sync_log.finished_at = timezone.now()
            sync_log.save()

            logger.info(
                f"Synchronization completed: "
                f"{synced_folders} folders, {synced_files} files, {deleted_files} deleted"
            )

            return sync_log

        except Exception as e:
            logger.error(f"Synchronization failed: {e}", exc_info=True)

            sync_log.status = 'failed'
            sync_log.error_details = str(e)
            sync_log.finished_at = timezone.now()
            sync_log.save()

            raise

    def _sync_folders(self, folders_data: List[Dict]) -> int:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫–∏

        Args:
            folders_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏–∑ API

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        """
        synced_count = 0

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (depth)
        folders_data_sorted = sorted(folders_data, key=lambda x: x.get('depth', 0))

        for folder_data in folders_data_sorted:
            try:
                self._sync_folder(folder_data)
                synced_count += 1

                if synced_count % 50 == 0:
                    logger.info(f"Synced {synced_count}/{len(folders_data)} folders")

            except Exception as e:
                logger.error(f"Failed to sync folder {folder_data.get('id')}: {e}")

        return synced_count

    def _sync_folder(self, folder_data: Dict) -> SimplePrintFolder:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –ø–∞–ø–∫—É

        Args:
            folder_data: –î–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –∏–∑ API

        Returns:
            –û–±—ä–µ–∫—Ç SimplePrintFolder
        """
        sp_id = folder_data['id']
        name = folder_data['name']
        depth = folder_data.get('depth', 0)
        parent_id = folder_data.get('parent_folder_id', 0)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
        parent = None
        if parent_id and parent_id != 0:
            try:
                parent = SimplePrintFolder.objects.get(simpleprint_id=parent_id)
            except SimplePrintFolder.DoesNotExist:
                logger.warning(f"Parent folder {parent_id} not found for folder {sp_id}")

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_at_sp = parse_datetime(folder_data['created'])
        if not created_at_sp:
            created_at_sp = timezone.now()

        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ org
        org = folder_data.get('org', {})
        items = folder_data.get('items', {})

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–ø–∫—É
        folder, created = SimplePrintFolder.objects.update_or_create(
            simpleprint_id=sp_id,
            defaults={
                'name': name,
                'parent': parent,
                'depth': depth,
                'files_count': items.get('files', 0),
                'folders_count': items.get('folders', 0),
                'can_view': org.get('view', True),
                'can_upload': org.get('upload', True),
                'can_modify': org.get('modify', True),
                'can_download': org.get('download', True),
                'created_at_sp': created_at_sp,
                'last_synced_at': timezone.now(),
            }
        )

        action = "Created" if created else "Updated"
        logger.debug(f"{action} folder: {name} (ID: {sp_id})")

        return folder

    def _sync_files(self, files_data: List[Dict], sync_log: Optional[SimplePrintSync] = None) -> int:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

        Args:
            files_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ API
            sync_log: –û–±—ä–µ–∫—Ç SimplePrintSync –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        synced_count = 0

        try:
            for file_data in files_data:
                try:
                    self._sync_file(file_data)
                    synced_count += 1

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Ñ–∞–π–ª–æ–≤
                    if synced_count % 50 == 0:
                        logger.info(f"üìÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {synced_count}/{len(files_data)} —Ñ–∞–π–ª–æ–≤")
                        if sync_log:
                            sync_log.synced_files = synced_count
                            sync_log.save()

                except Exception as e:
                    logger.error(f"Failed to sync file {file_data.get('id')}: {e}")

        except KeyboardInterrupt:
            logger.warning(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Ñ–∞–π–ª–æ–≤.")
            if sync_log:
                sync_log.synced_files = synced_count
                sync_log.status = 'partial'
                sync_log.error_details = 'Interrupted by user'
                sync_log.finished_at = timezone.now()
                sync_log.save()
            raise

        return synced_count

    def _sync_file(self, file_data: Dict) -> SimplePrintFile:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª

        Args:
            file_data: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –∏–∑ API

        Returns:
            –û–±—ä–µ–∫—Ç SimplePrintFile
        """
        sp_id = file_data['id']
        name = file_data['name']

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_at_sp = parse_datetime(file_data['created'])
        if not created_at_sp:
            created_at_sp = timezone.now()

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É (—Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ, –±–µ–∑ –ø–∞–ø–∫–∏)
        folder = None
        # SimplePrint API –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç parent_folder_id –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
        # –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_obj, created = SimplePrintFile.objects.update_or_create(
            simpleprint_id=sp_id,
            defaults={
                'name': name,
                'folder': folder,
                'ext': file_data.get('ext', ''),
                'file_type': file_data.get('type', ''),
                'size': file_data.get('size', 0),
                'zip_printable': file_data.get('zipPrintable', False),
                'zip_no_model': file_data.get('zipNoModel', False),
                'user_id': file_data.get('user_id'),
                'thumbnail': file_data.get('thumbnail', 0),
                'for_printer_models': file_data.get('forPrinterModels', []),
                'for_printers': file_data.get('forPrinters', []),
                'tags': file_data.get('tags', {}),
                'print_data': file_data.get('printData', {}),
                'cost_data': file_data.get('cost', {}),
                'gcode_analysis': file_data.get('gcodeAnalysis', {}),
                'custom_fields': file_data.get('customFields', []),
                'created_at_sp': created_at_sp,
                'last_synced_at': timezone.now(),
            }
        )

        action = "Created" if created else "Updated"
        logger.debug(f"{action} file: {name} (ID: {sp_id})")

        return file_obj

    def _cleanup_deleted_files(self, current_files: List[Dict]) -> int:
        """
        –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ SimplePrint

        Args:
            current_files: –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ API

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        current_file_ids = {f['id'] for f in current_files}

        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –≤ –ë–î –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ SimplePrint
        deleted_files = SimplePrintFile.objects.exclude(simpleprint_id__in=current_file_ids)
        deleted_count = deleted_files.count()

        if deleted_count > 0:
            logger.info(f"Deleting {deleted_count} files that are no longer in SimplePrint")
            deleted_files.delete()

        return deleted_count

    def get_sync_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        last_sync = SimplePrintSync.objects.filter(status='success').first()

        return {
            'total_folders': SimplePrintFolder.objects.count(),
            'total_files': SimplePrintFile.objects.count(),
            'last_sync': last_sync.started_at if last_sync else None,
            'last_sync_status': last_sync.status if last_sync else None,
            'last_sync_duration': last_sync.get_duration() if last_sync else None,
        }
