"""
SimplePrint API Client

–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SimplePrint API.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç rate limiting –∏ retry –ª–æ–≥–∏–∫—É.
"""

import time
import logging
import requests
from typing import Dict, List, Optional
from django.conf import settings
from django.core.cache import cache

logger = logging.getLogger(__name__)


class SimplePrintAPIError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ SimplePrint API"""
    pass


class SimplePrintFilesClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ –≤ SimplePrint API
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        config = settings.SIMPLEPRINT_CONFIG

        self.base_url = config['base_url'].rstrip('/')
        self.api_token = config['api_token']
        self.rate_limit = config['rate_limit']  # requests per minute

        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.request_delay = 60.0 / self.rate_limit  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

        self.retry_attempts = 2  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        self.timeout = 10  # –£–º–µ–Ω—å—à–∏–ª–∏ timeout –¥–æ 10 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 30)

        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è rate limiting
        self._last_request_time = 0

    def _get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        return {
            'X-API-KEY': self.api_token,
            'Accept': 'application/json',
        }

    def _rate_limit(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å rate limiting"""
        current_time = time.time()
        time_since_last_request = current_time - self._last_request_time

        if time_since_last_request < self.request_delay:
            sleep_time = self.request_delay - time_since_last_request
            logger.debug(f"Rate limiting: sleeping for {sleep_time:.2f} seconds")
            time.sleep(sleep_time)

        self._last_request_time = time.time()

    def _make_request(
        self,
        method: str,
        endpoint: str,
        params: Optional[Dict] = None,
        data: Optional[Dict] = None,
        retry_count: int = 0
    ) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π

        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST)
            endpoint: API endpoint
            params: Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
            retry_count: –¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏)

        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è

        Raises:
            SimplePrintAPIError: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
        """
        # –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
        self._rate_limit()

        url = f"{self.base_url}/{endpoint}"
        headers = self._get_headers()

        try:
            logger.debug(f"{method} {url} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{self.retry_attempts})")

            if method == 'GET':
                response = requests.get(url, headers=headers, params=params, timeout=self.timeout)
            elif method == 'POST':
                response = requests.post(url, headers=headers, json=data, timeout=self.timeout)
            else:
                raise SimplePrintAPIError(f"Unsupported HTTP method: {method}")

            response.raise_for_status()

            data = response.json()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ SimplePrint
            if not data.get('status', False):
                error_message = data.get('message', 'Unknown error')
                logger.error(f"SimplePrint API error: {error_message}")
                raise SimplePrintAPIError(f"API returned error: {error_message}")

            return data

        except requests.exceptions.Timeout:
            logger.warning(f"Request timeout for {url}")
            if retry_count < self.retry_attempts - 1:
                return self._make_request(method, endpoint, params, data, retry_count + 1)
            raise SimplePrintAPIError(f"Request timeout after {self.retry_attempts} attempts")

        except requests.exceptions.HTTPError as e:
            logger.error(f"HTTP error {e.response.status_code}: {e.response.text}")
            if retry_count < self.retry_attempts - 1 and e.response.status_code >= 500:
                # Retry —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫
                time.sleep(2 ** retry_count)  # Exponential backoff
                return self._make_request(method, endpoint, params, data, retry_count + 1)
            raise SimplePrintAPIError(f"HTTP error {e.response.status_code}: {e.response.text}")

        except requests.exceptions.RequestException as e:
            logger.error(f"Request error: {e}")
            if retry_count < self.retry_attempts - 1:
                time.sleep(2 ** retry_count)  # Exponential backoff
                return self._make_request(method, endpoint, params, data, retry_count + 1)
            raise SimplePrintAPIError(f"Request failed: {e}")

    def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API

        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            response = self._make_request('GET', 'account/Test')
            return response.get('status', False)
        except Exception as e:
            logger.error(f"Connection test failed: {e}")
            return False

    def get_files_and_folders(self, parent_folder_id: Optional[int] = None) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫

        Args:
            parent_folder_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏ (None = –∫–æ—Ä–µ–Ω—å)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'files' –∏ 'folders'
        """
        params = {}
        if parent_folder_id is not None:
            params['f'] = parent_folder_id  # SimplePrint API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'f'

        # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç (–µ—Å–ª–∏ Redis –¥–æ—Å—Ç—É–ø–µ–Ω)
        cache_key = f'simpleprint_files_folders_{parent_folder_id}'
        try:
            cached_data = cache.get(cache_key)
            if cached_data:
                logger.debug(f"Using cached data for folder {parent_folder_id}")
                return cached_data
        except Exception as e:
            logger.debug(f"Cache unavailable: {e}")

        logger.info(f"Fetching files and folders for parent_id={parent_folder_id}")
        data = self._make_request('GET', 'files/GetFiles', params=params)

        result = {
            'files': data.get('files', []),
            'folders': data.get('folders', []),
            'folder': data.get('folder'),
            'path': data.get('path', []),
            'space': data.get('space', 0),
            'space_used': data.get('space_used', 0),
        }

        try:
            cache.set(cache_key, result, 300)  # 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.debug(f"Could not cache result: {e}")

        return result

    def get_folder_details(self, folder_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ

        Args:
            folder_id: ID –ø–∞–ø–∫–∏

        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ
        """
        logger.info(f"Fetching folder details for folder_id={folder_id}")

        params = {'id': folder_id}
        data = self._make_request('GET', 'files/GetFolder', params=params)

        return data.get('folder', {})

    def get_all_files_recursive(
        self,
        parent_folder_id: Optional[int] = None,
        max_depth: int = 50
    ) -> Dict[str, List]:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏

        Args:
            parent_folder_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏ (None = –∫–æ—Ä–µ–Ω—å)
            max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'all_files', 'all_folders', 'folder_count', 'file_count'
        """
        all_files = []
        all_folders = []
        visited_folders = set()  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        folder_count = 0
        file_count = 0

        def fetch_recursive(folder_id: Optional[int], current_path: str = "", depth: int = 0):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
            nonlocal folder_count, file_count

            # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
            if depth > max_depth:
                logger.warning(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ({max_depth}) –¥–ª—è –ø—É—Ç–∏: {current_path}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
            folder_key = folder_id if folder_id is not None else 'root'
            if folder_key in visited_folders:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ ID={folder_id} (–ø—É—Ç—å: {current_path})")
                return

            visited_folders.add(folder_key)
            logger.debug(f"üìÇ –î–æ–±–∞–≤–ª—è–µ–º –≤ visited: {folder_key} (–≥–ª—É–±–∏–Ω–∞: {depth})")

            data = self.get_files_and_folders(folder_id)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
            files = data['files']
            for file in files:
                file['path'] = current_path  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                file['parent_folder_id'] = folder_id  # –î–æ–±–∞–≤–ª—è–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
                all_files.append(file)
                file_count += 1
                logger.debug(f"üìÑ –§–∞–π–ª: {file.get('name')} –≤ {current_path}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            folders = data['folders']
            for folder in folders:
                folder_count += 1
                folder_name = folder.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                full_path = f"{current_path}/{folder_name}".strip("/")
                folder['path'] = full_path  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
                all_folders.append(folder)

                logger.info(f"üìÅ –ü–∞–ø–∫–∞: {full_path} (ID: {folder.get('id')}, –≥–ª—É–±–∏–Ω–∞: {depth + 1})")

            logger.debug(f"–ü–∞–ø–∫–∞ {folder_id}: {len(folders)} –ø–æ–¥–ø–∞–ø–æ–∫, {len(files)} —Ñ–∞–π–ª–æ–≤")

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            for folder in folders:
                folder_name = folder.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                full_path = f"{current_path}/{folder_name}".strip("/")
                fetch_recursive(folder['id'], full_path, depth + 1)

        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É SimplePrint (–Ω–∞—á–∞–ª–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞)...")
        fetch_recursive(parent_folder_id)

        logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–∞–ø–æ–∫: {folder_count}, —Ñ–∞–π–ª–æ–≤: {file_count} –∏–∑ {len(visited_folders)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π")

        return {
            'all_files': all_files,
            'all_folders': all_folders,
            'folder_count': folder_count,
            'file_count': file_count,
        }


class SimplePrintPrintersClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ –≤ SimplePrint API
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        config = settings.SIMPLEPRINT_CONFIG

        self.base_url = config['base_url'].rstrip('/')
        self.api_token = config['api_token']
        self.rate_limit = config['rate_limit']  # requests per minute

        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.request_delay = 60.0 / self.rate_limit  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

        self.retry_attempts = 2  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        self.timeout = 10  # –£–º–µ–Ω—å—à–∏–ª–∏ timeout –¥–æ 10 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 30)

        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è rate limiting
        self._last_request_time = 0

    def _get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        return {
            'X-API-KEY': self.api_token,
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }

    def _rate_limit(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å rate limiting"""
        current_time = time.time()
        time_since_last_request = current_time - self._last_request_time

        if time_since_last_request < self.request_delay:
            sleep_time = self.request_delay - time_since_last_request
            logger.debug(f"Rate limiting: sleeping for {sleep_time:.2f} seconds")
            time.sleep(sleep_time)

        self._last_request_time = time.time()

    def _make_request(
        self,
        method: str,
        endpoint: str,
        params: Optional[Dict] = None,
        data: Optional[Dict] = None,
        retry_count: int = 0
    ) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π

        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST)
            endpoint: API endpoint
            params: Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
            retry_count: –¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏)

        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è

        Raises:
            SimplePrintAPIError: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
        """
        # –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
        self._rate_limit()

        url = f"{self.base_url}/{endpoint}"
        headers = self._get_headers()

        try:
            logger.debug(f"{method} {url} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{self.retry_attempts})")

            if method == 'GET':
                response = requests.get(url, headers=headers, params=params, timeout=self.timeout)
            elif method == 'POST':
                response = requests.post(url, headers=headers, json=data, timeout=self.timeout)
            else:
                raise SimplePrintAPIError(f"Unsupported HTTP method: {method}")

            response.raise_for_status()

            data = response.json()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ SimplePrint
            if not data.get('status', False):
                error_message = data.get('message', 'Unknown error')
                logger.error(f"SimplePrint API error: {error_message}")
                raise SimplePrintAPIError(f"API returned error: {error_message}")

            return data

        except requests.exceptions.Timeout:
            logger.warning(f"Request timeout for {url}")
            if retry_count < self.retry_attempts - 1:
                return self._make_request(method, endpoint, params, data, retry_count + 1)
            raise SimplePrintAPIError(f"Request timeout after {self.retry_attempts} attempts")

        except requests.exceptions.HTTPError as e:
            logger.error(f"HTTP error {e.response.status_code}: {e.response.text}")
            if retry_count < self.retry_attempts - 1 and e.response.status_code >= 500:
                # Retry —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫
                time.sleep(2 ** retry_count)  # Exponential backoff
                return self._make_request(method, endpoint, params, data, retry_count + 1)
            raise SimplePrintAPIError(f"HTTP error {e.response.status_code}: {e.response.text}")

        except requests.exceptions.RequestException as e:
            logger.error(f"Request error: {e}")
            if retry_count < self.retry_attempts - 1:
                time.sleep(2 ** retry_count)  # Exponential backoff
                return self._make_request(method, endpoint, params, data, retry_count + 1)
            raise SimplePrintAPIError(f"Request failed: {e}")

    def get_printers(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —Å –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º

        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        logger.info("Fetching all printers from SimplePrint API")

        try:
            response = self._make_request('POST', 'printers/Get')
            printers_data = response.get('data', [])

            logger.info(f"Successfully fetched {len(printers_data)} printers")
            return printers_data

        except Exception as e:
            logger.error(f"Failed to fetch printers: {e}")
            raise SimplePrintAPIError(f"Failed to fetch printers: {e}")

    def get_jobs_history(self, limit: int = 200) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—á–∞—Ç–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200)

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        logger.info(f"Fetching jobs history from SimplePrint API (limit={limit})")

        try:
            # SimplePrint API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π
            response = self._make_request('POST', 'jobs/GetHistory', data={'limit': limit})
            jobs_data = response.get('data', [])

            logger.info(f"Successfully fetched {len(jobs_data)} jobs")
            return jobs_data

        except Exception as e:
            logger.error(f"Failed to fetch jobs history: {e}")
            raise SimplePrintAPIError(f"Failed to fetch jobs history: {e}")

    def get_printer_jobs(self, printer_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞

        Args:
            printer_id: ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ SimplePrint

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å current_job –∏ queue
        """
        logger.info(f"Fetching jobs for printer {printer_id}")

        try:
            response = self._make_request('POST', 'printers/Get', data={'id': printer_id})
            printer_data = response.get('data', {})

            return {
                'current_job': printer_data.get('current_job'),
                'queue': printer_data.get('queue', [])
            }

        except Exception as e:
            logger.error(f"Failed to fetch jobs for printer {printer_id}: {e}")
            raise SimplePrintAPIError(f"Failed to fetch jobs for printer {printer_id}: {e}")
