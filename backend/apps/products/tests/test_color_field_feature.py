"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∏—á–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—è "–¶–≤–µ—Ç" –∏–∑ –ú–æ–π–°–∫–ª–∞–¥

–°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º TDD - —Å–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç—ã, –ø–æ—Ç–æ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è.
–ü–æ–∫—Ä—ã—Ç–∏–µ: 90%+ –∫–æ–¥–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –ø–æ–ª–µ–º color
"""

from django.test import TestCase
from django.core.exceptions import ValidationError
from decimal import Decimal
from unittest.mock import patch, MagicMock

from apps.products.models import Product, ProductImage
from apps.sync.moysklad_client import MoySkladClient


class ColorFieldModelTests(TestCase):
    """
    –¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ Product —Å –ø–æ–ª–µ–º color
    """
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        self.product_data = {
            'moysklad_id': 'test-id-123',
            'article': 'TEST-001',
            'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
            'current_stock': Decimal('10.00'),
            'sales_last_2_months': Decimal('5.00'),
            'product_type': 'old'
        }
    
    def test_product_model_has_color_field(self):
        """
        –¢–µ—Å—Ç: –ú–æ–¥–µ–ª—å Product –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–æ–ª–µ color
        """
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å —Ü–≤–µ—Ç–æ–º
        product = Product.objects.create(
            **self.product_data,
            color='–ö—Ä–∞—Å–Ω—ã–π'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ color —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        self.assertEqual(product.color, '–ö—Ä–∞—Å–Ω—ã–π')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ —Ü–≤–µ—Ç—É
        product_from_db = Product.objects.get(color='–ö—Ä–∞—Å–Ω—ã–π')
        self.assertEqual(product_from_db.moysklad_id, 'test-id-123')
    
    def test_color_field_is_optional(self):
        """
        –¢–µ—Å—Ç: –ü–æ–ª–µ color –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º (blank=True)
        """
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ —Ü–≤–µ—Ç–∞
        product = Product.objects.create(**self.product_data)
        
        # –ü–æ–ª–µ color –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ None
        self.assertTrue(product.color == '' or product.color is None)
        
        # –ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        self.assertIsNotNone(product.id)
    
    def test_color_field_max_length(self):
        """
        –¢–µ—Å—Ç: –ü–æ–ª–µ color –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å —Ä–∞–∑—É–º–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ
        """
        # –¢–µ—Å—Ç —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        product1 = Product.objects.create(
            **self.product_data,
            color='–Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π —Å –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º'
        )
        self.assertIsNotNone(product1.id)
        
        # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–∞ (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        long_color = '–ê' * 100
        product2 = Product.objects.create(
            moysklad_id='test-id-124',
            article='TEST-002',
            name='–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2',
            color=long_color
        )
        self.assertEqual(product2.color, long_color)
    
    def test_color_field_unicode_support(self):
        """
        –¢–µ—Å—Ç: –ü–æ–ª–µ color –¥–æ–ª–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏
        """
        test_colors = [
            '–ö—Ä–∞—Å–Ω—ã–π',
            '–°–∏–Ω–∏–π –º–µ—Ç–∞–ª–ª–∏–∫',
            '–ß—ë—Ä–Ω—ã–π –º–∞—Ç–æ–≤—ã–π',
            '–ó–µ–ª—ë–Ω—ã–π üü¢',
            'Multi-—Ü–≤–µ—Ç–Ω—ã–π',
        ]
        
        for i, color in enumerate(test_colors):
            product = Product.objects.create(
                moysklad_id=f'test-id-{i}',
                article=f'TEST-{i}',
                name=f'–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä {i}',
                color=color
            )
            self.assertEqual(product.color, color)
    
    def test_product_string_representation_includes_color(self):
        """
        –¢–µ—Å—Ç: –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ü–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        """
        # –ü—Ä–æ–¥—É–∫—Ç —Å —Ü–≤–µ—Ç–æ–º
        product_with_color = Product.objects.create(
            **self.product_data,
            color='–°–∏–Ω–∏–π'
        )
        
        # –ü—Ä–æ–¥—É–∫—Ç –±–µ–∑ —Ü–≤–µ—Ç–∞
        product_without_color = Product.objects.create(
            moysklad_id='test-id-124',
            article='TEST-002',
            name='–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        str_with_color = str(product_with_color)
        str_without_color = str(product_without_color)
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–µ
        self.assertIn('–°–∏–Ω–∏–π', str_with_color)
        
        # –ë–µ–∑ —Ü–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º
        self.assertIn('TEST-002', str_without_color)


class ColorFieldSyncTests(TestCase):
    """
    –¢–µ—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—è color —Å –ú–æ–π–°–∫–ª–∞–¥
    """
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        self.client = MoySkladClient()
        
        self.mock_product_data = {
            'id': 'test-moysklad-id',
            'article': 'TEST-SYNC-001',
            'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'attributes': [
                {
                    'meta': {
                        'href': 'https://api.moysklad.ru/api/remap/1.2/entity/product/metadata/attributes/color-attr-id'
                    },
                    'name': '–¶–≤–µ—Ç',
                    'value': '–ö—Ä–∞—Å–Ω—ã–π'
                },
                {
                    'meta': {
                        'href': 'https://api.moysklad.ru/api/remap/1.2/entity/product/metadata/attributes/other-attr-id'
                    },
                    'name': '–î—Ä—É–≥–æ–π –∞—Ç—Ä–∏–±—É—Ç',
                    'value': '–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                }
            ],
            'stock': 10,
            'reserve': 2
        }
    
    def test_extract_color_from_moysklad_attributes(self):
        """
        –¢–µ—Å—Ç: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ú–æ–π–°–∫–ª–∞–¥
        """
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
        color = self.client.extract_color_from_attributes(
            self.mock_product_data.get('attributes', [])
        )
        
        self.assertEqual(color, '–ö—Ä–∞—Å–Ω—ã–π')
    
    def test_extract_color_when_no_color_attribute(self):
        """
        –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∞—Ç—Ä–∏–±—É—Ç "–¶–≤–µ—Ç" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        """
        # –î–∞–Ω–Ω—ã–µ –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ "–¶–≤–µ—Ç"
        data_without_color = {
            'attributes': [
                {
                    'name': '–†–∞–∑–º–µ—Ä',
                    'value': '–ë–æ–ª—å—à–æ–π'
                }
            ]
        }
        
        color = self.client.extract_color_from_attributes(
            data_without_color.get('attributes', [])
        )
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None
        self.assertTrue(color == '' or color is None)
    
    def test_extract_color_when_no_attributes(self):
        """
        –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        """
        color = self.client.extract_color_from_attributes([])
        self.assertTrue(color == '' or color is None)
    
    def test_extract_color_case_insensitive(self):
        """
        –¢–µ—Å—Ç: –ü–æ–∏—Å–∫ –∞—Ç—Ä–∏–±—É—Ç–∞ "–¶–≤–µ—Ç" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        """
        test_cases = [
            {'name': '—Ü–≤–µ—Ç', 'value': '–ó–µ–ª—ë–Ω—ã–π'},
            {'name': '–¶–í–ï–¢', 'value': '–ñ—ë–ª—Ç—ã–π'},
            {'name': '–¶–≤–µ—Ç', 'value': '–°–∏–Ω–∏–π'},
            {'name': '–¶–≤–ï—Ç', 'value': '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'}
        ]
        
        for case in test_cases:
            attributes = [case]
            color = self.client.extract_color_from_attributes(attributes)
            self.assertEqual(color, case['value'])
    
    def test_sync_product_with_color(self):
        """
        –¢–µ—Å—Ç: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–ª–µ–º color –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
        """
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º "–¶–≤–µ—Ç"
        product_data = {
            'id': 'test-moysklad-id',
            'name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
            'article': 'TEST-001',
            'attributes': [
                {
                    'id': 'color-attr-id',
                    'name': '–¶–≤–µ—Ç',
                    'value': '–ö—Ä–∞—Å–Ω—ã–π'
                }
            ]
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        extracted_color = self.client.extract_color_from_attributes(product_data['attributes'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        self.assertEqual(extracted_color, '–ö—Ä–∞—Å–Ω—ã–π')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ü–≤–µ—Ç–∞
        product_without_color = {
            'attributes': [
                {
                    'id': 'other-attr-id',
                    'name': '–†–∞–∑–º–µ—Ä',
                    'value': 'XL'
                }
            ]
        }
        
        no_color = self.client.extract_color_from_attributes(product_without_color['attributes'])
        self.assertEqual(no_color, '')
    
    def test_sync_performance_with_color_field(self):
        """
        –¢–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–ª–µ–º color < 5 —Å–µ–∫
        """
        import time
        
        # –°–æ–∑–¥–∞–µ–º 100 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        test_products = []
        for i in range(100):
            product_data = {
                'moysklad_id': f'test-id-{i}',
                'article': f'PERF-{i:03d}',
                'name': f'–¢–æ–≤–∞—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {i}',
                'color': f'–¶–≤–µ—Ç-{i % 10}',  # 10 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
                'current_stock': Decimal('5.00'),
                'sales_last_2_months': Decimal('2.00')
            }
            test_products.append(Product(**product_data))
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        start_time = time.time()
        Product.objects.bulk_create(test_products)
        end_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è < 5 —Å–µ–∫—É–Ω–¥
        execution_time = end_time - start_time
        self.assertLess(execution_time, 5.0, 
                       f"–°–æ–∑–¥–∞–Ω–∏–µ 100 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–Ω—è–ª–æ {execution_time:.2f} —Å–µ–∫, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < 5 —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —Å —Ü–≤–µ—Ç–∞–º–∏
        created_products = Product.objects.filter(article__startswith='PERF-')
        self.assertEqual(created_products.count(), 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤
        for product in created_products.all():
            self.assertTrue(product.color.startswith('–¶–≤–µ—Ç-'))


class ColorFieldAPITests(TestCase):
    """
    –¢–µ—Å—Ç—ã API endpoints —Å –ø–æ–ª–µ–º color
    """
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ API"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        self.products = []
        colors = ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ó–µ–ª—ë–Ω—ã–π', '–ñ—ë–ª—Ç—ã–π', '']
        
        for i, color in enumerate(colors):
            product = Product.objects.create(
                moysklad_id=f'api-test-{i}',
                article=f'API-{i:03d}',
                name=f'API —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä {i}',
                color=color,
                current_stock=Decimal('10.00'),
                sales_last_2_months=Decimal('5.00')
            )
            self.products.append(product)
    
    def test_products_api_includes_color(self):
        """
        –¢–µ—Å—Ç: API /api/v1/products/ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –ø–æ–ª–µ color
        """
        from django.test import Client
        from django.contrib.auth.models import User
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        user = User.objects.create_user('testuser', 'test@example.com', 'password')
        
        client = Client()
        client.force_login(user)
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = client.get('/api/v1/products/')
        self.assertEqual(response.status_code, 200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ color –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ
        data = response.json()
        self.assertIn('results', data)
        
        if data['results']:
            first_product = data['results'][0]
            self.assertIn('color', first_product)
    
    def test_tochka_api_includes_color(self):
        """
        –¢–µ—Å—Ç: API –¢–æ—á–∫–∞ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –ø–æ–ª–µ color
        """
        from django.test import Client
        from django.contrib.auth.models import User
        
        user = User.objects.create_user('testuser2', 'test2@example.com', 'password')
        client = Client()
        client.force_login(user)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ç–æ—á–∫–∏
        response = client.get('/api/v1/tochka/products/')
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        if 'products' in data and data['products']:
            first_product = data['products'][0]
            self.assertIn('color', first_product)
    
    def test_filter_products_by_color(self):
        """
        –¢–µ—Å—Ç: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–≤–µ—Ç—É
        """
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–≤–µ—Ç—É –≤ Python (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        red_products = Product.objects.filter(color='–ö—Ä–∞—Å–Ω—ã–π')
        blue_products = Product.objects.filter(color='–°–∏–Ω–∏–π')
        empty_color_products = Product.objects.filter(color='')
        
        self.assertEqual(red_products.count(), 1)
        self.assertEqual(blue_products.count(), 1)
        self.assertEqual(empty_color_products.count(), 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.assertEqual(red_products.first().color, '–ö—Ä–∞—Å–Ω—ã–π')
        self.assertEqual(blue_products.first().color, '–°–∏–Ω–∏–π')


class ColorFieldBackwardCompatibilityTests(TestCase):
    """
    –¢–µ—Å—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—è color
    """
    
    def test_existing_products_work_without_color(self):
        """
        –¢–µ—Å—Ç: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ –ø–æ–ª—è color –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å—Ç–∞—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º (–±–µ–∑ color)
        product = Product.objects.create(
            moysklad_id='backward-test-001',
            article='BWD-001',
            name='–ü—Ä–æ–¥—É–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
            current_stock=Decimal('5.00')
        )
        
        # –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        self.assertIsNotNone(product.classify_product_type())
        self.assertIsNotNone(product.calculate_production_need())
        self.assertIsNotNone(product.calculate_priority())
        
        # save() –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
        product.save()
        self.assertIsNotNone(product.id)
    
    def test_migration_rollback_safety(self):
        """
        –¢–µ—Å—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å —Ü–≤–µ—Ç–æ–º
        product = Product.objects.create(
            moysklad_id='migration-test-001',
            article='MIG-001',
            name='–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏',
            color='–ö—Ä–∞—Å–Ω—ã–π'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è
        self.assertIsNotNone(product.id)
        self.assertEqual(product.color, '–ö—Ä–∞—Å–Ω—ã–π')
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—è color (–∫–∞–∫ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏)
        # –ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å
        product_data = {
            'moysklad_id': product.moysklad_id,
            'article': product.article,
            'name': product.name,
            'current_stock': product.current_stock,
            'sales_last_2_months': product.sales_last_2_months
        }
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ–ª—è color
        self.assertIsNotNone(product_data['article'])
        self.assertIsNotNone(product_data['name'])


class ColorFieldEdgeCasesTests(TestCase):
    """
    –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –ø–æ–ª—è color
    """
    
    def test_color_with_special_characters(self):
        """
        –¢–µ—Å—Ç: –¶–≤–µ—Ç–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        """
        special_colors = [
            '–ö—Ä–∞—Å–Ω–æ-—Å–∏–Ω–∏–π',
            '–¶–≤–µ—Ç #FF5733',
            'RGB(255, 99, 71)',
            '–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π 50%',
            '–ú–µ—Ç–∞–ª–ª–∏–∫ & –≥–ª—è–Ω–µ—Ü',
            '–¶–≤–µ—Ç "–ú–æ—Ä—Å–∫–∞—è –≤–æ–ª–Ω–∞"',
            "–¶–≤–µ—Ç 'Sunset'",
        ]
        
        for i, color in enumerate(special_colors):
            product = Product.objects.create(
                moysklad_id=f'special-{i}',
                article=f'SPEC-{i:03d}',
                name=f'–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä {i}',
                color=color
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            saved_product = Product.objects.get(moysklad_id=f'special-{i}')
            self.assertEqual(saved_product.color, color)
    
    def test_color_normalization(self):
        """
        –¢–µ—Å—Ç: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Ü–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        # –¢–µ—Å—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —É–¥–∞–ª—è—é—Ç—Å—è
        product = Product.objects.create(
            moysklad_id='normalize-test',
            article='NORM-001',
            name='–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏',
            color='  –ö—Ä–∞—Å–Ω—ã–π  '
        )
        
        # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
        product.refresh_from_db()
        self.assertEqual(product.color.strip(), '–ö—Ä–∞—Å–Ω—ã–π')
    
    def test_empty_vs_null_color_handling(self):
        """
        –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π vs NULL
        """
        # –ü—Ä–æ–¥—É–∫—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        product1 = Product.objects.create(
            moysklad_id='empty-1',
            article='EMPTY-1',
            name='–ü—É—Å—Ç–æ–π —Ü–≤–µ—Ç 1',
            color=''
        )
        
        # –ü—Ä–æ–¥—É–∫—Ç –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å default='')
        product2 = Product.objects.create(
            moysklad_id='empty-2',
            article='EMPTY-2',
            name='–ü—É—Å—Ç–æ–π —Ü–≤–µ—Ç 2'
            # color –Ω–µ —É–∫–∞–∑–∞–Ω, –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è default=''
        )
        
        # –û–±–∞ –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
        self.assertIsNotNone(product1.id)
        self.assertIsNotNone(product2.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self.assertEqual(product1.color, '')
        self.assertEqual(product2.color, '')