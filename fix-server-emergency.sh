#!/bin/bash

# PrintFarm - Emergency Server Fix Script
# –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï PRINTFARM –°–ï–†–í–ï–†–ê"

# Step 1: Clean up Docker completely
log "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —Å–µ—Ç–µ–π..."

# Stop all printfarm containers
docker-compose down --remove-orphans 2>/dev/null || true

# Kill any containers that might still be running
docker stop $(docker ps -a -q --filter name=printfarm) 2>/dev/null || true
docker rm $(docker ps -a -q --filter name=printfarm) 2>/dev/null || true

# Clean up networks
docker network prune -f 2>/dev/null || true

# Check what's using port 6379
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ 6379..."
if netstat -tulnp | grep -q ":6379"; then
    warn "–ü–æ—Ä—Ç 6379 –∑–∞–Ω—è—Ç. –ü—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å..."
    
    # Try to find and kill Redis processes
    REDIS_PIDS=$(ps aux | grep redis | grep -v grep | awk '{print $2}' || true)
    if [ ! -z "$REDIS_PIDS" ]; then
        log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Redis: $REDIS_PIDS"
        echo "$REDIS_PIDS" | xargs kill -9 2>/dev/null || true
    fi
    
    # Check again
    sleep 2
    if netstat -tulnp | grep -q ":6379"; then
        error "‚ùå –ü–æ—Ä—Ç 6379 –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç"
        info "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç:"
        netstat -tulnp | grep ":6379" || true
        warn "–ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç Redis –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        
        # Modify docker-compose.yml to use different port
        if [ -f "docker-compose.yml" ]; then
            sed -i 's/6379:6379/6380:6379/g' docker-compose.yml
            log "‚úÖ –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—Ç Redis —Å 6379 –Ω–∞ 6380"
        fi
        
        # Update Redis URL in environment if needed
        if [ -f ".env" ]; then
            sed -i 's|redis://redis:6379|redis://redis:6379|g' .env
            sed -i 's|redis://localhost:6379|redis://localhost:6380|g' .env
            log "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Redis"
        fi
    else
        log "‚úÖ –ü–æ—Ä—Ç 6379 –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
    fi
fi

# Step 2: Return to main branch to ensure stability
log "üîß –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ main..."
git checkout main
git reset --hard origin/main

# Step 3: Check and fix any local modifications
log "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
git status

# If there are modifications to docker-compose.prod.yml, stash them
if git status --porcelain | grep -q "docker-compose.prod.yml"; then
    log "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ docker-compose.prod.yml..."
    git stash push -m "Backup server modifications $(date)"
fi

# Step 4: Clean start with basic configuration
log "üöÄ –ó–∞–ø—É—Å–∫ —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π..."

# Create a minimal .env if it doesn't exist
if [ ! -f ".env" ]; then
    log "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞..."
    cat << 'EOF' > .env
# Django
SECRET_KEY=django-insecure-change-this-key
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1

# Database
POSTGRES_DB=printfarm_db
POSTGRES_USER=printfarm_user
POSTGRES_PASSWORD=secure_password

# Redis
REDIS_URL=redis://redis:6379/0

# MoySkald
MOYSKLAD_TOKEN=f9be4985f5e3488716c040ca52b8e04c7c0f9e0b
MOYSKLAD_DEFAULT_WAREHOUSE=241ed919-a631-11ee-0a80-07a9000bb947

# Celery
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0
EOF
    log "‚úÖ –ë–∞–∑–æ–≤—ã–π .env —Å–æ–∑–¥–∞–Ω"
fi

# Step 5: Start services one by one
log "üîÑ –ü–æ—ç—Ç–∞–ø–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# Start database first
log "1/4 –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker-compose up -d db
sleep 5

# Check database status
if docker-compose ps db | grep -q "Up"; then
    log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞"
else
    error "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
    docker-compose logs db
    exit 1
fi

# Start Redis
log "2/4 –ó–∞–ø—É—Å–∫ Redis..."
docker-compose up -d redis
sleep 3

if docker-compose ps redis | grep -q "Up"; then
    log "‚úÖ Redis –∑–∞–ø—É—â–µ–Ω"
else
    error "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Redis"
    docker-compose logs redis
    exit 1
fi

# Apply migrations
log "3/4 –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
docker-compose run --rm backend python manage.py migrate

# Start all services
log "4/4 –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up --build -d

# Step 6: Health check
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
sleep 10

docker-compose ps

# Test basic connectivity
log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
if curl -sf "http://localhost:8000/api/v1/products/" > /dev/null; then
    log "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    warn "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
    docker-compose logs --tail=20 backend
fi

# Step 7: Apply v3.1 fixes manually if needed
log "üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑ v3.1..."

# Create a Python script to fix the algorithm
cat << 'EOF' > /tmp/apply_v31_fixes.py
import os
import sys
import django
from decimal import Decimal

# Setup Django
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.base')
django.setup()

from apps.products.models import Product

def apply_algorithm_fixes():
    """Apply v3.1 algorithm fixes directly to the model"""
    print("=== –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞ v3.1 ===")
    
    # Get the current model code
    model_file = '/app/apps/products/models.py'
    
    with open(model_file, 'r') as f:
        content = f.read()
    
    # Check if fixes are already applied
    if 'actual_type = self.classify_product_type()' in content:
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        return
    
    print("üìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ calculate_production_need...")
    
    # Apply the key fix: dynamic product type classification
    old_pattern = 'if self.product_type == \'new\':'
    new_pattern = '''# Get the actual product type based on current conditions
        actual_type = self.classify_product_type()
        
        if actual_type == 'new':'''
    
    if old_pattern in content:
        content = content.replace(old_pattern, new_pattern)
        
        # Also fix the elif condition
        content = content.replace(
            "elif self.product_type in ['old', 'critical']:",
            "elif actual_type in ['old', 'critical']:"
        )
        
        # Fix priority calculation too
        content = content.replace(
            "if self.product_type == 'critical'",
            "if actual_type == 'critical'"
        )
        content = content.replace(
            "elif self.product_type == 'old'",
            "elif actual_type == 'old'"
        )
        content = content.replace(
            "elif self.product_type == 'new'",
            "elif actual_type == 'new'"
        )
        
        # Write back
        with open(model_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    else:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    apply_algorithm_fixes()
EOF

# Apply the fixes
if docker-compose exec -T backend python /tmp/apply_v31_fixes.py; then
    log "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    
    # Restart backend to reload the code
    docker-compose restart backend
    sleep 5
else
    warn "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞"
fi

# Final status
log "üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
docker-compose ps

log "üéâ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

info "üìã –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:"
info "   ‚Ä¢ –û—á–∏—â–µ–Ω—ã –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —Å–µ—Ç–∏"
info "   ‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç 6379"
info "   ‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ç–∫–µ main"
info "   ‚Ä¢ –ü–æ—ç—Ç–∞–ø–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
info "   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞"

warn "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
warn "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API –ø–æ –∞–¥—Ä–µ—Å—É http://your-server-ip"
warn "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
warn "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs -f"

# Cleanup
rm -f /tmp/apply_v31_fixes.py

log "‚úÖ –°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"