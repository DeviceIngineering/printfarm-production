name: Auto Deploy to Test Server

on:
  push:
    branches: [test_v1, main]
  pull_request:
    branches: [test_v1]

env:
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        # pip install -r requirements.txt  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ñ–∞–π–ª
    
    - name: Lint with flake8
      run: |
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Å–±–æ—Ä–∫—É
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Check code formatting
      run: |
        black --check . || true
        isort --check-only . || true
      continue-on-error: true
    
    - name: Validate Docker configs
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ docker-compose —Ñ–∞–π–ª–æ–≤
        docker-compose -f docker-compose.prod.yml config
    
    - name: Security scan
      run: |
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ
        if grep -r "SECRET_KEY.*=.*['\"][^'\"]*['\"]" . --exclude-dir=.git --exclude="*.yml" --exclude="*.example"; then
          echo "WARNING: Potential hardcoded secrets found"
        fi
      continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/test_v1' || github.ref == 'refs/heads/main'
    name: Deploy to Test Server
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
    
    - name: Test SSH Connection
      run: |
        ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"
    
    - name: Deploy Application
      run: |
        ssh -i ~/.ssh/deploy_key ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'ENDSSH'
          set -e
          
          echo "=========================================="
          echo "Starting automated deployment..."
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Time: $(date)"
          echo "=========================================="
          
          # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è printfarm
          sudo su - printfarm << 'ENDSU'
            set -e
            cd /opt/printfarm
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –¥–µ–ø–ª–æ—è
            mkdir -p /opt/printfarm/logs/deploy
            DEPLOY_LOG="/opt/printfarm/logs/deploy/deploy-$(date +%Y%m%d_%H%M%S).log"
            
            exec > >(tee -a $DEPLOY_LOG) 2>&1
            
            echo "Deployment log: $DEPLOY_LOG"
            echo "Starting deployment at $(date)"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
            if [ -f "docker-compose.prod.yml" ]; then
              echo "Current services status:"
              docker-compose -f docker-compose.prod.yml ps || true
            fi
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
            if [ -d ".git" ]; then
              echo "Updating existing repository..."
              git fetch origin
              git reset --hard origin/${{ github.ref_name }}
              git clean -fd
            else
              echo "Cloning repository..."
              git clone -b ${{ github.ref_name }} https://github.com/${{ github.repository }}.git .
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if [ ! -f ".env.prod" ]; then
              echo "ERROR: .env.prod file not found!"
              echo "Please create .env.prod from .env.prod.example"
              exit 1
            fi
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
            ln -sf .env.prod .env
            chmod 600 .env.prod
            chmod +x scripts/*.sh
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if docker-compose -f docker-compose.prod.yml ps | grep -q postgres; then
              echo "Creating database backup..."
              BACKUP_FILE="backups/auto_backup_$(date +%Y%m%d_%H%M%S).sql"
              mkdir -p backups
              docker-compose -f docker-compose.prod.yml exec -T db pg_dump -U printfarm_user printfarm_db > $BACKUP_FILE || echo "Backup failed, continuing..."
              echo "Backup saved to: $BACKUP_FILE"
            fi
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "Stopping old containers..."
            docker-compose -f docker-compose.prod.yml down || true
            
            # –°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
            echo "Building new images..."
            docker-compose -f docker-compose.prod.yml build --no-cache
            
            # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "Starting containers..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "Waiting for services to start..."
            sleep 15
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
            echo "Running migrations..."
            docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate --noinput || echo "Migrations failed"
            
            # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            echo "Collecting static files..."
            docker-compose -f docker-compose.prod.yml exec -T backend python manage.py collectstatic --noinput || echo "Static files collection failed"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "Checking services health..."
            sleep 10
            docker-compose -f docker-compose.prod.yml ps
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            echo "Testing API availability..."
            if curl -f -s http://localhost/health/ > /dev/null; then
              echo "‚úì Health check passed"
            else
              echo "‚úó Health check failed, checking logs..."
              docker-compose -f docker-compose.prod.yml logs --tail=20 backend
            fi
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
            echo "Cleaning up old images..."
            docker image prune -f
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            find backups/ -name "*.sql" -mtime +7 -delete 2>/dev/null || true
            
            echo "Deployment completed successfully at $(date)"
            echo "=========================================="
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–∞–π–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            echo "{
              \"status\": \"success\",
              \"timestamp\": \"$(date -Iseconds)\",
              \"branch\": \"${{ github.ref_name }}\",
              \"commit\": \"${{ github.sha }}\",
              \"log_file\": \"$DEPLOY_LOG\"
            }" > /opt/printfarm/logs/last_deployment.json
          ENDSU
          
          echo "Deployment completed on $(date)"
        ENDSSH
    
    - name: Verify Deployment
      run: |
        sleep 5
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ HTTP
        if curl -f -s "http://${{ secrets.DEPLOY_HOST }}/health/" > /dev/null; then
          echo "‚úì Service is accessible"
        else
          echo "‚úó Service check failed"
          # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          ssh -i ~/.ssh/deploy_key ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "sudo su - printfarm -c 'cd /opt/printfarm && docker-compose -f docker-compose.prod.yml logs --tail=50'"
          exit 1
        fi
    
    - name: Notify on Success
      if: success()
      run: |
        echo "üéâ Deployment to test server successful!"
        echo "‚úÖ Branch: ${{ github.ref_name }}"
        echo "‚úÖ Commit: ${{ github.sha }}"
        echo "‚úÖ Time: $(date)"
    
    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå Deployment to test server failed!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Check the logs above for details."

  cleanup:
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    name: Cleanup
    
    steps:
    - name: Clean up SSH keys
      run: |
        rm -f ~/.ssh/deploy_key || true