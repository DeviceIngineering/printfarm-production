version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - /opt/printfarm/data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - printfarm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - /opt/printfarm/data/redis:/data
    networks:
      - printfarm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
      target: production
    restart: unless-stopped
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - /opt/printfarm/data/static:/app/static
      - /opt/printfarm/data/media:/app/media
      - /opt/printfarm/logs:/app/logs
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - printfarm-network

  # celery:
  #   build:
  #     context: .
  #     dockerfile: docker/django/Dockerfile
  #     target: production
  #   restart: unless-stopped
  #   command: celery -A config worker -l info
  #   volumes:
  #     - /opt/printfarm/data/media:/app/media
  #     - /opt/printfarm/logs:/app/logs
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=config.settings.production
  #   env_file:
  #     - .env
  #   depends_on:
  #     - db
  #     - redis
  #   networks:
  #     - printfarm-network

  frontend:
    build:
      context: .
      dockerfile: docker/react/Dockerfile
    restart: unless-stopped
    networks:
      - printfarm-network

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /opt/printfarm/data/static:/app/static:ro
      - /opt/printfarm/data/media:/app/media:ro
      - /opt/printfarm/logs:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - backend
      - frontend
    networks:
      - printfarm-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

networks:
  printfarm-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: